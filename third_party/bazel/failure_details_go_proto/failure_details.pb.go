// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: third_party/bazel/src/main/protobuf/failure_details.proto

package failure_details_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Interrupted_Code int32

const (
	Interrupted_INTERRUPTED_UNKNOWN               Interrupted_Code = 0
	Interrupted_INTERRUPTED                       Interrupted_Code = 28
	Interrupted_DEPRECATED_BUILD                  Interrupted_Code = 4
	Interrupted_DEPRECATED_BUILD_COMPLETION       Interrupted_Code = 5
	Interrupted_DEPRECATED_PACKAGE_LOADING_SYNC   Interrupted_Code = 6
	Interrupted_DEPRECATED_EXECUTOR_COMPLETION    Interrupted_Code = 7
	Interrupted_DEPRECATED_COMMAND_DISPATCH       Interrupted_Code = 8
	Interrupted_DEPRECATED_INFO_ITEM              Interrupted_Code = 9
	Interrupted_DEPRECATED_AFTER_QUERY            Interrupted_Code = 10
	Interrupted_DEPRECATED_FETCH_COMMAND          Interrupted_Code = 17
	Interrupted_DEPRECATED_SYNC_COMMAND           Interrupted_Code = 18
	Interrupted_DEPRECATED_CLEAN_COMMAND          Interrupted_Code = 20
	Interrupted_DEPRECATED_MOBILE_INSTALL_COMMAND Interrupted_Code = 21
	Interrupted_DEPRECATED_QUERY                  Interrupted_Code = 22
	Interrupted_DEPRECATED_RUN_COMMAND            Interrupted_Code = 23
	Interrupted_DEPRECATED_OPTIONS_PARSING        Interrupted_Code = 27
)

// Enum value maps for Interrupted_Code.
var (
	Interrupted_Code_name = map[int32]string{
		0:  "INTERRUPTED_UNKNOWN",
		28: "INTERRUPTED",
		4:  "DEPRECATED_BUILD",
		5:  "DEPRECATED_BUILD_COMPLETION",
		6:  "DEPRECATED_PACKAGE_LOADING_SYNC",
		7:  "DEPRECATED_EXECUTOR_COMPLETION",
		8:  "DEPRECATED_COMMAND_DISPATCH",
		9:  "DEPRECATED_INFO_ITEM",
		10: "DEPRECATED_AFTER_QUERY",
		17: "DEPRECATED_FETCH_COMMAND",
		18: "DEPRECATED_SYNC_COMMAND",
		20: "DEPRECATED_CLEAN_COMMAND",
		21: "DEPRECATED_MOBILE_INSTALL_COMMAND",
		22: "DEPRECATED_QUERY",
		23: "DEPRECATED_RUN_COMMAND",
		27: "DEPRECATED_OPTIONS_PARSING",
	}
	Interrupted_Code_value = map[string]int32{
		"INTERRUPTED_UNKNOWN":               0,
		"INTERRUPTED":                       28,
		"DEPRECATED_BUILD":                  4,
		"DEPRECATED_BUILD_COMPLETION":       5,
		"DEPRECATED_PACKAGE_LOADING_SYNC":   6,
		"DEPRECATED_EXECUTOR_COMPLETION":    7,
		"DEPRECATED_COMMAND_DISPATCH":       8,
		"DEPRECATED_INFO_ITEM":              9,
		"DEPRECATED_AFTER_QUERY":            10,
		"DEPRECATED_FETCH_COMMAND":          17,
		"DEPRECATED_SYNC_COMMAND":           18,
		"DEPRECATED_CLEAN_COMMAND":          20,
		"DEPRECATED_MOBILE_INSTALL_COMMAND": 21,
		"DEPRECATED_QUERY":                  22,
		"DEPRECATED_RUN_COMMAND":            23,
		"DEPRECATED_OPTIONS_PARSING":        27,
	}
)

func (x Interrupted_Code) Enum() *Interrupted_Code {
	p := new(Interrupted_Code)
	*p = x
	return p
}

func (x Interrupted_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interrupted_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[0].Descriptor()
}

func (Interrupted_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[0]
}

func (x Interrupted_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interrupted_Code.Descriptor instead.
func (Interrupted_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{2, 0}
}

type Spawn_Code int32

const (
	Spawn_SPAWN_UNKNOWN                       Spawn_Code = 0
	Spawn_NON_ZERO_EXIT                       Spawn_Code = 1
	Spawn_TIMEOUT                             Spawn_Code = 2
	Spawn_OUT_OF_MEMORY                       Spawn_Code = 3
	Spawn_EXECUTION_FAILED                    Spawn_Code = 4
	Spawn_EXECUTION_DENIED                    Spawn_Code = 5
	Spawn_REMOTE_CACHE_FAILED                 Spawn_Code = 6
	Spawn_COMMAND_LINE_EXPANSION_FAILURE      Spawn_Code = 7
	Spawn_EXEC_IO_EXCEPTION                   Spawn_Code = 8
	Spawn_INVALID_TIMEOUT                     Spawn_Code = 9
	Spawn_INVALID_REMOTE_EXECUTION_PROPERTIES Spawn_Code = 10
	Spawn_NO_USABLE_STRATEGY_FOUND            Spawn_Code = 11
	Spawn_UNSPECIFIED_EXECUTION_FAILURE       Spawn_Code = 12
	Spawn_FORBIDDEN_INPUT                     Spawn_Code = 13
)

// Enum value maps for Spawn_Code.
var (
	Spawn_Code_name = map[int32]string{
		0:  "SPAWN_UNKNOWN",
		1:  "NON_ZERO_EXIT",
		2:  "TIMEOUT",
		3:  "OUT_OF_MEMORY",
		4:  "EXECUTION_FAILED",
		5:  "EXECUTION_DENIED",
		6:  "REMOTE_CACHE_FAILED",
		7:  "COMMAND_LINE_EXPANSION_FAILURE",
		8:  "EXEC_IO_EXCEPTION",
		9:  "INVALID_TIMEOUT",
		10: "INVALID_REMOTE_EXECUTION_PROPERTIES",
		11: "NO_USABLE_STRATEGY_FOUND",
		12: "UNSPECIFIED_EXECUTION_FAILURE",
		13: "FORBIDDEN_INPUT",
	}
	Spawn_Code_value = map[string]int32{
		"SPAWN_UNKNOWN":                       0,
		"NON_ZERO_EXIT":                       1,
		"TIMEOUT":                             2,
		"OUT_OF_MEMORY":                       3,
		"EXECUTION_FAILED":                    4,
		"EXECUTION_DENIED":                    5,
		"REMOTE_CACHE_FAILED":                 6,
		"COMMAND_LINE_EXPANSION_FAILURE":      7,
		"EXEC_IO_EXCEPTION":                   8,
		"INVALID_TIMEOUT":                     9,
		"INVALID_REMOTE_EXECUTION_PROPERTIES": 10,
		"NO_USABLE_STRATEGY_FOUND":            11,
		"UNSPECIFIED_EXECUTION_FAILURE":       12,
		"FORBIDDEN_INPUT":                     13,
	}
)

func (x Spawn_Code) Enum() *Spawn_Code {
	p := new(Spawn_Code)
	*p = x
	return p
}

func (x Spawn_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Spawn_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[1].Descriptor()
}

func (Spawn_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[1]
}

func (x Spawn_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Spawn_Code.Descriptor instead.
func (Spawn_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{3, 0}
}

type ExternalRepository_Code int32

const (
	ExternalRepository_EXTERNAL_REPOSITORY_UNKNOWN             ExternalRepository_Code = 0
	ExternalRepository_OVERRIDE_DISALLOWED_MANAGED_DIRECTORIES ExternalRepository_Code = 1
	ExternalRepository_BAD_DOWNLOADER_CONFIG                   ExternalRepository_Code = 2
	ExternalRepository_REPOSITORY_MAPPING_RESOLUTION_FAILED    ExternalRepository_Code = 3
)

// Enum value maps for ExternalRepository_Code.
var (
	ExternalRepository_Code_name = map[int32]string{
		0: "EXTERNAL_REPOSITORY_UNKNOWN",
		1: "OVERRIDE_DISALLOWED_MANAGED_DIRECTORIES",
		2: "BAD_DOWNLOADER_CONFIG",
		3: "REPOSITORY_MAPPING_RESOLUTION_FAILED",
	}
	ExternalRepository_Code_value = map[string]int32{
		"EXTERNAL_REPOSITORY_UNKNOWN":             0,
		"OVERRIDE_DISALLOWED_MANAGED_DIRECTORIES": 1,
		"BAD_DOWNLOADER_CONFIG":                   2,
		"REPOSITORY_MAPPING_RESOLUTION_FAILED":    3,
	}
)

func (x ExternalRepository_Code) Enum() *ExternalRepository_Code {
	p := new(ExternalRepository_Code)
	*p = x
	return p
}

func (x ExternalRepository_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalRepository_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[2].Descriptor()
}

func (ExternalRepository_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[2]
}

func (x ExternalRepository_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalRepository_Code.Descriptor instead.
func (ExternalRepository_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{4, 0}
}

type BuildProgress_Code int32

const (
	BuildProgress_BUILD_PROGRESS_UNKNOWN                        BuildProgress_Code = 0
	BuildProgress_OUTPUT_INITIALIZATION                         BuildProgress_Code = 3
	BuildProgress_BES_RUNS_PER_TEST_LIMIT_UNSUPPORTED           BuildProgress_Code = 4
	BuildProgress_BES_LOCAL_WRITE_ERROR                         BuildProgress_Code = 5
	BuildProgress_BES_INITIALIZATION_ERROR                      BuildProgress_Code = 6
	BuildProgress_BES_UPLOAD_TIMEOUT_ERROR                      BuildProgress_Code = 7
	BuildProgress_BES_FILE_WRITE_TIMEOUT                        BuildProgress_Code = 8
	BuildProgress_BES_FILE_WRITE_IO_ERROR                       BuildProgress_Code = 9
	BuildProgress_BES_FILE_WRITE_INTERRUPTED                    BuildProgress_Code = 10
	BuildProgress_BES_FILE_WRITE_CANCELED                       BuildProgress_Code = 11
	BuildProgress_BES_FILE_WRITE_UNKNOWN_ERROR                  BuildProgress_Code = 12
	BuildProgress_BES_UPLOAD_LOCAL_FILE_ERROR                   BuildProgress_Code = 13
	BuildProgress_BES_STREAM_NOT_RETRYING_FAILURE               BuildProgress_Code = 14
	BuildProgress_BES_STREAM_COMPLETED_WITH_UNACK_EVENTS_ERROR  BuildProgress_Code = 15
	BuildProgress_BES_STREAM_COMPLETED_WITH_UNSENT_EVENTS_ERROR BuildProgress_Code = 16
	BuildProgress_BES_STREAM_COMPLETED_WITH_REMOTE_ERROR        BuildProgress_Code = 19
	BuildProgress_BES_UPLOAD_RETRY_LIMIT_EXCEEDED_FAILURE       BuildProgress_Code = 17
)

// Enum value maps for BuildProgress_Code.
var (
	BuildProgress_Code_name = map[int32]string{
		0:  "BUILD_PROGRESS_UNKNOWN",
		3:  "OUTPUT_INITIALIZATION",
		4:  "BES_RUNS_PER_TEST_LIMIT_UNSUPPORTED",
		5:  "BES_LOCAL_WRITE_ERROR",
		6:  "BES_INITIALIZATION_ERROR",
		7:  "BES_UPLOAD_TIMEOUT_ERROR",
		8:  "BES_FILE_WRITE_TIMEOUT",
		9:  "BES_FILE_WRITE_IO_ERROR",
		10: "BES_FILE_WRITE_INTERRUPTED",
		11: "BES_FILE_WRITE_CANCELED",
		12: "BES_FILE_WRITE_UNKNOWN_ERROR",
		13: "BES_UPLOAD_LOCAL_FILE_ERROR",
		14: "BES_STREAM_NOT_RETRYING_FAILURE",
		15: "BES_STREAM_COMPLETED_WITH_UNACK_EVENTS_ERROR",
		16: "BES_STREAM_COMPLETED_WITH_UNSENT_EVENTS_ERROR",
		19: "BES_STREAM_COMPLETED_WITH_REMOTE_ERROR",
		17: "BES_UPLOAD_RETRY_LIMIT_EXCEEDED_FAILURE",
	}
	BuildProgress_Code_value = map[string]int32{
		"BUILD_PROGRESS_UNKNOWN":                        0,
		"OUTPUT_INITIALIZATION":                         3,
		"BES_RUNS_PER_TEST_LIMIT_UNSUPPORTED":           4,
		"BES_LOCAL_WRITE_ERROR":                         5,
		"BES_INITIALIZATION_ERROR":                      6,
		"BES_UPLOAD_TIMEOUT_ERROR":                      7,
		"BES_FILE_WRITE_TIMEOUT":                        8,
		"BES_FILE_WRITE_IO_ERROR":                       9,
		"BES_FILE_WRITE_INTERRUPTED":                    10,
		"BES_FILE_WRITE_CANCELED":                       11,
		"BES_FILE_WRITE_UNKNOWN_ERROR":                  12,
		"BES_UPLOAD_LOCAL_FILE_ERROR":                   13,
		"BES_STREAM_NOT_RETRYING_FAILURE":               14,
		"BES_STREAM_COMPLETED_WITH_UNACK_EVENTS_ERROR":  15,
		"BES_STREAM_COMPLETED_WITH_UNSENT_EVENTS_ERROR": 16,
		"BES_STREAM_COMPLETED_WITH_REMOTE_ERROR":        19,
		"BES_UPLOAD_RETRY_LIMIT_EXCEEDED_FAILURE":       17,
	}
)

func (x BuildProgress_Code) Enum() *BuildProgress_Code {
	p := new(BuildProgress_Code)
	*p = x
	return p
}

func (x BuildProgress_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildProgress_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[3].Descriptor()
}

func (BuildProgress_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[3]
}

func (x BuildProgress_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuildProgress_Code.Descriptor instead.
func (BuildProgress_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{5, 0}
}

type RemoteOptions_Code int32

const (
	RemoteOptions_REMOTE_OPTIONS_UNKNOWN                     RemoteOptions_Code = 0
	RemoteOptions_REMOTE_DEFAULT_EXEC_PROPERTIES_LOGIC_ERROR RemoteOptions_Code = 1
	RemoteOptions_CREDENTIALS_READ_FAILURE                   RemoteOptions_Code = 2
	RemoteOptions_CREDENTIALS_WRITE_FAILURE                  RemoteOptions_Code = 3
	RemoteOptions_DOWNLOADER_WITHOUT_GRPC_CACHE              RemoteOptions_Code = 4
	RemoteOptions_EXECUTION_WITH_INVALID_CACHE               RemoteOptions_Code = 5
)

// Enum value maps for RemoteOptions_Code.
var (
	RemoteOptions_Code_name = map[int32]string{
		0: "REMOTE_OPTIONS_UNKNOWN",
		1: "REMOTE_DEFAULT_EXEC_PROPERTIES_LOGIC_ERROR",
		2: "CREDENTIALS_READ_FAILURE",
		3: "CREDENTIALS_WRITE_FAILURE",
		4: "DOWNLOADER_WITHOUT_GRPC_CACHE",
		5: "EXECUTION_WITH_INVALID_CACHE",
	}
	RemoteOptions_Code_value = map[string]int32{
		"REMOTE_OPTIONS_UNKNOWN":                     0,
		"REMOTE_DEFAULT_EXEC_PROPERTIES_LOGIC_ERROR": 1,
		"CREDENTIALS_READ_FAILURE":                   2,
		"CREDENTIALS_WRITE_FAILURE":                  3,
		"DOWNLOADER_WITHOUT_GRPC_CACHE":              4,
		"EXECUTION_WITH_INVALID_CACHE":               5,
	}
)

func (x RemoteOptions_Code) Enum() *RemoteOptions_Code {
	p := new(RemoteOptions_Code)
	*p = x
	return p
}

func (x RemoteOptions_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoteOptions_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[4].Descriptor()
}

func (RemoteOptions_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[4]
}

func (x RemoteOptions_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoteOptions_Code.Descriptor instead.
func (RemoteOptions_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{6, 0}
}

type ClientEnvironment_Code int32

const (
	ClientEnvironment_CLIENT_ENVIRONMENT_UNKNOWN ClientEnvironment_Code = 0
	ClientEnvironment_CLIENT_CWD_MALFORMED       ClientEnvironment_Code = 1
)

// Enum value maps for ClientEnvironment_Code.
var (
	ClientEnvironment_Code_name = map[int32]string{
		0: "CLIENT_ENVIRONMENT_UNKNOWN",
		1: "CLIENT_CWD_MALFORMED",
	}
	ClientEnvironment_Code_value = map[string]int32{
		"CLIENT_ENVIRONMENT_UNKNOWN": 0,
		"CLIENT_CWD_MALFORMED":       1,
	}
)

func (x ClientEnvironment_Code) Enum() *ClientEnvironment_Code {
	p := new(ClientEnvironment_Code)
	*p = x
	return p
}

func (x ClientEnvironment_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientEnvironment_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[5].Descriptor()
}

func (ClientEnvironment_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[5]
}

func (x ClientEnvironment_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientEnvironment_Code.Descriptor instead.
func (ClientEnvironment_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{7, 0}
}

type Crash_Code int32

const (
	Crash_CRASH_UNKNOWN Crash_Code = 0
	Crash_CRASH_OOM     Crash_Code = 1
)

// Enum value maps for Crash_Code.
var (
	Crash_Code_name = map[int32]string{
		0: "CRASH_UNKNOWN",
		1: "CRASH_OOM",
	}
	Crash_Code_value = map[string]int32{
		"CRASH_UNKNOWN": 0,
		"CRASH_OOM":     1,
	}
)

func (x Crash_Code) Enum() *Crash_Code {
	p := new(Crash_Code)
	*p = x
	return p
}

func (x Crash_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Crash_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[6].Descriptor()
}

func (Crash_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[6]
}

func (x Crash_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Crash_Code.Descriptor instead.
func (Crash_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{8, 0}
}

type SymlinkForest_Code int32

const (
	SymlinkForest_SYMLINK_FOREST_UNKNOWN                SymlinkForest_Code = 0
	SymlinkForest_TOPLEVEL_OUTDIR_PACKAGE_PATH_CONFLICT SymlinkForest_Code = 1
	SymlinkForest_TOPLEVEL_OUTDIR_USED_AS_SOURCE        SymlinkForest_Code = 2
	SymlinkForest_CREATION_FAILED                       SymlinkForest_Code = 3
)

// Enum value maps for SymlinkForest_Code.
var (
	SymlinkForest_Code_name = map[int32]string{
		0: "SYMLINK_FOREST_UNKNOWN",
		1: "TOPLEVEL_OUTDIR_PACKAGE_PATH_CONFLICT",
		2: "TOPLEVEL_OUTDIR_USED_AS_SOURCE",
		3: "CREATION_FAILED",
	}
	SymlinkForest_Code_value = map[string]int32{
		"SYMLINK_FOREST_UNKNOWN":                0,
		"TOPLEVEL_OUTDIR_PACKAGE_PATH_CONFLICT": 1,
		"TOPLEVEL_OUTDIR_USED_AS_SOURCE":        2,
		"CREATION_FAILED":                       3,
	}
)

func (x SymlinkForest_Code) Enum() *SymlinkForest_Code {
	p := new(SymlinkForest_Code)
	*p = x
	return p
}

func (x SymlinkForest_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymlinkForest_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[7].Descriptor()
}

func (SymlinkForest_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[7]
}

func (x SymlinkForest_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymlinkForest_Code.Descriptor instead.
func (SymlinkForest_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{10, 0}
}

type BuildReport_Code int32

const (
	BuildReport_BUILD_REPORT_UNKNOWN                      BuildReport_Code = 0
	BuildReport_BUILD_REPORT_UPLOADER_NEEDS_PACKAGE_PATHS BuildReport_Code = 1
	BuildReport_BUILD_REPORT_WRITE_FAILED                 BuildReport_Code = 2
)

// Enum value maps for BuildReport_Code.
var (
	BuildReport_Code_name = map[int32]string{
		0: "BUILD_REPORT_UNKNOWN",
		1: "BUILD_REPORT_UPLOADER_NEEDS_PACKAGE_PATHS",
		2: "BUILD_REPORT_WRITE_FAILED",
	}
	BuildReport_Code_value = map[string]int32{
		"BUILD_REPORT_UNKNOWN":                      0,
		"BUILD_REPORT_UPLOADER_NEEDS_PACKAGE_PATHS": 1,
		"BUILD_REPORT_WRITE_FAILED":                 2,
	}
)

func (x BuildReport_Code) Enum() *BuildReport_Code {
	p := new(BuildReport_Code)
	*p = x
	return p
}

func (x BuildReport_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildReport_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[8].Descriptor()
}

func (BuildReport_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[8]
}

func (x BuildReport_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuildReport_Code.Descriptor instead.
func (BuildReport_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{11, 0}
}

type PackageOptions_Code int32

const (
	PackageOptions_PACKAGE_OPTIONS_UNKNOWN PackageOptions_Code = 0
	PackageOptions_PACKAGE_PATH_INVALID    PackageOptions_Code = 1
)

// Enum value maps for PackageOptions_Code.
var (
	PackageOptions_Code_name = map[int32]string{
		0: "PACKAGE_OPTIONS_UNKNOWN",
		1: "PACKAGE_PATH_INVALID",
	}
	PackageOptions_Code_value = map[string]int32{
		"PACKAGE_OPTIONS_UNKNOWN": 0,
		"PACKAGE_PATH_INVALID":    1,
	}
)

func (x PackageOptions_Code) Enum() *PackageOptions_Code {
	p := new(PackageOptions_Code)
	*p = x
	return p
}

func (x PackageOptions_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageOptions_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[9].Descriptor()
}

func (PackageOptions_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[9]
}

func (x PackageOptions_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageOptions_Code.Descriptor instead.
func (PackageOptions_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{12, 0}
}

type RemoteExecution_Code int32

const (
	RemoteExecution_REMOTE_EXECUTION_UNKNOWN                               RemoteExecution_Code = 0
	RemoteExecution_CAPABILITIES_QUERY_FAILURE                             RemoteExecution_Code = 1
	RemoteExecution_CREDENTIALS_INIT_FAILURE                               RemoteExecution_Code = 2
	RemoteExecution_CACHE_INIT_FAILURE                                     RemoteExecution_Code = 3
	RemoteExecution_RPC_LOG_FAILURE                                        RemoteExecution_Code = 4
	RemoteExecution_EXEC_CHANNEL_INIT_FAILURE                              RemoteExecution_Code = 5
	RemoteExecution_CACHE_CHANNEL_INIT_FAILURE                             RemoteExecution_Code = 6
	RemoteExecution_DOWNLOADER_CHANNEL_INIT_FAILURE                        RemoteExecution_Code = 7
	RemoteExecution_LOG_DIR_CLEANUP_FAILURE                                RemoteExecution_Code = 8
	RemoteExecution_CLIENT_SERVER_INCOMPATIBLE                             RemoteExecution_Code = 9
	RemoteExecution_DOWNLOADED_INPUTS_DELETION_FAILURE                     RemoteExecution_Code = 10
	RemoteExecution_REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_DOTD  RemoteExecution_Code = 11
	RemoteExecution_REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_JDEPS RemoteExecution_Code = 12
	RemoteExecution_INCOMPLETE_OUTPUT_DOWNLOAD_CLEANUP_FAILURE             RemoteExecution_Code = 13
	RemoteExecution_REMOTE_DEFAULT_PLATFORM_PROPERTIES_PARSE_FAILURE       RemoteExecution_Code = 14
	RemoteExecution_ILLEGAL_OUTPUT                                         RemoteExecution_Code = 15
	RemoteExecution_INVALID_EXEC_AND_PLATFORM_PROPERTIES                   RemoteExecution_Code = 16
)

// Enum value maps for RemoteExecution_Code.
var (
	RemoteExecution_Code_name = map[int32]string{
		0:  "REMOTE_EXECUTION_UNKNOWN",
		1:  "CAPABILITIES_QUERY_FAILURE",
		2:  "CREDENTIALS_INIT_FAILURE",
		3:  "CACHE_INIT_FAILURE",
		4:  "RPC_LOG_FAILURE",
		5:  "EXEC_CHANNEL_INIT_FAILURE",
		6:  "CACHE_CHANNEL_INIT_FAILURE",
		7:  "DOWNLOADER_CHANNEL_INIT_FAILURE",
		8:  "LOG_DIR_CLEANUP_FAILURE",
		9:  "CLIENT_SERVER_INCOMPATIBLE",
		10: "DOWNLOADED_INPUTS_DELETION_FAILURE",
		11: "REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_DOTD",
		12: "REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_JDEPS",
		13: "INCOMPLETE_OUTPUT_DOWNLOAD_CLEANUP_FAILURE",
		14: "REMOTE_DEFAULT_PLATFORM_PROPERTIES_PARSE_FAILURE",
		15: "ILLEGAL_OUTPUT",
		16: "INVALID_EXEC_AND_PLATFORM_PROPERTIES",
	}
	RemoteExecution_Code_value = map[string]int32{
		"REMOTE_EXECUTION_UNKNOWN":                               0,
		"CAPABILITIES_QUERY_FAILURE":                             1,
		"CREDENTIALS_INIT_FAILURE":                               2,
		"CACHE_INIT_FAILURE":                                     3,
		"RPC_LOG_FAILURE":                                        4,
		"EXEC_CHANNEL_INIT_FAILURE":                              5,
		"CACHE_CHANNEL_INIT_FAILURE":                             6,
		"DOWNLOADER_CHANNEL_INIT_FAILURE":                        7,
		"LOG_DIR_CLEANUP_FAILURE":                                8,
		"CLIENT_SERVER_INCOMPATIBLE":                             9,
		"DOWNLOADED_INPUTS_DELETION_FAILURE":                     10,
		"REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_DOTD":  11,
		"REMOTE_DOWNLOAD_OUTPUTS_MINIMAL_WITHOUT_INMEMORY_JDEPS": 12,
		"INCOMPLETE_OUTPUT_DOWNLOAD_CLEANUP_FAILURE":             13,
		"REMOTE_DEFAULT_PLATFORM_PROPERTIES_PARSE_FAILURE":       14,
		"ILLEGAL_OUTPUT":                                         15,
		"INVALID_EXEC_AND_PLATFORM_PROPERTIES":                   16,
	}
)

func (x RemoteExecution_Code) Enum() *RemoteExecution_Code {
	p := new(RemoteExecution_Code)
	*p = x
	return p
}

func (x RemoteExecution_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoteExecution_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[10].Descriptor()
}

func (RemoteExecution_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[10]
}

func (x RemoteExecution_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoteExecution_Code.Descriptor instead.
func (RemoteExecution_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{13, 0}
}

type Execution_Code int32

const (
	Execution_EXECUTION_UNKNOWN                                   Execution_Code = 0
	Execution_EXECUTION_LOG_INITIALIZATION_FAILURE                Execution_Code = 1
	Execution_EXECUTION_LOG_WRITE_FAILURE                         Execution_Code = 2
	Execution_EXECROOT_CREATION_FAILURE                           Execution_Code = 3
	Execution_TEMP_ACTION_OUTPUT_DIRECTORY_DELETION_FAILURE       Execution_Code = 4
	Execution_TEMP_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE       Execution_Code = 5
	Execution_PERSISTENT_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE Execution_Code = 6
	Execution_LOCAL_OUTPUT_DIRECTORY_SYMLINK_FAILURE              Execution_Code = 7
	Execution_LOCAL_TEMPLATE_EXPANSION_FAILURE                    Execution_Code = 9
	Execution_INPUT_DIRECTORY_CHECK_IO_EXCEPTION                  Execution_Code = 10
	Execution_EXTRA_ACTION_OUTPUT_CREATION_FAILURE                Execution_Code = 11
	Execution_TEST_RUNNER_IO_EXCEPTION                            Execution_Code = 12
	Execution_FILE_WRITE_IO_EXCEPTION                             Execution_Code = 13
	Execution_TEST_OUT_ERR_IO_EXCEPTION                           Execution_Code = 14
	Execution_SYMLINK_TREE_MANIFEST_COPY_IO_EXCEPTION             Execution_Code = 15
	Execution_SYMLINK_TREE_MANIFEST_LINK_IO_EXCEPTION             Execution_Code = 16
	Execution_SYMLINK_TREE_CREATION_IO_EXCEPTION                  Execution_Code = 17
	Execution_SYMLINK_TREE_CREATION_COMMAND_EXCEPTION             Execution_Code = 18
	Execution_ACTION_INPUT_READ_IO_EXCEPTION                      Execution_Code = 19
	Execution_ACTION_NOT_UP_TO_DATE                               Execution_Code = 20
	Execution_PSEUDO_ACTION_EXECUTION_PROHIBITED                  Execution_Code = 21
	Execution_DISCOVERED_INPUT_DOES_NOT_EXIST                     Execution_Code = 22
	Execution_ACTION_OUTPUTS_DELETION_FAILURE                     Execution_Code = 23
	Execution_ACTION_OUTPUTS_NOT_CREATED                          Execution_Code = 24
	Execution_ACTION_FINALIZATION_FAILURE                         Execution_Code = 25
	Execution_ACTION_INPUT_LOST                                   Execution_Code = 26
	Execution_FILESYSTEM_CONTEXT_UPDATE_FAILURE                   Execution_Code = 27
	Execution_ACTION_OUTPUT_CLOSE_FAILURE                         Execution_Code = 28
	Execution_INPUT_DISCOVERY_IO_EXCEPTION                        Execution_Code = 29
	Execution_TREE_ARTIFACT_DIRECTORY_CREATION_FAILURE            Execution_Code = 30
	Execution_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE            Execution_Code = 31
	Execution_ACTION_FS_OUTPUT_DIRECTORY_CREATION_FAILURE         Execution_Code = 32
	Execution_ACTION_FS_OUT_ERR_DIRECTORY_CREATION_FAILURE        Execution_Code = 33
	Execution_NON_ACTION_EXECUTION_FAILURE                        Execution_Code = 34
	Execution_CYCLE                                               Execution_Code = 35
	Execution_SOURCE_INPUT_MISSING                                Execution_Code = 36
	Execution_UNEXPECTED_EXCEPTION                                Execution_Code = 37
	Execution_SOURCE_INPUT_IO_EXCEPTION                           Execution_Code = 39
)

// Enum value maps for Execution_Code.
var (
	Execution_Code_name = map[int32]string{
		0:  "EXECUTION_UNKNOWN",
		1:  "EXECUTION_LOG_INITIALIZATION_FAILURE",
		2:  "EXECUTION_LOG_WRITE_FAILURE",
		3:  "EXECROOT_CREATION_FAILURE",
		4:  "TEMP_ACTION_OUTPUT_DIRECTORY_DELETION_FAILURE",
		5:  "TEMP_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE",
		6:  "PERSISTENT_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE",
		7:  "LOCAL_OUTPUT_DIRECTORY_SYMLINK_FAILURE",
		9:  "LOCAL_TEMPLATE_EXPANSION_FAILURE",
		10: "INPUT_DIRECTORY_CHECK_IO_EXCEPTION",
		11: "EXTRA_ACTION_OUTPUT_CREATION_FAILURE",
		12: "TEST_RUNNER_IO_EXCEPTION",
		13: "FILE_WRITE_IO_EXCEPTION",
		14: "TEST_OUT_ERR_IO_EXCEPTION",
		15: "SYMLINK_TREE_MANIFEST_COPY_IO_EXCEPTION",
		16: "SYMLINK_TREE_MANIFEST_LINK_IO_EXCEPTION",
		17: "SYMLINK_TREE_CREATION_IO_EXCEPTION",
		18: "SYMLINK_TREE_CREATION_COMMAND_EXCEPTION",
		19: "ACTION_INPUT_READ_IO_EXCEPTION",
		20: "ACTION_NOT_UP_TO_DATE",
		21: "PSEUDO_ACTION_EXECUTION_PROHIBITED",
		22: "DISCOVERED_INPUT_DOES_NOT_EXIST",
		23: "ACTION_OUTPUTS_DELETION_FAILURE",
		24: "ACTION_OUTPUTS_NOT_CREATED",
		25: "ACTION_FINALIZATION_FAILURE",
		26: "ACTION_INPUT_LOST",
		27: "FILESYSTEM_CONTEXT_UPDATE_FAILURE",
		28: "ACTION_OUTPUT_CLOSE_FAILURE",
		29: "INPUT_DISCOVERY_IO_EXCEPTION",
		30: "TREE_ARTIFACT_DIRECTORY_CREATION_FAILURE",
		31: "ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE",
		32: "ACTION_FS_OUTPUT_DIRECTORY_CREATION_FAILURE",
		33: "ACTION_FS_OUT_ERR_DIRECTORY_CREATION_FAILURE",
		34: "NON_ACTION_EXECUTION_FAILURE",
		35: "CYCLE",
		36: "SOURCE_INPUT_MISSING",
		37: "UNEXPECTED_EXCEPTION",
		39: "SOURCE_INPUT_IO_EXCEPTION",
	}
	Execution_Code_value = map[string]int32{
		"EXECUTION_UNKNOWN":                                   0,
		"EXECUTION_LOG_INITIALIZATION_FAILURE":                1,
		"EXECUTION_LOG_WRITE_FAILURE":                         2,
		"EXECROOT_CREATION_FAILURE":                           3,
		"TEMP_ACTION_OUTPUT_DIRECTORY_DELETION_FAILURE":       4,
		"TEMP_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE":       5,
		"PERSISTENT_ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE": 6,
		"LOCAL_OUTPUT_DIRECTORY_SYMLINK_FAILURE":              7,
		"LOCAL_TEMPLATE_EXPANSION_FAILURE":                    9,
		"INPUT_DIRECTORY_CHECK_IO_EXCEPTION":                  10,
		"EXTRA_ACTION_OUTPUT_CREATION_FAILURE":                11,
		"TEST_RUNNER_IO_EXCEPTION":                            12,
		"FILE_WRITE_IO_EXCEPTION":                             13,
		"TEST_OUT_ERR_IO_EXCEPTION":                           14,
		"SYMLINK_TREE_MANIFEST_COPY_IO_EXCEPTION":             15,
		"SYMLINK_TREE_MANIFEST_LINK_IO_EXCEPTION":             16,
		"SYMLINK_TREE_CREATION_IO_EXCEPTION":                  17,
		"SYMLINK_TREE_CREATION_COMMAND_EXCEPTION":             18,
		"ACTION_INPUT_READ_IO_EXCEPTION":                      19,
		"ACTION_NOT_UP_TO_DATE":                               20,
		"PSEUDO_ACTION_EXECUTION_PROHIBITED":                  21,
		"DISCOVERED_INPUT_DOES_NOT_EXIST":                     22,
		"ACTION_OUTPUTS_DELETION_FAILURE":                     23,
		"ACTION_OUTPUTS_NOT_CREATED":                          24,
		"ACTION_FINALIZATION_FAILURE":                         25,
		"ACTION_INPUT_LOST":                                   26,
		"FILESYSTEM_CONTEXT_UPDATE_FAILURE":                   27,
		"ACTION_OUTPUT_CLOSE_FAILURE":                         28,
		"INPUT_DISCOVERY_IO_EXCEPTION":                        29,
		"TREE_ARTIFACT_DIRECTORY_CREATION_FAILURE":            30,
		"ACTION_OUTPUT_DIRECTORY_CREATION_FAILURE":            31,
		"ACTION_FS_OUTPUT_DIRECTORY_CREATION_FAILURE":         32,
		"ACTION_FS_OUT_ERR_DIRECTORY_CREATION_FAILURE":        33,
		"NON_ACTION_EXECUTION_FAILURE":                        34,
		"CYCLE":                                               35,
		"SOURCE_INPUT_MISSING":                                36,
		"UNEXPECTED_EXCEPTION":                                37,
		"SOURCE_INPUT_IO_EXCEPTION":                           39,
	}
)

func (x Execution_Code) Enum() *Execution_Code {
	p := new(Execution_Code)
	*p = x
	return p
}

func (x Execution_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Execution_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[11].Descriptor()
}

func (Execution_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[11]
}

func (x Execution_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Execution_Code.Descriptor instead.
func (Execution_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{14, 0}
}

type Workspaces_Code int32

const (
	Workspaces_WORKSPACES_UNKNOWN                                      Workspaces_Code = 0
	Workspaces_WORKSPACES_LOG_INITIALIZATION_FAILURE                   Workspaces_Code = 1
	Workspaces_WORKSPACES_LOG_WRITE_FAILURE                            Workspaces_Code = 2
	Workspaces_ILLEGAL_WORKSPACE_FILE_SYMLINK_WITH_MANAGED_DIRECTORIES Workspaces_Code = 3
	Workspaces_WORKSPACE_FILE_READ_FAILURE_WITH_MANAGED_DIRECTORIES    Workspaces_Code = 4
)

// Enum value maps for Workspaces_Code.
var (
	Workspaces_Code_name = map[int32]string{
		0: "WORKSPACES_UNKNOWN",
		1: "WORKSPACES_LOG_INITIALIZATION_FAILURE",
		2: "WORKSPACES_LOG_WRITE_FAILURE",
		3: "ILLEGAL_WORKSPACE_FILE_SYMLINK_WITH_MANAGED_DIRECTORIES",
		4: "WORKSPACE_FILE_READ_FAILURE_WITH_MANAGED_DIRECTORIES",
	}
	Workspaces_Code_value = map[string]int32{
		"WORKSPACES_UNKNOWN":                                      0,
		"WORKSPACES_LOG_INITIALIZATION_FAILURE":                   1,
		"WORKSPACES_LOG_WRITE_FAILURE":                            2,
		"ILLEGAL_WORKSPACE_FILE_SYMLINK_WITH_MANAGED_DIRECTORIES": 3,
		"WORKSPACE_FILE_READ_FAILURE_WITH_MANAGED_DIRECTORIES":    4,
	}
)

func (x Workspaces_Code) Enum() *Workspaces_Code {
	p := new(Workspaces_Code)
	*p = x
	return p
}

func (x Workspaces_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Workspaces_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[12].Descriptor()
}

func (Workspaces_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[12]
}

func (x Workspaces_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Workspaces_Code.Descriptor instead.
func (Workspaces_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{15, 0}
}

type CrashOptions_Code int32

const (
	CrashOptions_CRASH_OPTIONS_UNKNOWN CrashOptions_Code = 0
)

// Enum value maps for CrashOptions_Code.
var (
	CrashOptions_Code_name = map[int32]string{
		0: "CRASH_OPTIONS_UNKNOWN",
	}
	CrashOptions_Code_value = map[string]int32{
		"CRASH_OPTIONS_UNKNOWN": 0,
	}
)

func (x CrashOptions_Code) Enum() *CrashOptions_Code {
	p := new(CrashOptions_Code)
	*p = x
	return p
}

func (x CrashOptions_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrashOptions_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[13].Descriptor()
}

func (CrashOptions_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[13]
}

func (x CrashOptions_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrashOptions_Code.Descriptor instead.
func (CrashOptions_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{16, 0}
}

type Filesystem_Code int32

const (
	Filesystem_FILESYSTEM_UNKNOWN                         Filesystem_Code = 0
	Filesystem_EMBEDDED_BINARIES_ENUMERATION_FAILURE      Filesystem_Code = 3
	Filesystem_SERVER_PID_TXT_FILE_READ_FAILURE           Filesystem_Code = 4
	Filesystem_SERVER_FILE_WRITE_FAILURE                  Filesystem_Code = 5
	Filesystem_DEFAULT_DIGEST_HASH_FUNCTION_INVALID_VALUE Filesystem_Code = 6
)

// Enum value maps for Filesystem_Code.
var (
	Filesystem_Code_name = map[int32]string{
		0: "FILESYSTEM_UNKNOWN",
		3: "EMBEDDED_BINARIES_ENUMERATION_FAILURE",
		4: "SERVER_PID_TXT_FILE_READ_FAILURE",
		5: "SERVER_FILE_WRITE_FAILURE",
		6: "DEFAULT_DIGEST_HASH_FUNCTION_INVALID_VALUE",
	}
	Filesystem_Code_value = map[string]int32{
		"FILESYSTEM_UNKNOWN":                         0,
		"EMBEDDED_BINARIES_ENUMERATION_FAILURE":      3,
		"SERVER_PID_TXT_FILE_READ_FAILURE":           4,
		"SERVER_FILE_WRITE_FAILURE":                  5,
		"DEFAULT_DIGEST_HASH_FUNCTION_INVALID_VALUE": 6,
	}
)

func (x Filesystem_Code) Enum() *Filesystem_Code {
	p := new(Filesystem_Code)
	*p = x
	return p
}

func (x Filesystem_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Filesystem_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[14].Descriptor()
}

func (Filesystem_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[14]
}

func (x Filesystem_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Filesystem_Code.Descriptor instead.
func (Filesystem_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{17, 0}
}

type ExecutionOptions_Code int32

const (
	ExecutionOptions_EXECUTION_OPTIONS_UNKNOWN                       ExecutionOptions_Code = 0
	ExecutionOptions_INVALID_STRATEGY                                ExecutionOptions_Code = 3
	ExecutionOptions_REQUESTED_STRATEGY_INCOMPATIBLE_WITH_SANDBOXING ExecutionOptions_Code = 4
	ExecutionOptions_DEPRECATED_LOCAL_RESOURCES_USED                 ExecutionOptions_Code = 5
	ExecutionOptions_INVALID_CYCLIC_DYNAMIC_STRATEGY                 ExecutionOptions_Code = 6
	ExecutionOptions_RESTRICTION_UNMATCHED_TO_ACTION_CONTEXT         ExecutionOptions_Code = 7
	ExecutionOptions_REMOTE_FALLBACK_STRATEGY_NOT_ABSTRACT_SPAWN     ExecutionOptions_Code = 8
	ExecutionOptions_STRATEGY_NOT_FOUND                              ExecutionOptions_Code = 9
	ExecutionOptions_DYNAMIC_STRATEGY_NOT_SANDBOXED                  ExecutionOptions_Code = 10
)

// Enum value maps for ExecutionOptions_Code.
var (
	ExecutionOptions_Code_name = map[int32]string{
		0:  "EXECUTION_OPTIONS_UNKNOWN",
		3:  "INVALID_STRATEGY",
		4:  "REQUESTED_STRATEGY_INCOMPATIBLE_WITH_SANDBOXING",
		5:  "DEPRECATED_LOCAL_RESOURCES_USED",
		6:  "INVALID_CYCLIC_DYNAMIC_STRATEGY",
		7:  "RESTRICTION_UNMATCHED_TO_ACTION_CONTEXT",
		8:  "REMOTE_FALLBACK_STRATEGY_NOT_ABSTRACT_SPAWN",
		9:  "STRATEGY_NOT_FOUND",
		10: "DYNAMIC_STRATEGY_NOT_SANDBOXED",
	}
	ExecutionOptions_Code_value = map[string]int32{
		"EXECUTION_OPTIONS_UNKNOWN":                       0,
		"INVALID_STRATEGY":                                3,
		"REQUESTED_STRATEGY_INCOMPATIBLE_WITH_SANDBOXING": 4,
		"DEPRECATED_LOCAL_RESOURCES_USED":                 5,
		"INVALID_CYCLIC_DYNAMIC_STRATEGY":                 6,
		"RESTRICTION_UNMATCHED_TO_ACTION_CONTEXT":         7,
		"REMOTE_FALLBACK_STRATEGY_NOT_ABSTRACT_SPAWN":     8,
		"STRATEGY_NOT_FOUND":                              9,
		"DYNAMIC_STRATEGY_NOT_SANDBOXED":                  10,
	}
)

func (x ExecutionOptions_Code) Enum() *ExecutionOptions_Code {
	p := new(ExecutionOptions_Code)
	*p = x
	return p
}

func (x ExecutionOptions_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionOptions_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[15].Descriptor()
}

func (ExecutionOptions_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[15]
}

func (x ExecutionOptions_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionOptions_Code.Descriptor instead.
func (ExecutionOptions_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{18, 0}
}

type Command_Code int32

const (
	Command_COMMAND_FAILURE_UNKNOWN                          Command_Code = 0
	Command_COMMAND_NOT_FOUND                                Command_Code = 1
	Command_ANOTHER_COMMAND_RUNNING                          Command_Code = 2
	Command_PREVIOUSLY_SHUTDOWN                              Command_Code = 3
	Command_STARLARK_CPU_PROFILE_FILE_INITIALIZATION_FAILURE Command_Code = 4
	Command_STARLARK_CPU_PROFILING_INITIALIZATION_FAILURE    Command_Code = 5
	Command_STARLARK_CPU_PROFILE_FILE_WRITE_FAILURE          Command_Code = 6
	Command_INVOCATION_POLICY_PARSE_FAILURE                  Command_Code = 7
	Command_INVOCATION_POLICY_INVALID                        Command_Code = 8
	Command_OPTIONS_PARSE_FAILURE                            Command_Code = 9
	Command_STARLARK_OPTIONS_PARSE_FAILURE                   Command_Code = 10
	Command_ARGUMENTS_NOT_RECOGNIZED                         Command_Code = 11
	Command_NOT_IN_WORKSPACE                                 Command_Code = 12
	Command_SPACES_IN_WORKSPACE_PATH                         Command_Code = 13
	Command_IN_OUTPUT_DIRECTORY                              Command_Code = 14
)

// Enum value maps for Command_Code.
var (
	Command_Code_name = map[int32]string{
		0:  "COMMAND_FAILURE_UNKNOWN",
		1:  "COMMAND_NOT_FOUND",
		2:  "ANOTHER_COMMAND_RUNNING",
		3:  "PREVIOUSLY_SHUTDOWN",
		4:  "STARLARK_CPU_PROFILE_FILE_INITIALIZATION_FAILURE",
		5:  "STARLARK_CPU_PROFILING_INITIALIZATION_FAILURE",
		6:  "STARLARK_CPU_PROFILE_FILE_WRITE_FAILURE",
		7:  "INVOCATION_POLICY_PARSE_FAILURE",
		8:  "INVOCATION_POLICY_INVALID",
		9:  "OPTIONS_PARSE_FAILURE",
		10: "STARLARK_OPTIONS_PARSE_FAILURE",
		11: "ARGUMENTS_NOT_RECOGNIZED",
		12: "NOT_IN_WORKSPACE",
		13: "SPACES_IN_WORKSPACE_PATH",
		14: "IN_OUTPUT_DIRECTORY",
	}
	Command_Code_value = map[string]int32{
		"COMMAND_FAILURE_UNKNOWN":                          0,
		"COMMAND_NOT_FOUND":                                1,
		"ANOTHER_COMMAND_RUNNING":                          2,
		"PREVIOUSLY_SHUTDOWN":                              3,
		"STARLARK_CPU_PROFILE_FILE_INITIALIZATION_FAILURE": 4,
		"STARLARK_CPU_PROFILING_INITIALIZATION_FAILURE":    5,
		"STARLARK_CPU_PROFILE_FILE_WRITE_FAILURE":          6,
		"INVOCATION_POLICY_PARSE_FAILURE":                  7,
		"INVOCATION_POLICY_INVALID":                        8,
		"OPTIONS_PARSE_FAILURE":                            9,
		"STARLARK_OPTIONS_PARSE_FAILURE":                   10,
		"ARGUMENTS_NOT_RECOGNIZED":                         11,
		"NOT_IN_WORKSPACE":                                 12,
		"SPACES_IN_WORKSPACE_PATH":                         13,
		"IN_OUTPUT_DIRECTORY":                              14,
	}
)

func (x Command_Code) Enum() *Command_Code {
	p := new(Command_Code)
	*p = x
	return p
}

func (x Command_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Command_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[16].Descriptor()
}

func (Command_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[16]
}

func (x Command_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Command_Code.Descriptor instead.
func (Command_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{19, 0}
}

type GrpcServer_Code int32

const (
	GrpcServer_GRPC_SERVER_UNKNOWN         GrpcServer_Code = 0
	GrpcServer_GRPC_SERVER_NOT_COMPILED_IN GrpcServer_Code = 1
	GrpcServer_SERVER_BIND_FAILURE         GrpcServer_Code = 2
	GrpcServer_BAD_COOKIE                  GrpcServer_Code = 3
	GrpcServer_NO_CLIENT_DESCRIPTION       GrpcServer_Code = 4
)

// Enum value maps for GrpcServer_Code.
var (
	GrpcServer_Code_name = map[int32]string{
		0: "GRPC_SERVER_UNKNOWN",
		1: "GRPC_SERVER_NOT_COMPILED_IN",
		2: "SERVER_BIND_FAILURE",
		3: "BAD_COOKIE",
		4: "NO_CLIENT_DESCRIPTION",
	}
	GrpcServer_Code_value = map[string]int32{
		"GRPC_SERVER_UNKNOWN":         0,
		"GRPC_SERVER_NOT_COMPILED_IN": 1,
		"SERVER_BIND_FAILURE":         2,
		"BAD_COOKIE":                  3,
		"NO_CLIENT_DESCRIPTION":       4,
	}
)

func (x GrpcServer_Code) Enum() *GrpcServer_Code {
	p := new(GrpcServer_Code)
	*p = x
	return p
}

func (x GrpcServer_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrpcServer_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[17].Descriptor()
}

func (GrpcServer_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[17]
}

func (x GrpcServer_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrpcServer_Code.Descriptor instead.
func (GrpcServer_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{20, 0}
}

type CanonicalizeFlags_Code int32

const (
	CanonicalizeFlags_CANONICALIZE_FLAGS_UNKNOWN CanonicalizeFlags_Code = 0
	CanonicalizeFlags_FOR_COMMAND_INVALID        CanonicalizeFlags_Code = 1
)

// Enum value maps for CanonicalizeFlags_Code.
var (
	CanonicalizeFlags_Code_name = map[int32]string{
		0: "CANONICALIZE_FLAGS_UNKNOWN",
		1: "FOR_COMMAND_INVALID",
	}
	CanonicalizeFlags_Code_value = map[string]int32{
		"CANONICALIZE_FLAGS_UNKNOWN": 0,
		"FOR_COMMAND_INVALID":        1,
	}
)

func (x CanonicalizeFlags_Code) Enum() *CanonicalizeFlags_Code {
	p := new(CanonicalizeFlags_Code)
	*p = x
	return p
}

func (x CanonicalizeFlags_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CanonicalizeFlags_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[18].Descriptor()
}

func (CanonicalizeFlags_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[18]
}

func (x CanonicalizeFlags_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CanonicalizeFlags_Code.Descriptor instead.
func (CanonicalizeFlags_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{21, 0}
}

type BuildConfiguration_Code int32

const (
	BuildConfiguration_BUILD_CONFIGURATION_UNKNOWN              BuildConfiguration_Code = 0
	BuildConfiguration_PLATFORM_MAPPING_EVALUATION_FAILURE      BuildConfiguration_Code = 1
	BuildConfiguration_PLATFORM_MAPPINGS_FILE_IS_DIRECTORY      BuildConfiguration_Code = 2
	BuildConfiguration_PLATFORM_MAPPINGS_FILE_NOT_FOUND         BuildConfiguration_Code = 3
	BuildConfiguration_TOP_LEVEL_CONFIGURATION_CREATION_FAILURE BuildConfiguration_Code = 4
	BuildConfiguration_INVALID_CONFIGURATION                    BuildConfiguration_Code = 5
	BuildConfiguration_INVALID_BUILD_OPTIONS                    BuildConfiguration_Code = 6
	BuildConfiguration_MULTI_CPU_PREREQ_UNMET                   BuildConfiguration_Code = 7
	BuildConfiguration_HEURISTIC_INSTRUMENTATION_FILTER_INVALID BuildConfiguration_Code = 8
	BuildConfiguration_CYCLE                                    BuildConfiguration_Code = 9
	BuildConfiguration_CONFLICTING_CONFIGURATIONS               BuildConfiguration_Code = 10
	BuildConfiguration_INVALID_OUTPUT_DIRECTORY_MNEMONIC        BuildConfiguration_Code = 11
)

// Enum value maps for BuildConfiguration_Code.
var (
	BuildConfiguration_Code_name = map[int32]string{
		0:  "BUILD_CONFIGURATION_UNKNOWN",
		1:  "PLATFORM_MAPPING_EVALUATION_FAILURE",
		2:  "PLATFORM_MAPPINGS_FILE_IS_DIRECTORY",
		3:  "PLATFORM_MAPPINGS_FILE_NOT_FOUND",
		4:  "TOP_LEVEL_CONFIGURATION_CREATION_FAILURE",
		5:  "INVALID_CONFIGURATION",
		6:  "INVALID_BUILD_OPTIONS",
		7:  "MULTI_CPU_PREREQ_UNMET",
		8:  "HEURISTIC_INSTRUMENTATION_FILTER_INVALID",
		9:  "CYCLE",
		10: "CONFLICTING_CONFIGURATIONS",
		11: "INVALID_OUTPUT_DIRECTORY_MNEMONIC",
	}
	BuildConfiguration_Code_value = map[string]int32{
		"BUILD_CONFIGURATION_UNKNOWN":              0,
		"PLATFORM_MAPPING_EVALUATION_FAILURE":      1,
		"PLATFORM_MAPPINGS_FILE_IS_DIRECTORY":      2,
		"PLATFORM_MAPPINGS_FILE_NOT_FOUND":         3,
		"TOP_LEVEL_CONFIGURATION_CREATION_FAILURE": 4,
		"INVALID_CONFIGURATION":                    5,
		"INVALID_BUILD_OPTIONS":                    6,
		"MULTI_CPU_PREREQ_UNMET":                   7,
		"HEURISTIC_INSTRUMENTATION_FILTER_INVALID": 8,
		"CYCLE":                             9,
		"CONFLICTING_CONFIGURATIONS":        10,
		"INVALID_OUTPUT_DIRECTORY_MNEMONIC": 11,
	}
)

func (x BuildConfiguration_Code) Enum() *BuildConfiguration_Code {
	p := new(BuildConfiguration_Code)
	*p = x
	return p
}

func (x BuildConfiguration_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildConfiguration_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[19].Descriptor()
}

func (BuildConfiguration_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[19]
}

func (x BuildConfiguration_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuildConfiguration_Code.Descriptor instead.
func (BuildConfiguration_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{22, 0}
}

type InfoCommand_Code int32

const (
	InfoCommand_INFO_COMMAND_UNKNOWN     InfoCommand_Code = 0
	InfoCommand_TOO_MANY_KEYS            InfoCommand_Code = 1
	InfoCommand_KEY_NOT_RECOGNIZED       InfoCommand_Code = 2
	InfoCommand_INFO_BLOCK_WRITE_FAILURE InfoCommand_Code = 3
	InfoCommand_ALL_INFO_WRITE_FAILURE   InfoCommand_Code = 4
)

// Enum value maps for InfoCommand_Code.
var (
	InfoCommand_Code_name = map[int32]string{
		0: "INFO_COMMAND_UNKNOWN",
		1: "TOO_MANY_KEYS",
		2: "KEY_NOT_RECOGNIZED",
		3: "INFO_BLOCK_WRITE_FAILURE",
		4: "ALL_INFO_WRITE_FAILURE",
	}
	InfoCommand_Code_value = map[string]int32{
		"INFO_COMMAND_UNKNOWN":     0,
		"TOO_MANY_KEYS":            1,
		"KEY_NOT_RECOGNIZED":       2,
		"INFO_BLOCK_WRITE_FAILURE": 3,
		"ALL_INFO_WRITE_FAILURE":   4,
	}
)

func (x InfoCommand_Code) Enum() *InfoCommand_Code {
	p := new(InfoCommand_Code)
	*p = x
	return p
}

func (x InfoCommand_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InfoCommand_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[20].Descriptor()
}

func (InfoCommand_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[20]
}

func (x InfoCommand_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InfoCommand_Code.Descriptor instead.
func (InfoCommand_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{23, 0}
}

type MemoryOptions_Code int32

const (
	MemoryOptions_MEMORY_OPTIONS_UNKNOWN                                    MemoryOptions_Code = 0
	MemoryOptions_EXPERIMENTAL_OOM_MORE_EAGERLY_THRESHOLD_INVALID_VALUE     MemoryOptions_Code = 1
	MemoryOptions_EXPERIMENTAL_OOM_MORE_EAGERLY_NO_TENURED_COLLECTORS_FOUND MemoryOptions_Code = 2
)

// Enum value maps for MemoryOptions_Code.
var (
	MemoryOptions_Code_name = map[int32]string{
		0: "MEMORY_OPTIONS_UNKNOWN",
		1: "EXPERIMENTAL_OOM_MORE_EAGERLY_THRESHOLD_INVALID_VALUE",
		2: "EXPERIMENTAL_OOM_MORE_EAGERLY_NO_TENURED_COLLECTORS_FOUND",
	}
	MemoryOptions_Code_value = map[string]int32{
		"MEMORY_OPTIONS_UNKNOWN":                                    0,
		"EXPERIMENTAL_OOM_MORE_EAGERLY_THRESHOLD_INVALID_VALUE":     1,
		"EXPERIMENTAL_OOM_MORE_EAGERLY_NO_TENURED_COLLECTORS_FOUND": 2,
	}
)

func (x MemoryOptions_Code) Enum() *MemoryOptions_Code {
	p := new(MemoryOptions_Code)
	*p = x
	return p
}

func (x MemoryOptions_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemoryOptions_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[21].Descriptor()
}

func (MemoryOptions_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[21]
}

func (x MemoryOptions_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemoryOptions_Code.Descriptor instead.
func (MemoryOptions_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{24, 0}
}

type Query_Code int32

const (
	Query_QUERY_UNKNOWN                                             Query_Code = 0
	Query_QUERY_FILE_WITH_COMMAND_LINE_EXPRESSION                   Query_Code = 1
	Query_QUERY_FILE_READ_FAILURE                                   Query_Code = 2
	Query_COMMAND_LINE_EXPRESSION_MISSING                           Query_Code = 3
	Query_OUTPUT_FORMAT_INVALID                                     Query_Code = 4
	Query_GRAPHLESS_PREREQ_UNMET                                    Query_Code = 5
	Query_QUERY_OUTPUT_WRITE_FAILURE                                Query_Code = 6
	Query_QUERY_STDOUT_FLUSH_FAILURE                                Query_Code = 13
	Query_ANALYSIS_QUERY_PREREQ_UNMET                               Query_Code = 14
	Query_QUERY_RESULTS_FLUSH_FAILURE                               Query_Code = 15
	Query_DEPRECATED_UNCLOSED_QUOTATION_EXPRESSION_ERROR            Query_Code = 16
	Query_VARIABLE_NAME_INVALID                                     Query_Code = 17
	Query_VARIABLE_UNDEFINED                                        Query_Code = 18
	Query_BUILDFILES_AND_LOADFILES_CANNOT_USE_OUTPUT_LOCATION_ERROR Query_Code = 19
	Query_BUILD_FILE_ERROR                                          Query_Code = 20
	Query_CYCLE                                                     Query_Code = 21
	Query_UNIQUE_SKYKEY_THRESHOLD_EXCEEDED                          Query_Code = 22
	Query_TARGET_NOT_IN_UNIVERSE_SCOPE                              Query_Code = 23
	Query_INVALID_FULL_UNIVERSE_EXPRESSION                          Query_Code = 24
	Query_UNIVERSE_SCOPE_LIMIT_EXCEEDED                             Query_Code = 25
	Query_INVALIDATION_LIMIT_EXCEEDED                               Query_Code = 26
	Query_OUTPUT_FORMAT_PREREQ_UNMET                                Query_Code = 27
	Query_ARGUMENTS_MISSING                                         Query_Code = 28
	Query_RBUILDFILES_FUNCTION_REQUIRES_SKYQUERY                    Query_Code = 29
	Query_FULL_TARGETS_NOT_SUPPORTED                                Query_Code = 30
	Query_DEPRECATED_UNEXPECTED_TOKEN_ERROR                         Query_Code = 31
	Query_DEPRECATED_INTEGER_LITERAL_MISSING                        Query_Code = 32
	Query_DEPRECATED_INVALID_STARTING_CHARACTER_ERROR               Query_Code = 33
	Query_DEPRECATED_PREMATURE_END_OF_INPUT_ERROR                   Query_Code = 34
	Query_SYNTAX_ERROR                                              Query_Code = 35
	Query_OUTPUT_FORMATTER_IO_EXCEPTION                             Query_Code = 36
	Query_SKYQUERY_TRANSITIVE_TARGET_ERROR                          Query_Code = 37
	Query_SKYQUERY_TARGET_EXCEPTION                                 Query_Code = 38
	Query_INVALID_LABEL_IN_TEST_SUITE                               Query_Code = 39
	Query_ILLEGAL_FLAG_COMBINATION                                  Query_Code = 40
	Query_NON_DETAILED_ERROR                                        Query_Code = 41
)

// Enum value maps for Query_Code.
var (
	Query_Code_name = map[int32]string{
		0:  "QUERY_UNKNOWN",
		1:  "QUERY_FILE_WITH_COMMAND_LINE_EXPRESSION",
		2:  "QUERY_FILE_READ_FAILURE",
		3:  "COMMAND_LINE_EXPRESSION_MISSING",
		4:  "OUTPUT_FORMAT_INVALID",
		5:  "GRAPHLESS_PREREQ_UNMET",
		6:  "QUERY_OUTPUT_WRITE_FAILURE",
		13: "QUERY_STDOUT_FLUSH_FAILURE",
		14: "ANALYSIS_QUERY_PREREQ_UNMET",
		15: "QUERY_RESULTS_FLUSH_FAILURE",
		16: "DEPRECATED_UNCLOSED_QUOTATION_EXPRESSION_ERROR",
		17: "VARIABLE_NAME_INVALID",
		18: "VARIABLE_UNDEFINED",
		19: "BUILDFILES_AND_LOADFILES_CANNOT_USE_OUTPUT_LOCATION_ERROR",
		20: "BUILD_FILE_ERROR",
		21: "CYCLE",
		22: "UNIQUE_SKYKEY_THRESHOLD_EXCEEDED",
		23: "TARGET_NOT_IN_UNIVERSE_SCOPE",
		24: "INVALID_FULL_UNIVERSE_EXPRESSION",
		25: "UNIVERSE_SCOPE_LIMIT_EXCEEDED",
		26: "INVALIDATION_LIMIT_EXCEEDED",
		27: "OUTPUT_FORMAT_PREREQ_UNMET",
		28: "ARGUMENTS_MISSING",
		29: "RBUILDFILES_FUNCTION_REQUIRES_SKYQUERY",
		30: "FULL_TARGETS_NOT_SUPPORTED",
		31: "DEPRECATED_UNEXPECTED_TOKEN_ERROR",
		32: "DEPRECATED_INTEGER_LITERAL_MISSING",
		33: "DEPRECATED_INVALID_STARTING_CHARACTER_ERROR",
		34: "DEPRECATED_PREMATURE_END_OF_INPUT_ERROR",
		35: "SYNTAX_ERROR",
		36: "OUTPUT_FORMATTER_IO_EXCEPTION",
		37: "SKYQUERY_TRANSITIVE_TARGET_ERROR",
		38: "SKYQUERY_TARGET_EXCEPTION",
		39: "INVALID_LABEL_IN_TEST_SUITE",
		40: "ILLEGAL_FLAG_COMBINATION",
		41: "NON_DETAILED_ERROR",
	}
	Query_Code_value = map[string]int32{
		"QUERY_UNKNOWN": 0,
		"QUERY_FILE_WITH_COMMAND_LINE_EXPRESSION":                   1,
		"QUERY_FILE_READ_FAILURE":                                   2,
		"COMMAND_LINE_EXPRESSION_MISSING":                           3,
		"OUTPUT_FORMAT_INVALID":                                     4,
		"GRAPHLESS_PREREQ_UNMET":                                    5,
		"QUERY_OUTPUT_WRITE_FAILURE":                                6,
		"QUERY_STDOUT_FLUSH_FAILURE":                                13,
		"ANALYSIS_QUERY_PREREQ_UNMET":                               14,
		"QUERY_RESULTS_FLUSH_FAILURE":                               15,
		"DEPRECATED_UNCLOSED_QUOTATION_EXPRESSION_ERROR":            16,
		"VARIABLE_NAME_INVALID":                                     17,
		"VARIABLE_UNDEFINED":                                        18,
		"BUILDFILES_AND_LOADFILES_CANNOT_USE_OUTPUT_LOCATION_ERROR": 19,
		"BUILD_FILE_ERROR":                                          20,
		"CYCLE":                                                     21,
		"UNIQUE_SKYKEY_THRESHOLD_EXCEEDED":                          22,
		"TARGET_NOT_IN_UNIVERSE_SCOPE":                              23,
		"INVALID_FULL_UNIVERSE_EXPRESSION":                          24,
		"UNIVERSE_SCOPE_LIMIT_EXCEEDED":                             25,
		"INVALIDATION_LIMIT_EXCEEDED":                               26,
		"OUTPUT_FORMAT_PREREQ_UNMET":                                27,
		"ARGUMENTS_MISSING":                                         28,
		"RBUILDFILES_FUNCTION_REQUIRES_SKYQUERY":                    29,
		"FULL_TARGETS_NOT_SUPPORTED":                                30,
		"DEPRECATED_UNEXPECTED_TOKEN_ERROR":                         31,
		"DEPRECATED_INTEGER_LITERAL_MISSING":                        32,
		"DEPRECATED_INVALID_STARTING_CHARACTER_ERROR":               33,
		"DEPRECATED_PREMATURE_END_OF_INPUT_ERROR":                   34,
		"SYNTAX_ERROR":                                              35,
		"OUTPUT_FORMATTER_IO_EXCEPTION":                             36,
		"SKYQUERY_TRANSITIVE_TARGET_ERROR":                          37,
		"SKYQUERY_TARGET_EXCEPTION":                                 38,
		"INVALID_LABEL_IN_TEST_SUITE":                               39,
		"ILLEGAL_FLAG_COMBINATION":                                  40,
		"NON_DETAILED_ERROR":                                        41,
	}
)

func (x Query_Code) Enum() *Query_Code {
	p := new(Query_Code)
	*p = x
	return p
}

func (x Query_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[22].Descriptor()
}

func (Query_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[22]
}

func (x Query_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_Code.Descriptor instead.
func (Query_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{25, 0}
}

type LocalExecution_Code int32

const (
	LocalExecution_LOCAL_EXECUTION_UNKNOWN      LocalExecution_Code = 0
	LocalExecution_LOCKFREE_OUTPUT_PREREQ_UNMET LocalExecution_Code = 1
)

// Enum value maps for LocalExecution_Code.
var (
	LocalExecution_Code_name = map[int32]string{
		0: "LOCAL_EXECUTION_UNKNOWN",
		1: "LOCKFREE_OUTPUT_PREREQ_UNMET",
	}
	LocalExecution_Code_value = map[string]int32{
		"LOCAL_EXECUTION_UNKNOWN":      0,
		"LOCKFREE_OUTPUT_PREREQ_UNMET": 1,
	}
)

func (x LocalExecution_Code) Enum() *LocalExecution_Code {
	p := new(LocalExecution_Code)
	*p = x
	return p
}

func (x LocalExecution_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocalExecution_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[23].Descriptor()
}

func (LocalExecution_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[23]
}

func (x LocalExecution_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocalExecution_Code.Descriptor instead.
func (LocalExecution_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{26, 0}
}

type ActionCache_Code int32

const (
	ActionCache_ACTION_CACHE_UNKNOWN   ActionCache_Code = 0
	ActionCache_INITIALIZATION_FAILURE ActionCache_Code = 1
)

// Enum value maps for ActionCache_Code.
var (
	ActionCache_Code_name = map[int32]string{
		0: "ACTION_CACHE_UNKNOWN",
		1: "INITIALIZATION_FAILURE",
	}
	ActionCache_Code_value = map[string]int32{
		"ACTION_CACHE_UNKNOWN":   0,
		"INITIALIZATION_FAILURE": 1,
	}
)

func (x ActionCache_Code) Enum() *ActionCache_Code {
	p := new(ActionCache_Code)
	*p = x
	return p
}

func (x ActionCache_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionCache_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[24].Descriptor()
}

func (ActionCache_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[24]
}

func (x ActionCache_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionCache_Code.Descriptor instead.
func (ActionCache_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{27, 0}
}

type FetchCommand_Code int32

const (
	FetchCommand_FETCH_COMMAND_UNKNOWN  FetchCommand_Code = 0
	FetchCommand_EXPRESSION_MISSING     FetchCommand_Code = 1
	FetchCommand_OPTIONS_INVALID        FetchCommand_Code = 2
	FetchCommand_QUERY_PARSE_ERROR      FetchCommand_Code = 3
	FetchCommand_QUERY_EVALUATION_ERROR FetchCommand_Code = 4
)

// Enum value maps for FetchCommand_Code.
var (
	FetchCommand_Code_name = map[int32]string{
		0: "FETCH_COMMAND_UNKNOWN",
		1: "EXPRESSION_MISSING",
		2: "OPTIONS_INVALID",
		3: "QUERY_PARSE_ERROR",
		4: "QUERY_EVALUATION_ERROR",
	}
	FetchCommand_Code_value = map[string]int32{
		"FETCH_COMMAND_UNKNOWN":  0,
		"EXPRESSION_MISSING":     1,
		"OPTIONS_INVALID":        2,
		"QUERY_PARSE_ERROR":      3,
		"QUERY_EVALUATION_ERROR": 4,
	}
)

func (x FetchCommand_Code) Enum() *FetchCommand_Code {
	p := new(FetchCommand_Code)
	*p = x
	return p
}

func (x FetchCommand_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FetchCommand_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[25].Descriptor()
}

func (FetchCommand_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[25]
}

func (x FetchCommand_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FetchCommand_Code.Descriptor instead.
func (FetchCommand_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{28, 0}
}

type SyncCommand_Code int32

const (
	SyncCommand_SYNC_COMMAND_UNKNOWN       SyncCommand_Code = 0
	SyncCommand_PACKAGE_LOOKUP_ERROR       SyncCommand_Code = 1
	SyncCommand_WORKSPACE_EVALUATION_ERROR SyncCommand_Code = 2
	SyncCommand_REPOSITORY_FETCH_ERRORS    SyncCommand_Code = 3
	SyncCommand_REPOSITORY_NAME_INVALID    SyncCommand_Code = 4
)

// Enum value maps for SyncCommand_Code.
var (
	SyncCommand_Code_name = map[int32]string{
		0: "SYNC_COMMAND_UNKNOWN",
		1: "PACKAGE_LOOKUP_ERROR",
		2: "WORKSPACE_EVALUATION_ERROR",
		3: "REPOSITORY_FETCH_ERRORS",
		4: "REPOSITORY_NAME_INVALID",
	}
	SyncCommand_Code_value = map[string]int32{
		"SYNC_COMMAND_UNKNOWN":       0,
		"PACKAGE_LOOKUP_ERROR":       1,
		"WORKSPACE_EVALUATION_ERROR": 2,
		"REPOSITORY_FETCH_ERRORS":    3,
		"REPOSITORY_NAME_INVALID":    4,
	}
)

func (x SyncCommand_Code) Enum() *SyncCommand_Code {
	p := new(SyncCommand_Code)
	*p = x
	return p
}

func (x SyncCommand_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncCommand_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[26].Descriptor()
}

func (SyncCommand_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[26]
}

func (x SyncCommand_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncCommand_Code.Descriptor instead.
func (SyncCommand_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{29, 0}
}

type Sandbox_Code int32

const (
	Sandbox_SANDBOX_FAILURE_UNKNOWN           Sandbox_Code = 0
	Sandbox_INITIALIZATION_FAILURE            Sandbox_Code = 1
	Sandbox_EXECUTION_IO_EXCEPTION            Sandbox_Code = 2
	Sandbox_DOCKER_COMMAND_FAILURE            Sandbox_Code = 3
	Sandbox_NO_DOCKER_IMAGE                   Sandbox_Code = 4
	Sandbox_DOCKER_IMAGE_PREPARATION_FAILURE  Sandbox_Code = 5
	Sandbox_BIND_MOUNT_ANALYSIS_FAILURE       Sandbox_Code = 6
	Sandbox_MOUNT_SOURCE_DOES_NOT_EXIST       Sandbox_Code = 7
	Sandbox_MOUNT_SOURCE_TARGET_TYPE_MISMATCH Sandbox_Code = 8
	Sandbox_MOUNT_TARGET_DOES_NOT_EXIST       Sandbox_Code = 9
	Sandbox_SUBPROCESS_START_FAILED           Sandbox_Code = 10
	Sandbox_FORBIDDEN_INPUT                   Sandbox_Code = 11
)

// Enum value maps for Sandbox_Code.
var (
	Sandbox_Code_name = map[int32]string{
		0:  "SANDBOX_FAILURE_UNKNOWN",
		1:  "INITIALIZATION_FAILURE",
		2:  "EXECUTION_IO_EXCEPTION",
		3:  "DOCKER_COMMAND_FAILURE",
		4:  "NO_DOCKER_IMAGE",
		5:  "DOCKER_IMAGE_PREPARATION_FAILURE",
		6:  "BIND_MOUNT_ANALYSIS_FAILURE",
		7:  "MOUNT_SOURCE_DOES_NOT_EXIST",
		8:  "MOUNT_SOURCE_TARGET_TYPE_MISMATCH",
		9:  "MOUNT_TARGET_DOES_NOT_EXIST",
		10: "SUBPROCESS_START_FAILED",
		11: "FORBIDDEN_INPUT",
	}
	Sandbox_Code_value = map[string]int32{
		"SANDBOX_FAILURE_UNKNOWN":           0,
		"INITIALIZATION_FAILURE":            1,
		"EXECUTION_IO_EXCEPTION":            2,
		"DOCKER_COMMAND_FAILURE":            3,
		"NO_DOCKER_IMAGE":                   4,
		"DOCKER_IMAGE_PREPARATION_FAILURE":  5,
		"BIND_MOUNT_ANALYSIS_FAILURE":       6,
		"MOUNT_SOURCE_DOES_NOT_EXIST":       7,
		"MOUNT_SOURCE_TARGET_TYPE_MISMATCH": 8,
		"MOUNT_TARGET_DOES_NOT_EXIST":       9,
		"SUBPROCESS_START_FAILED":           10,
		"FORBIDDEN_INPUT":                   11,
	}
)

func (x Sandbox_Code) Enum() *Sandbox_Code {
	p := new(Sandbox_Code)
	*p = x
	return p
}

func (x Sandbox_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sandbox_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[27].Descriptor()
}

func (Sandbox_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[27]
}

func (x Sandbox_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sandbox_Code.Descriptor instead.
func (Sandbox_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{30, 0}
}

type IncludeScanning_Code int32

const (
	IncludeScanning_INCLUDE_SCANNING_UNKNOWN              IncludeScanning_Code = 0
	IncludeScanning_INITIALIZE_INCLUDE_HINTS_ERROR        IncludeScanning_Code = 1
	IncludeScanning_SCANNING_IO_EXCEPTION                 IncludeScanning_Code = 2
	IncludeScanning_INCLUDE_HINTS_FILE_NOT_IN_PACKAGE     IncludeScanning_Code = 3
	IncludeScanning_INCLUDE_HINTS_READ_FAILURE            IncludeScanning_Code = 4
	IncludeScanning_ILLEGAL_ABSOLUTE_PATH                 IncludeScanning_Code = 5
	IncludeScanning_PACKAGE_LOAD_FAILURE                  IncludeScanning_Code = 6
	IncludeScanning_USER_PACKAGE_LOAD_FAILURE             IncludeScanning_Code = 7
	IncludeScanning_SYSTEM_PACKAGE_LOAD_FAILURE           IncludeScanning_Code = 8
	IncludeScanning_UNDIFFERENTIATED_PACKAGE_LOAD_FAILURE IncludeScanning_Code = 9
)

// Enum value maps for IncludeScanning_Code.
var (
	IncludeScanning_Code_name = map[int32]string{
		0: "INCLUDE_SCANNING_UNKNOWN",
		1: "INITIALIZE_INCLUDE_HINTS_ERROR",
		2: "SCANNING_IO_EXCEPTION",
		3: "INCLUDE_HINTS_FILE_NOT_IN_PACKAGE",
		4: "INCLUDE_HINTS_READ_FAILURE",
		5: "ILLEGAL_ABSOLUTE_PATH",
		6: "PACKAGE_LOAD_FAILURE",
		7: "USER_PACKAGE_LOAD_FAILURE",
		8: "SYSTEM_PACKAGE_LOAD_FAILURE",
		9: "UNDIFFERENTIATED_PACKAGE_LOAD_FAILURE",
	}
	IncludeScanning_Code_value = map[string]int32{
		"INCLUDE_SCANNING_UNKNOWN":              0,
		"INITIALIZE_INCLUDE_HINTS_ERROR":        1,
		"SCANNING_IO_EXCEPTION":                 2,
		"INCLUDE_HINTS_FILE_NOT_IN_PACKAGE":     3,
		"INCLUDE_HINTS_READ_FAILURE":            4,
		"ILLEGAL_ABSOLUTE_PATH":                 5,
		"PACKAGE_LOAD_FAILURE":                  6,
		"USER_PACKAGE_LOAD_FAILURE":             7,
		"SYSTEM_PACKAGE_LOAD_FAILURE":           8,
		"UNDIFFERENTIATED_PACKAGE_LOAD_FAILURE": 9,
	}
)

func (x IncludeScanning_Code) Enum() *IncludeScanning_Code {
	p := new(IncludeScanning_Code)
	*p = x
	return p
}

func (x IncludeScanning_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IncludeScanning_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[28].Descriptor()
}

func (IncludeScanning_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[28]
}

func (x IncludeScanning_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IncludeScanning_Code.Descriptor instead.
func (IncludeScanning_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{31, 0}
}

type TestCommand_Code int32

const (
	TestCommand_TEST_COMMAND_UNKNOWN TestCommand_Code = 0
	TestCommand_NO_TEST_TARGETS      TestCommand_Code = 1
	TestCommand_TEST_WITH_NOANALYZE  TestCommand_Code = 2
	TestCommand_TESTS_FAILED         TestCommand_Code = 3
)

// Enum value maps for TestCommand_Code.
var (
	TestCommand_Code_name = map[int32]string{
		0: "TEST_COMMAND_UNKNOWN",
		1: "NO_TEST_TARGETS",
		2: "TEST_WITH_NOANALYZE",
		3: "TESTS_FAILED",
	}
	TestCommand_Code_value = map[string]int32{
		"TEST_COMMAND_UNKNOWN": 0,
		"NO_TEST_TARGETS":      1,
		"TEST_WITH_NOANALYZE":  2,
		"TESTS_FAILED":         3,
	}
)

func (x TestCommand_Code) Enum() *TestCommand_Code {
	p := new(TestCommand_Code)
	*p = x
	return p
}

func (x TestCommand_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestCommand_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[29].Descriptor()
}

func (TestCommand_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[29]
}

func (x TestCommand_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestCommand_Code.Descriptor instead.
func (TestCommand_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{32, 0}
}

type ActionQuery_Code int32

const (
	ActionQuery_ACTION_QUERY_UNKNOWN                                ActionQuery_Code = 0
	ActionQuery_COMMAND_LINE_EXPANSION_FAILURE                      ActionQuery_Code = 1
	ActionQuery_OUTPUT_FAILURE                                      ActionQuery_Code = 2
	ActionQuery_COMMAND_LINE_EXPRESSION_MISSING                     ActionQuery_Code = 3
	ActionQuery_EXPRESSION_PARSE_FAILURE                            ActionQuery_Code = 4
	ActionQuery_SKYFRAME_STATE_WITH_COMMAND_LINE_EXPRESSION         ActionQuery_Code = 5
	ActionQuery_INVALID_AQUERY_EXPRESSION                           ActionQuery_Code = 6
	ActionQuery_SKYFRAME_STATE_PREREQ_UNMET                         ActionQuery_Code = 7
	ActionQuery_AQUERY_OUTPUT_TOO_BIG                               ActionQuery_Code = 8
	ActionQuery_ILLEGAL_PATTERN_SYNTAX                              ActionQuery_Code = 9
	ActionQuery_INCORRECT_ARGUMENTS                                 ActionQuery_Code = 10
	ActionQuery_TOP_LEVEL_TARGETS_WITH_SKYFRAME_STATE_NOT_SUPPORTED ActionQuery_Code = 11
	ActionQuery_SKYFRAME_STATE_AFTER_EXECUTION                      ActionQuery_Code = 12
	ActionQuery_LABELS_FUNCTION_NOT_SUPPORTED                       ActionQuery_Code = 13
	ActionQuery_TEMPLATE_EXPANSION_FAILURE                          ActionQuery_Code = 14
)

// Enum value maps for ActionQuery_Code.
var (
	ActionQuery_Code_name = map[int32]string{
		0:  "ACTION_QUERY_UNKNOWN",
		1:  "COMMAND_LINE_EXPANSION_FAILURE",
		2:  "OUTPUT_FAILURE",
		3:  "COMMAND_LINE_EXPRESSION_MISSING",
		4:  "EXPRESSION_PARSE_FAILURE",
		5:  "SKYFRAME_STATE_WITH_COMMAND_LINE_EXPRESSION",
		6:  "INVALID_AQUERY_EXPRESSION",
		7:  "SKYFRAME_STATE_PREREQ_UNMET",
		8:  "AQUERY_OUTPUT_TOO_BIG",
		9:  "ILLEGAL_PATTERN_SYNTAX",
		10: "INCORRECT_ARGUMENTS",
		11: "TOP_LEVEL_TARGETS_WITH_SKYFRAME_STATE_NOT_SUPPORTED",
		12: "SKYFRAME_STATE_AFTER_EXECUTION",
		13: "LABELS_FUNCTION_NOT_SUPPORTED",
		14: "TEMPLATE_EXPANSION_FAILURE",
	}
	ActionQuery_Code_value = map[string]int32{
		"ACTION_QUERY_UNKNOWN":                                0,
		"COMMAND_LINE_EXPANSION_FAILURE":                      1,
		"OUTPUT_FAILURE":                                      2,
		"COMMAND_LINE_EXPRESSION_MISSING":                     3,
		"EXPRESSION_PARSE_FAILURE":                            4,
		"SKYFRAME_STATE_WITH_COMMAND_LINE_EXPRESSION":         5,
		"INVALID_AQUERY_EXPRESSION":                           6,
		"SKYFRAME_STATE_PREREQ_UNMET":                         7,
		"AQUERY_OUTPUT_TOO_BIG":                               8,
		"ILLEGAL_PATTERN_SYNTAX":                              9,
		"INCORRECT_ARGUMENTS":                                 10,
		"TOP_LEVEL_TARGETS_WITH_SKYFRAME_STATE_NOT_SUPPORTED": 11,
		"SKYFRAME_STATE_AFTER_EXECUTION":                      12,
		"LABELS_FUNCTION_NOT_SUPPORTED":                       13,
		"TEMPLATE_EXPANSION_FAILURE":                          14,
	}
)

func (x ActionQuery_Code) Enum() *ActionQuery_Code {
	p := new(ActionQuery_Code)
	*p = x
	return p
}

func (x ActionQuery_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionQuery_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[30].Descriptor()
}

func (ActionQuery_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[30]
}

func (x ActionQuery_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionQuery_Code.Descriptor instead.
func (ActionQuery_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{33, 0}
}

type TargetPatterns_Code int32

const (
	TargetPatterns_TARGET_PATTERNS_UNKNOWN                       TargetPatterns_Code = 0
	TargetPatterns_TARGET_PATTERN_FILE_WITH_COMMAND_LINE_PATTERN TargetPatterns_Code = 1
	TargetPatterns_TARGET_PATTERN_FILE_READ_FAILURE              TargetPatterns_Code = 2
	TargetPatterns_TARGET_PATTERN_PARSE_FAILURE                  TargetPatterns_Code = 3
	TargetPatterns_PACKAGE_NOT_FOUND                             TargetPatterns_Code = 4
	TargetPatterns_TARGET_FORMAT_INVALID                         TargetPatterns_Code = 5
	TargetPatterns_ABSOLUTE_TARGET_PATTERN_INVALID               TargetPatterns_Code = 6
	TargetPatterns_CANNOT_DETERMINE_TARGET_FROM_FILENAME         TargetPatterns_Code = 7
	TargetPatterns_LABEL_SYNTAX_ERROR                            TargetPatterns_Code = 8
	TargetPatterns_TARGET_CANNOT_BE_EMPTY_STRING                 TargetPatterns_Code = 9
	TargetPatterns_PACKAGE_PART_CANNOT_END_IN_SLASH              TargetPatterns_Code = 10
	TargetPatterns_CYCLE                                         TargetPatterns_Code = 11
	TargetPatterns_CANNOT_PRELOAD_TARGET                         TargetPatterns_Code = 12
	TargetPatterns_TARGETS_MISSING                               TargetPatterns_Code = 13
	TargetPatterns_RECURSIVE_TARGET_PATTERNS_NOT_ALLOWED         TargetPatterns_Code = 14
	TargetPatterns_UP_LEVEL_REFERENCES_NOT_ALLOWED               TargetPatterns_Code = 15
	TargetPatterns_NEGATIVE_TARGET_PATTERN_NOT_ALLOWED           TargetPatterns_Code = 16
	TargetPatterns_TARGET_MUST_BE_A_FILE                         TargetPatterns_Code = 17
	TargetPatterns_DEPENDENCY_NOT_FOUND                          TargetPatterns_Code = 18
	TargetPatterns_PACKAGE_NAME_INVALID                          TargetPatterns_Code = 19
)

// Enum value maps for TargetPatterns_Code.
var (
	TargetPatterns_Code_name = map[int32]string{
		0:  "TARGET_PATTERNS_UNKNOWN",
		1:  "TARGET_PATTERN_FILE_WITH_COMMAND_LINE_PATTERN",
		2:  "TARGET_PATTERN_FILE_READ_FAILURE",
		3:  "TARGET_PATTERN_PARSE_FAILURE",
		4:  "PACKAGE_NOT_FOUND",
		5:  "TARGET_FORMAT_INVALID",
		6:  "ABSOLUTE_TARGET_PATTERN_INVALID",
		7:  "CANNOT_DETERMINE_TARGET_FROM_FILENAME",
		8:  "LABEL_SYNTAX_ERROR",
		9:  "TARGET_CANNOT_BE_EMPTY_STRING",
		10: "PACKAGE_PART_CANNOT_END_IN_SLASH",
		11: "CYCLE",
		12: "CANNOT_PRELOAD_TARGET",
		13: "TARGETS_MISSING",
		14: "RECURSIVE_TARGET_PATTERNS_NOT_ALLOWED",
		15: "UP_LEVEL_REFERENCES_NOT_ALLOWED",
		16: "NEGATIVE_TARGET_PATTERN_NOT_ALLOWED",
		17: "TARGET_MUST_BE_A_FILE",
		18: "DEPENDENCY_NOT_FOUND",
		19: "PACKAGE_NAME_INVALID",
	}
	TargetPatterns_Code_value = map[string]int32{
		"TARGET_PATTERNS_UNKNOWN":                       0,
		"TARGET_PATTERN_FILE_WITH_COMMAND_LINE_PATTERN": 1,
		"TARGET_PATTERN_FILE_READ_FAILURE":              2,
		"TARGET_PATTERN_PARSE_FAILURE":                  3,
		"PACKAGE_NOT_FOUND":                             4,
		"TARGET_FORMAT_INVALID":                         5,
		"ABSOLUTE_TARGET_PATTERN_INVALID":               6,
		"CANNOT_DETERMINE_TARGET_FROM_FILENAME":         7,
		"LABEL_SYNTAX_ERROR":                            8,
		"TARGET_CANNOT_BE_EMPTY_STRING":                 9,
		"PACKAGE_PART_CANNOT_END_IN_SLASH":              10,
		"CYCLE":                                         11,
		"CANNOT_PRELOAD_TARGET":                         12,
		"TARGETS_MISSING":                               13,
		"RECURSIVE_TARGET_PATTERNS_NOT_ALLOWED":         14,
		"UP_LEVEL_REFERENCES_NOT_ALLOWED":               15,
		"NEGATIVE_TARGET_PATTERN_NOT_ALLOWED":           16,
		"TARGET_MUST_BE_A_FILE":                         17,
		"DEPENDENCY_NOT_FOUND":                          18,
		"PACKAGE_NAME_INVALID":                          19,
	}
)

func (x TargetPatterns_Code) Enum() *TargetPatterns_Code {
	p := new(TargetPatterns_Code)
	*p = x
	return p
}

func (x TargetPatterns_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetPatterns_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[31].Descriptor()
}

func (TargetPatterns_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[31]
}

func (x TargetPatterns_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetPatterns_Code.Descriptor instead.
func (TargetPatterns_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{34, 0}
}

type CleanCommand_Code int32

const (
	CleanCommand_CLEAN_COMMAND_UNKNOWN            CleanCommand_Code = 0
	CleanCommand_OUTPUT_SERVICE_CLEAN_FAILURE     CleanCommand_Code = 1
	CleanCommand_ACTION_CACHE_CLEAN_FAILURE       CleanCommand_Code = 2
	CleanCommand_OUT_ERR_CLOSE_FAILURE            CleanCommand_Code = 3
	CleanCommand_OUTPUT_BASE_DELETE_FAILURE       CleanCommand_Code = 4
	CleanCommand_OUTPUT_BASE_TEMP_MOVE_FAILURE    CleanCommand_Code = 5
	CleanCommand_ASYNC_OUTPUT_BASE_DELETE_FAILURE CleanCommand_Code = 6
	CleanCommand_EXECROOT_DELETE_FAILURE          CleanCommand_Code = 7
	CleanCommand_EXECROOT_TEMP_MOVE_FAILURE       CleanCommand_Code = 8
	CleanCommand_ASYNC_EXECROOT_DELETE_FAILURE    CleanCommand_Code = 9
	CleanCommand_ARGUMENTS_NOT_RECOGNIZED         CleanCommand_Code = 10
)

// Enum value maps for CleanCommand_Code.
var (
	CleanCommand_Code_name = map[int32]string{
		0:  "CLEAN_COMMAND_UNKNOWN",
		1:  "OUTPUT_SERVICE_CLEAN_FAILURE",
		2:  "ACTION_CACHE_CLEAN_FAILURE",
		3:  "OUT_ERR_CLOSE_FAILURE",
		4:  "OUTPUT_BASE_DELETE_FAILURE",
		5:  "OUTPUT_BASE_TEMP_MOVE_FAILURE",
		6:  "ASYNC_OUTPUT_BASE_DELETE_FAILURE",
		7:  "EXECROOT_DELETE_FAILURE",
		8:  "EXECROOT_TEMP_MOVE_FAILURE",
		9:  "ASYNC_EXECROOT_DELETE_FAILURE",
		10: "ARGUMENTS_NOT_RECOGNIZED",
	}
	CleanCommand_Code_value = map[string]int32{
		"CLEAN_COMMAND_UNKNOWN":            0,
		"OUTPUT_SERVICE_CLEAN_FAILURE":     1,
		"ACTION_CACHE_CLEAN_FAILURE":       2,
		"OUT_ERR_CLOSE_FAILURE":            3,
		"OUTPUT_BASE_DELETE_FAILURE":       4,
		"OUTPUT_BASE_TEMP_MOVE_FAILURE":    5,
		"ASYNC_OUTPUT_BASE_DELETE_FAILURE": 6,
		"EXECROOT_DELETE_FAILURE":          7,
		"EXECROOT_TEMP_MOVE_FAILURE":       8,
		"ASYNC_EXECROOT_DELETE_FAILURE":    9,
		"ARGUMENTS_NOT_RECOGNIZED":         10,
	}
)

func (x CleanCommand_Code) Enum() *CleanCommand_Code {
	p := new(CleanCommand_Code)
	*p = x
	return p
}

func (x CleanCommand_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CleanCommand_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[32].Descriptor()
}

func (CleanCommand_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[32]
}

func (x CleanCommand_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CleanCommand_Code.Descriptor instead.
func (CleanCommand_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{35, 0}
}

type ConfigCommand_Code int32

const (
	ConfigCommand_CONFIG_COMMAND_UNKNOWN  ConfigCommand_Code = 0
	ConfigCommand_TOO_MANY_CONFIG_IDS     ConfigCommand_Code = 1
	ConfigCommand_CONFIGURATION_NOT_FOUND ConfigCommand_Code = 2
)

// Enum value maps for ConfigCommand_Code.
var (
	ConfigCommand_Code_name = map[int32]string{
		0: "CONFIG_COMMAND_UNKNOWN",
		1: "TOO_MANY_CONFIG_IDS",
		2: "CONFIGURATION_NOT_FOUND",
	}
	ConfigCommand_Code_value = map[string]int32{
		"CONFIG_COMMAND_UNKNOWN":  0,
		"TOO_MANY_CONFIG_IDS":     1,
		"CONFIGURATION_NOT_FOUND": 2,
	}
)

func (x ConfigCommand_Code) Enum() *ConfigCommand_Code {
	p := new(ConfigCommand_Code)
	*p = x
	return p
}

func (x ConfigCommand_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigCommand_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[33].Descriptor()
}

func (ConfigCommand_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[33]
}

func (x ConfigCommand_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigCommand_Code.Descriptor instead.
func (ConfigCommand_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{36, 0}
}

type ConfigurableQuery_Code int32

const (
	ConfigurableQuery_CONFIGURABLE_QUERY_UNKNOWN        ConfigurableQuery_Code = 0
	ConfigurableQuery_COMMAND_LINE_EXPRESSION_MISSING   ConfigurableQuery_Code = 1
	ConfigurableQuery_EXPRESSION_PARSE_FAILURE          ConfigurableQuery_Code = 2
	ConfigurableQuery_FILTERS_NOT_SUPPORTED             ConfigurableQuery_Code = 3
	ConfigurableQuery_BUILDFILES_FUNCTION_NOT_SUPPORTED ConfigurableQuery_Code = 4
	ConfigurableQuery_SIBLINGS_FUNCTION_NOT_SUPPORTED   ConfigurableQuery_Code = 5
	ConfigurableQuery_VISIBLE_FUNCTION_NOT_SUPPORTED    ConfigurableQuery_Code = 6
	ConfigurableQuery_ATTRIBUTE_MISSING                 ConfigurableQuery_Code = 7
	ConfigurableQuery_INCORRECT_CONFIG_ARGUMENT_ERROR   ConfigurableQuery_Code = 8
	ConfigurableQuery_TARGET_MISSING                    ConfigurableQuery_Code = 9
	ConfigurableQuery_STARLARK_SYNTAX_ERROR             ConfigurableQuery_Code = 10
	ConfigurableQuery_STARLARK_EVAL_ERROR               ConfigurableQuery_Code = 11
	ConfigurableQuery_FORMAT_FUNCTION_ERROR             ConfigurableQuery_Code = 12
)

// Enum value maps for ConfigurableQuery_Code.
var (
	ConfigurableQuery_Code_name = map[int32]string{
		0:  "CONFIGURABLE_QUERY_UNKNOWN",
		1:  "COMMAND_LINE_EXPRESSION_MISSING",
		2:  "EXPRESSION_PARSE_FAILURE",
		3:  "FILTERS_NOT_SUPPORTED",
		4:  "BUILDFILES_FUNCTION_NOT_SUPPORTED",
		5:  "SIBLINGS_FUNCTION_NOT_SUPPORTED",
		6:  "VISIBLE_FUNCTION_NOT_SUPPORTED",
		7:  "ATTRIBUTE_MISSING",
		8:  "INCORRECT_CONFIG_ARGUMENT_ERROR",
		9:  "TARGET_MISSING",
		10: "STARLARK_SYNTAX_ERROR",
		11: "STARLARK_EVAL_ERROR",
		12: "FORMAT_FUNCTION_ERROR",
	}
	ConfigurableQuery_Code_value = map[string]int32{
		"CONFIGURABLE_QUERY_UNKNOWN":        0,
		"COMMAND_LINE_EXPRESSION_MISSING":   1,
		"EXPRESSION_PARSE_FAILURE":          2,
		"FILTERS_NOT_SUPPORTED":             3,
		"BUILDFILES_FUNCTION_NOT_SUPPORTED": 4,
		"SIBLINGS_FUNCTION_NOT_SUPPORTED":   5,
		"VISIBLE_FUNCTION_NOT_SUPPORTED":    6,
		"ATTRIBUTE_MISSING":                 7,
		"INCORRECT_CONFIG_ARGUMENT_ERROR":   8,
		"TARGET_MISSING":                    9,
		"STARLARK_SYNTAX_ERROR":             10,
		"STARLARK_EVAL_ERROR":               11,
		"FORMAT_FUNCTION_ERROR":             12,
	}
)

func (x ConfigurableQuery_Code) Enum() *ConfigurableQuery_Code {
	p := new(ConfigurableQuery_Code)
	*p = x
	return p
}

func (x ConfigurableQuery_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurableQuery_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[34].Descriptor()
}

func (ConfigurableQuery_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[34]
}

func (x ConfigurableQuery_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurableQuery_Code.Descriptor instead.
func (ConfigurableQuery_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{37, 0}
}

type DumpCommand_Code int32

const (
	DumpCommand_DUMP_COMMAND_UNKNOWN           DumpCommand_Code = 0
	DumpCommand_NO_OUTPUT_SPECIFIED            DumpCommand_Code = 1
	DumpCommand_ACTION_CACHE_DUMP_FAILED       DumpCommand_Code = 2
	DumpCommand_COMMAND_LINE_EXPANSION_FAILURE DumpCommand_Code = 3
	DumpCommand_ACTION_GRAPH_DUMP_FAILED       DumpCommand_Code = 4
	DumpCommand_STARLARK_HEAP_DUMP_FAILED      DumpCommand_Code = 5
)

// Enum value maps for DumpCommand_Code.
var (
	DumpCommand_Code_name = map[int32]string{
		0: "DUMP_COMMAND_UNKNOWN",
		1: "NO_OUTPUT_SPECIFIED",
		2: "ACTION_CACHE_DUMP_FAILED",
		3: "COMMAND_LINE_EXPANSION_FAILURE",
		4: "ACTION_GRAPH_DUMP_FAILED",
		5: "STARLARK_HEAP_DUMP_FAILED",
	}
	DumpCommand_Code_value = map[string]int32{
		"DUMP_COMMAND_UNKNOWN":           0,
		"NO_OUTPUT_SPECIFIED":            1,
		"ACTION_CACHE_DUMP_FAILED":       2,
		"COMMAND_LINE_EXPANSION_FAILURE": 3,
		"ACTION_GRAPH_DUMP_FAILED":       4,
		"STARLARK_HEAP_DUMP_FAILED":      5,
	}
)

func (x DumpCommand_Code) Enum() *DumpCommand_Code {
	p := new(DumpCommand_Code)
	*p = x
	return p
}

func (x DumpCommand_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DumpCommand_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[35].Descriptor()
}

func (DumpCommand_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[35]
}

func (x DumpCommand_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DumpCommand_Code.Descriptor instead.
func (DumpCommand_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{38, 0}
}

type HelpCommand_Code int32

const (
	HelpCommand_HELP_COMMAND_UNKNOWN HelpCommand_Code = 0
	HelpCommand_MISSING_ARGUMENT     HelpCommand_Code = 1
	HelpCommand_COMMAND_NOT_FOUND    HelpCommand_Code = 2
)

// Enum value maps for HelpCommand_Code.
var (
	HelpCommand_Code_name = map[int32]string{
		0: "HELP_COMMAND_UNKNOWN",
		1: "MISSING_ARGUMENT",
		2: "COMMAND_NOT_FOUND",
	}
	HelpCommand_Code_value = map[string]int32{
		"HELP_COMMAND_UNKNOWN": 0,
		"MISSING_ARGUMENT":     1,
		"COMMAND_NOT_FOUND":    2,
	}
)

func (x HelpCommand_Code) Enum() *HelpCommand_Code {
	p := new(HelpCommand_Code)
	*p = x
	return p
}

func (x HelpCommand_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HelpCommand_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[36].Descriptor()
}

func (HelpCommand_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[36]
}

func (x HelpCommand_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HelpCommand_Code.Descriptor instead.
func (HelpCommand_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{39, 0}
}

type MobileInstall_Code int32

const (
	MobileInstall_MOBILE_INSTALL_UNKNOWN     MobileInstall_Code = 0
	MobileInstall_CLASSIC_UNSUPPORTED        MobileInstall_Code = 1
	MobileInstall_NO_TARGET_SPECIFIED        MobileInstall_Code = 2
	MobileInstall_MULTIPLE_TARGETS_SPECIFIED MobileInstall_Code = 3
	MobileInstall_TARGET_TYPE_INVALID        MobileInstall_Code = 4
	MobileInstall_NON_ZERO_EXIT              MobileInstall_Code = 5
	MobileInstall_ERROR_RUNNING_PROGRAM      MobileInstall_Code = 6
)

// Enum value maps for MobileInstall_Code.
var (
	MobileInstall_Code_name = map[int32]string{
		0: "MOBILE_INSTALL_UNKNOWN",
		1: "CLASSIC_UNSUPPORTED",
		2: "NO_TARGET_SPECIFIED",
		3: "MULTIPLE_TARGETS_SPECIFIED",
		4: "TARGET_TYPE_INVALID",
		5: "NON_ZERO_EXIT",
		6: "ERROR_RUNNING_PROGRAM",
	}
	MobileInstall_Code_value = map[string]int32{
		"MOBILE_INSTALL_UNKNOWN":     0,
		"CLASSIC_UNSUPPORTED":        1,
		"NO_TARGET_SPECIFIED":        2,
		"MULTIPLE_TARGETS_SPECIFIED": 3,
		"TARGET_TYPE_INVALID":        4,
		"NON_ZERO_EXIT":              5,
		"ERROR_RUNNING_PROGRAM":      6,
	}
)

func (x MobileInstall_Code) Enum() *MobileInstall_Code {
	p := new(MobileInstall_Code)
	*p = x
	return p
}

func (x MobileInstall_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MobileInstall_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[37].Descriptor()
}

func (MobileInstall_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[37]
}

func (x MobileInstall_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MobileInstall_Code.Descriptor instead.
func (MobileInstall_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{40, 0}
}

type ProfileCommand_Code int32

const (
	ProfileCommand_PROFILE_COMMAND_UNKNOWN       ProfileCommand_Code = 0
	ProfileCommand_OLD_BINARY_FORMAT_UNSUPPORTED ProfileCommand_Code = 1
	ProfileCommand_FILE_READ_FAILURE             ProfileCommand_Code = 2
)

// Enum value maps for ProfileCommand_Code.
var (
	ProfileCommand_Code_name = map[int32]string{
		0: "PROFILE_COMMAND_UNKNOWN",
		1: "OLD_BINARY_FORMAT_UNSUPPORTED",
		2: "FILE_READ_FAILURE",
	}
	ProfileCommand_Code_value = map[string]int32{
		"PROFILE_COMMAND_UNKNOWN":       0,
		"OLD_BINARY_FORMAT_UNSUPPORTED": 1,
		"FILE_READ_FAILURE":             2,
	}
)

func (x ProfileCommand_Code) Enum() *ProfileCommand_Code {
	p := new(ProfileCommand_Code)
	*p = x
	return p
}

func (x ProfileCommand_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileCommand_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[38].Descriptor()
}

func (ProfileCommand_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[38]
}

func (x ProfileCommand_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileCommand_Code.Descriptor instead.
func (ProfileCommand_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{41, 0}
}

type RunCommand_Code int32

const (
	RunCommand_RUN_COMMAND_UNKNOWN                     RunCommand_Code = 0
	RunCommand_NO_TARGET_SPECIFIED                     RunCommand_Code = 1
	RunCommand_TOO_MANY_TARGETS_SPECIFIED              RunCommand_Code = 2
	RunCommand_TARGET_NOT_EXECUTABLE                   RunCommand_Code = 3
	RunCommand_TARGET_BUILT_BUT_PATH_NOT_EXECUTABLE    RunCommand_Code = 4
	RunCommand_TARGET_BUILT_BUT_PATH_VALIDATION_FAILED RunCommand_Code = 5
	RunCommand_RUN_UNDER_TARGET_NOT_BUILT              RunCommand_Code = 6
	RunCommand_RUN_PREREQ_UNMET                        RunCommand_Code = 7
	RunCommand_TOO_MANY_TEST_SHARDS_OR_RUNS            RunCommand_Code = 8
	RunCommand_TEST_ENVIRONMENT_SETUP_FAILURE          RunCommand_Code = 9
	RunCommand_COMMAND_LINE_EXPANSION_FAILURE          RunCommand_Code = 10
	RunCommand_NO_SHELL_SPECIFIED                      RunCommand_Code = 11
	RunCommand_SCRIPT_WRITE_FAILURE                    RunCommand_Code = 12
	RunCommand_RUNFILES_DIRECTORIES_CREATION_FAILURE   RunCommand_Code = 13
	RunCommand_RUNFILES_SYMLINKS_CREATION_FAILURE      RunCommand_Code = 14
	RunCommand_TEST_ENVIRONMENT_SETUP_INTERRUPTED      RunCommand_Code = 15
)

// Enum value maps for RunCommand_Code.
var (
	RunCommand_Code_name = map[int32]string{
		0:  "RUN_COMMAND_UNKNOWN",
		1:  "NO_TARGET_SPECIFIED",
		2:  "TOO_MANY_TARGETS_SPECIFIED",
		3:  "TARGET_NOT_EXECUTABLE",
		4:  "TARGET_BUILT_BUT_PATH_NOT_EXECUTABLE",
		5:  "TARGET_BUILT_BUT_PATH_VALIDATION_FAILED",
		6:  "RUN_UNDER_TARGET_NOT_BUILT",
		7:  "RUN_PREREQ_UNMET",
		8:  "TOO_MANY_TEST_SHARDS_OR_RUNS",
		9:  "TEST_ENVIRONMENT_SETUP_FAILURE",
		10: "COMMAND_LINE_EXPANSION_FAILURE",
		11: "NO_SHELL_SPECIFIED",
		12: "SCRIPT_WRITE_FAILURE",
		13: "RUNFILES_DIRECTORIES_CREATION_FAILURE",
		14: "RUNFILES_SYMLINKS_CREATION_FAILURE",
		15: "TEST_ENVIRONMENT_SETUP_INTERRUPTED",
	}
	RunCommand_Code_value = map[string]int32{
		"RUN_COMMAND_UNKNOWN":                     0,
		"NO_TARGET_SPECIFIED":                     1,
		"TOO_MANY_TARGETS_SPECIFIED":              2,
		"TARGET_NOT_EXECUTABLE":                   3,
		"TARGET_BUILT_BUT_PATH_NOT_EXECUTABLE":    4,
		"TARGET_BUILT_BUT_PATH_VALIDATION_FAILED": 5,
		"RUN_UNDER_TARGET_NOT_BUILT":              6,
		"RUN_PREREQ_UNMET":                        7,
		"TOO_MANY_TEST_SHARDS_OR_RUNS":            8,
		"TEST_ENVIRONMENT_SETUP_FAILURE":          9,
		"COMMAND_LINE_EXPANSION_FAILURE":          10,
		"NO_SHELL_SPECIFIED":                      11,
		"SCRIPT_WRITE_FAILURE":                    12,
		"RUNFILES_DIRECTORIES_CREATION_FAILURE":   13,
		"RUNFILES_SYMLINKS_CREATION_FAILURE":      14,
		"TEST_ENVIRONMENT_SETUP_INTERRUPTED":      15,
	}
)

func (x RunCommand_Code) Enum() *RunCommand_Code {
	p := new(RunCommand_Code)
	*p = x
	return p
}

func (x RunCommand_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunCommand_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[39].Descriptor()
}

func (RunCommand_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[39]
}

func (x RunCommand_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunCommand_Code.Descriptor instead.
func (RunCommand_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{42, 0}
}

type VersionCommand_Code int32

const (
	VersionCommand_VERSION_COMMAND_UNKNOWN VersionCommand_Code = 0
	VersionCommand_NOT_AVAILABLE           VersionCommand_Code = 1
)

// Enum value maps for VersionCommand_Code.
var (
	VersionCommand_Code_name = map[int32]string{
		0: "VERSION_COMMAND_UNKNOWN",
		1: "NOT_AVAILABLE",
	}
	VersionCommand_Code_value = map[string]int32{
		"VERSION_COMMAND_UNKNOWN": 0,
		"NOT_AVAILABLE":           1,
	}
)

func (x VersionCommand_Code) Enum() *VersionCommand_Code {
	p := new(VersionCommand_Code)
	*p = x
	return p
}

func (x VersionCommand_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VersionCommand_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[40].Descriptor()
}

func (VersionCommand_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[40]
}

func (x VersionCommand_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersionCommand_Code.Descriptor instead.
func (VersionCommand_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{43, 0}
}

type PrintActionCommand_Code int32

const (
	PrintActionCommand_PRINT_ACTION_COMMAND_UNKNOWN   PrintActionCommand_Code = 0
	PrintActionCommand_TARGET_NOT_FOUND               PrintActionCommand_Code = 1
	PrintActionCommand_COMMAND_LINE_EXPANSION_FAILURE PrintActionCommand_Code = 2
	PrintActionCommand_TARGET_KIND_UNSUPPORTED        PrintActionCommand_Code = 3
	PrintActionCommand_ACTIONS_NOT_FOUND              PrintActionCommand_Code = 4
)

// Enum value maps for PrintActionCommand_Code.
var (
	PrintActionCommand_Code_name = map[int32]string{
		0: "PRINT_ACTION_COMMAND_UNKNOWN",
		1: "TARGET_NOT_FOUND",
		2: "COMMAND_LINE_EXPANSION_FAILURE",
		3: "TARGET_KIND_UNSUPPORTED",
		4: "ACTIONS_NOT_FOUND",
	}
	PrintActionCommand_Code_value = map[string]int32{
		"PRINT_ACTION_COMMAND_UNKNOWN":   0,
		"TARGET_NOT_FOUND":               1,
		"COMMAND_LINE_EXPANSION_FAILURE": 2,
		"TARGET_KIND_UNSUPPORTED":        3,
		"ACTIONS_NOT_FOUND":              4,
	}
)

func (x PrintActionCommand_Code) Enum() *PrintActionCommand_Code {
	p := new(PrintActionCommand_Code)
	*p = x
	return p
}

func (x PrintActionCommand_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrintActionCommand_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[41].Descriptor()
}

func (PrintActionCommand_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[41]
}

func (x PrintActionCommand_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrintActionCommand_Code.Descriptor instead.
func (PrintActionCommand_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{44, 0}
}

type WorkspaceStatus_Code int32

const (
	WorkspaceStatus_WORKSPACE_STATUS_UNKNOWN    WorkspaceStatus_Code = 0
	WorkspaceStatus_NON_ZERO_EXIT               WorkspaceStatus_Code = 1
	WorkspaceStatus_ABNORMAL_TERMINATION        WorkspaceStatus_Code = 2
	WorkspaceStatus_EXEC_FAILED                 WorkspaceStatus_Code = 3
	WorkspaceStatus_PARSE_FAILURE               WorkspaceStatus_Code = 4
	WorkspaceStatus_VALIDATION_FAILURE          WorkspaceStatus_Code = 5
	WorkspaceStatus_CONTENT_UPDATE_IO_EXCEPTION WorkspaceStatus_Code = 6
	WorkspaceStatus_STDERR_IO_EXCEPTION         WorkspaceStatus_Code = 7
)

// Enum value maps for WorkspaceStatus_Code.
var (
	WorkspaceStatus_Code_name = map[int32]string{
		0: "WORKSPACE_STATUS_UNKNOWN",
		1: "NON_ZERO_EXIT",
		2: "ABNORMAL_TERMINATION",
		3: "EXEC_FAILED",
		4: "PARSE_FAILURE",
		5: "VALIDATION_FAILURE",
		6: "CONTENT_UPDATE_IO_EXCEPTION",
		7: "STDERR_IO_EXCEPTION",
	}
	WorkspaceStatus_Code_value = map[string]int32{
		"WORKSPACE_STATUS_UNKNOWN":    0,
		"NON_ZERO_EXIT":               1,
		"ABNORMAL_TERMINATION":        2,
		"EXEC_FAILED":                 3,
		"PARSE_FAILURE":               4,
		"VALIDATION_FAILURE":          5,
		"CONTENT_UPDATE_IO_EXCEPTION": 6,
		"STDERR_IO_EXCEPTION":         7,
	}
)

func (x WorkspaceStatus_Code) Enum() *WorkspaceStatus_Code {
	p := new(WorkspaceStatus_Code)
	*p = x
	return p
}

func (x WorkspaceStatus_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkspaceStatus_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[42].Descriptor()
}

func (WorkspaceStatus_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[42]
}

func (x WorkspaceStatus_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkspaceStatus_Code.Descriptor instead.
func (WorkspaceStatus_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{45, 0}
}

type JavaCompile_Code int32

const (
	JavaCompile_JAVA_COMPILE_UNKNOWN                       JavaCompile_Code = 0
	JavaCompile_REDUCED_CLASSPATH_FAILURE                  JavaCompile_Code = 1
	JavaCompile_COMMAND_LINE_EXPANSION_FAILURE             JavaCompile_Code = 2
	JavaCompile_JDEPS_READ_IO_EXCEPTION                    JavaCompile_Code = 3
	JavaCompile_REDUCED_CLASSPATH_FALLBACK_CLEANUP_FAILURE JavaCompile_Code = 4
)

// Enum value maps for JavaCompile_Code.
var (
	JavaCompile_Code_name = map[int32]string{
		0: "JAVA_COMPILE_UNKNOWN",
		1: "REDUCED_CLASSPATH_FAILURE",
		2: "COMMAND_LINE_EXPANSION_FAILURE",
		3: "JDEPS_READ_IO_EXCEPTION",
		4: "REDUCED_CLASSPATH_FALLBACK_CLEANUP_FAILURE",
	}
	JavaCompile_Code_value = map[string]int32{
		"JAVA_COMPILE_UNKNOWN":                       0,
		"REDUCED_CLASSPATH_FAILURE":                  1,
		"COMMAND_LINE_EXPANSION_FAILURE":             2,
		"JDEPS_READ_IO_EXCEPTION":                    3,
		"REDUCED_CLASSPATH_FALLBACK_CLEANUP_FAILURE": 4,
	}
)

func (x JavaCompile_Code) Enum() *JavaCompile_Code {
	p := new(JavaCompile_Code)
	*p = x
	return p
}

func (x JavaCompile_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JavaCompile_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[43].Descriptor()
}

func (JavaCompile_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[43]
}

func (x JavaCompile_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JavaCompile_Code.Descriptor instead.
func (JavaCompile_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{46, 0}
}

type ActionRewinding_Code int32

const (
	ActionRewinding_ACTION_REWINDING_UNKNOWN  ActionRewinding_Code = 0
	ActionRewinding_LOST_INPUT_TOO_MANY_TIMES ActionRewinding_Code = 1
	ActionRewinding_LOST_INPUT_IS_SOURCE      ActionRewinding_Code = 2
)

// Enum value maps for ActionRewinding_Code.
var (
	ActionRewinding_Code_name = map[int32]string{
		0: "ACTION_REWINDING_UNKNOWN",
		1: "LOST_INPUT_TOO_MANY_TIMES",
		2: "LOST_INPUT_IS_SOURCE",
	}
	ActionRewinding_Code_value = map[string]int32{
		"ACTION_REWINDING_UNKNOWN":  0,
		"LOST_INPUT_TOO_MANY_TIMES": 1,
		"LOST_INPUT_IS_SOURCE":      2,
	}
)

func (x ActionRewinding_Code) Enum() *ActionRewinding_Code {
	p := new(ActionRewinding_Code)
	*p = x
	return p
}

func (x ActionRewinding_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionRewinding_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[44].Descriptor()
}

func (ActionRewinding_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[44]
}

func (x ActionRewinding_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionRewinding_Code.Descriptor instead.
func (ActionRewinding_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{47, 0}
}

type CppCompile_Code int32

const (
	CppCompile_CPP_COMPILE_UNKNOWN             CppCompile_Code = 0
	CppCompile_FIND_USED_HEADERS_IO_EXCEPTION  CppCompile_Code = 1
	CppCompile_COPY_OUT_ERR_FAILURE            CppCompile_Code = 2
	CppCompile_D_FILE_READ_FAILURE             CppCompile_Code = 3
	CppCompile_COMMAND_GENERATION_FAILURE      CppCompile_Code = 4
	CppCompile_MODULE_EXPANSION_TIMEOUT        CppCompile_Code = 5
	CppCompile_INCLUDE_PATH_OUTSIDE_EXEC_ROOT  CppCompile_Code = 6
	CppCompile_FAKE_COMMAND_GENERATION_FAILURE CppCompile_Code = 7
	CppCompile_UNDECLARED_INCLUSIONS           CppCompile_Code = 8
	CppCompile_D_FILE_PARSE_FAILURE            CppCompile_Code = 9
	CppCompile_COVERAGE_NOTES_CREATION_FAILURE CppCompile_Code = 10
	CppCompile_MODULE_EXPANSION_MISSING_DATA   CppCompile_Code = 11
)

// Enum value maps for CppCompile_Code.
var (
	CppCompile_Code_name = map[int32]string{
		0:  "CPP_COMPILE_UNKNOWN",
		1:  "FIND_USED_HEADERS_IO_EXCEPTION",
		2:  "COPY_OUT_ERR_FAILURE",
		3:  "D_FILE_READ_FAILURE",
		4:  "COMMAND_GENERATION_FAILURE",
		5:  "MODULE_EXPANSION_TIMEOUT",
		6:  "INCLUDE_PATH_OUTSIDE_EXEC_ROOT",
		7:  "FAKE_COMMAND_GENERATION_FAILURE",
		8:  "UNDECLARED_INCLUSIONS",
		9:  "D_FILE_PARSE_FAILURE",
		10: "COVERAGE_NOTES_CREATION_FAILURE",
		11: "MODULE_EXPANSION_MISSING_DATA",
	}
	CppCompile_Code_value = map[string]int32{
		"CPP_COMPILE_UNKNOWN":             0,
		"FIND_USED_HEADERS_IO_EXCEPTION":  1,
		"COPY_OUT_ERR_FAILURE":            2,
		"D_FILE_READ_FAILURE":             3,
		"COMMAND_GENERATION_FAILURE":      4,
		"MODULE_EXPANSION_TIMEOUT":        5,
		"INCLUDE_PATH_OUTSIDE_EXEC_ROOT":  6,
		"FAKE_COMMAND_GENERATION_FAILURE": 7,
		"UNDECLARED_INCLUSIONS":           8,
		"D_FILE_PARSE_FAILURE":            9,
		"COVERAGE_NOTES_CREATION_FAILURE": 10,
		"MODULE_EXPANSION_MISSING_DATA":   11,
	}
)

func (x CppCompile_Code) Enum() *CppCompile_Code {
	p := new(CppCompile_Code)
	*p = x
	return p
}

func (x CppCompile_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CppCompile_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[45].Descriptor()
}

func (CppCompile_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[45]
}

func (x CppCompile_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CppCompile_Code.Descriptor instead.
func (CppCompile_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{48, 0}
}

type StarlarkAction_Code int32

const (
	StarlarkAction_STARLARK_ACTION_UNKNOWN          StarlarkAction_Code = 0
	StarlarkAction_UNUSED_INPUT_LIST_READ_FAILURE   StarlarkAction_Code = 1
	StarlarkAction_UNUSED_INPUT_LIST_FILE_NOT_FOUND StarlarkAction_Code = 2
)

// Enum value maps for StarlarkAction_Code.
var (
	StarlarkAction_Code_name = map[int32]string{
		0: "STARLARK_ACTION_UNKNOWN",
		1: "UNUSED_INPUT_LIST_READ_FAILURE",
		2: "UNUSED_INPUT_LIST_FILE_NOT_FOUND",
	}
	StarlarkAction_Code_value = map[string]int32{
		"STARLARK_ACTION_UNKNOWN":          0,
		"UNUSED_INPUT_LIST_READ_FAILURE":   1,
		"UNUSED_INPUT_LIST_FILE_NOT_FOUND": 2,
	}
)

func (x StarlarkAction_Code) Enum() *StarlarkAction_Code {
	p := new(StarlarkAction_Code)
	*p = x
	return p
}

func (x StarlarkAction_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StarlarkAction_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[46].Descriptor()
}

func (StarlarkAction_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[46]
}

func (x StarlarkAction_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StarlarkAction_Code.Descriptor instead.
func (StarlarkAction_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{49, 0}
}

type NinjaAction_Code int32

const (
	NinjaAction_NINJA_ACTION_UNKNOWN                NinjaAction_Code = 0
	NinjaAction_INVALID_DEPFILE_DECLARED_DEPENDENCY NinjaAction_Code = 1
	NinjaAction_D_FILE_PARSE_FAILURE                NinjaAction_Code = 2
)

// Enum value maps for NinjaAction_Code.
var (
	NinjaAction_Code_name = map[int32]string{
		0: "NINJA_ACTION_UNKNOWN",
		1: "INVALID_DEPFILE_DECLARED_DEPENDENCY",
		2: "D_FILE_PARSE_FAILURE",
	}
	NinjaAction_Code_value = map[string]int32{
		"NINJA_ACTION_UNKNOWN":                0,
		"INVALID_DEPFILE_DECLARED_DEPENDENCY": 1,
		"D_FILE_PARSE_FAILURE":                2,
	}
)

func (x NinjaAction_Code) Enum() *NinjaAction_Code {
	p := new(NinjaAction_Code)
	*p = x
	return p
}

func (x NinjaAction_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NinjaAction_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[47].Descriptor()
}

func (NinjaAction_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[47]
}

func (x NinjaAction_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NinjaAction_Code.Descriptor instead.
func (NinjaAction_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{50, 0}
}

type DynamicExecution_Code int32

const (
	DynamicExecution_DYNAMIC_EXECUTION_UNKNOWN  DynamicExecution_Code = 0
	DynamicExecution_XCODE_RELATED_PREREQ_UNMET DynamicExecution_Code = 1
	DynamicExecution_ACTION_LOG_MOVE_FAILURE    DynamicExecution_Code = 2
	DynamicExecution_RUN_FAILURE                DynamicExecution_Code = 3
	DynamicExecution_NO_USABLE_STRATEGY_FOUND   DynamicExecution_Code = 4
)

// Enum value maps for DynamicExecution_Code.
var (
	DynamicExecution_Code_name = map[int32]string{
		0: "DYNAMIC_EXECUTION_UNKNOWN",
		1: "XCODE_RELATED_PREREQ_UNMET",
		2: "ACTION_LOG_MOVE_FAILURE",
		3: "RUN_FAILURE",
		4: "NO_USABLE_STRATEGY_FOUND",
	}
	DynamicExecution_Code_value = map[string]int32{
		"DYNAMIC_EXECUTION_UNKNOWN":  0,
		"XCODE_RELATED_PREREQ_UNMET": 1,
		"ACTION_LOG_MOVE_FAILURE":    2,
		"RUN_FAILURE":                3,
		"NO_USABLE_STRATEGY_FOUND":   4,
	}
)

func (x DynamicExecution_Code) Enum() *DynamicExecution_Code {
	p := new(DynamicExecution_Code)
	*p = x
	return p
}

func (x DynamicExecution_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DynamicExecution_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[48].Descriptor()
}

func (DynamicExecution_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[48]
}

func (x DynamicExecution_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DynamicExecution_Code.Descriptor instead.
func (DynamicExecution_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{51, 0}
}

type FailAction_Code int32

const (
	FailAction_FAIL_ACTION_UNKNOWN            FailAction_Code = 0
	FailAction_INTENTIONAL_FAILURE            FailAction_Code = 1
	FailAction_INCORRECT_PYTHON_VERSION       FailAction_Code = 2
	FailAction_PROGUARD_SPECS_MISSING         FailAction_Code = 3
	FailAction_DYNAMIC_LINKING_NOT_SUPPORTED  FailAction_Code = 4
	FailAction_SOURCE_FILES_MISSING           FailAction_Code = 5
	FailAction_INCORRECT_TOOLCHAIN            FailAction_Code = 6
	FailAction_FRAGMENT_CLASS_MISSING         FailAction_Code = 7
	FailAction_CANT_BUILD_INCOMPATIBLE_TARGET FailAction_Code = 10
)

// Enum value maps for FailAction_Code.
var (
	FailAction_Code_name = map[int32]string{
		0:  "FAIL_ACTION_UNKNOWN",
		1:  "INTENTIONAL_FAILURE",
		2:  "INCORRECT_PYTHON_VERSION",
		3:  "PROGUARD_SPECS_MISSING",
		4:  "DYNAMIC_LINKING_NOT_SUPPORTED",
		5:  "SOURCE_FILES_MISSING",
		6:  "INCORRECT_TOOLCHAIN",
		7:  "FRAGMENT_CLASS_MISSING",
		10: "CANT_BUILD_INCOMPATIBLE_TARGET",
	}
	FailAction_Code_value = map[string]int32{
		"FAIL_ACTION_UNKNOWN":            0,
		"INTENTIONAL_FAILURE":            1,
		"INCORRECT_PYTHON_VERSION":       2,
		"PROGUARD_SPECS_MISSING":         3,
		"DYNAMIC_LINKING_NOT_SUPPORTED":  4,
		"SOURCE_FILES_MISSING":           5,
		"INCORRECT_TOOLCHAIN":            6,
		"FRAGMENT_CLASS_MISSING":         7,
		"CANT_BUILD_INCOMPATIBLE_TARGET": 10,
	}
)

func (x FailAction_Code) Enum() *FailAction_Code {
	p := new(FailAction_Code)
	*p = x
	return p
}

func (x FailAction_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailAction_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[49].Descriptor()
}

func (FailAction_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[49]
}

func (x FailAction_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FailAction_Code.Descriptor instead.
func (FailAction_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{52, 0}
}

type SymlinkAction_Code int32

const (
	SymlinkAction_SYMLINK_ACTION_UNKNOWN              SymlinkAction_Code = 0
	SymlinkAction_EXECUTABLE_INPUT_NOT_FILE           SymlinkAction_Code = 1
	SymlinkAction_EXECUTABLE_INPUT_IS_NOT             SymlinkAction_Code = 2
	SymlinkAction_EXECUTABLE_INPUT_CHECK_IO_EXCEPTION SymlinkAction_Code = 3
	SymlinkAction_LINK_CREATION_IO_EXCEPTION          SymlinkAction_Code = 4
	SymlinkAction_LINK_TOUCH_IO_EXCEPTION             SymlinkAction_Code = 5
)

// Enum value maps for SymlinkAction_Code.
var (
	SymlinkAction_Code_name = map[int32]string{
		0: "SYMLINK_ACTION_UNKNOWN",
		1: "EXECUTABLE_INPUT_NOT_FILE",
		2: "EXECUTABLE_INPUT_IS_NOT",
		3: "EXECUTABLE_INPUT_CHECK_IO_EXCEPTION",
		4: "LINK_CREATION_IO_EXCEPTION",
		5: "LINK_TOUCH_IO_EXCEPTION",
	}
	SymlinkAction_Code_value = map[string]int32{
		"SYMLINK_ACTION_UNKNOWN":              0,
		"EXECUTABLE_INPUT_NOT_FILE":           1,
		"EXECUTABLE_INPUT_IS_NOT":             2,
		"EXECUTABLE_INPUT_CHECK_IO_EXCEPTION": 3,
		"LINK_CREATION_IO_EXCEPTION":          4,
		"LINK_TOUCH_IO_EXCEPTION":             5,
	}
)

func (x SymlinkAction_Code) Enum() *SymlinkAction_Code {
	p := new(SymlinkAction_Code)
	*p = x
	return p
}

func (x SymlinkAction_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymlinkAction_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[50].Descriptor()
}

func (SymlinkAction_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[50]
}

func (x SymlinkAction_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymlinkAction_Code.Descriptor instead.
func (SymlinkAction_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{53, 0}
}

type CppLink_Code int32

const (
	CppLink_CPP_LINK_UNKNOWN                CppLink_Code = 0
	CppLink_COMMAND_GENERATION_FAILURE      CppLink_Code = 1
	CppLink_FAKE_COMMAND_GENERATION_FAILURE CppLink_Code = 2
)

// Enum value maps for CppLink_Code.
var (
	CppLink_Code_name = map[int32]string{
		0: "CPP_LINK_UNKNOWN",
		1: "COMMAND_GENERATION_FAILURE",
		2: "FAKE_COMMAND_GENERATION_FAILURE",
	}
	CppLink_Code_value = map[string]int32{
		"CPP_LINK_UNKNOWN":                0,
		"COMMAND_GENERATION_FAILURE":      1,
		"FAKE_COMMAND_GENERATION_FAILURE": 2,
	}
)

func (x CppLink_Code) Enum() *CppLink_Code {
	p := new(CppLink_Code)
	*p = x
	return p
}

func (x CppLink_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CppLink_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[51].Descriptor()
}

func (CppLink_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[51]
}

func (x CppLink_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CppLink_Code.Descriptor instead.
func (CppLink_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{54, 0}
}

type LtoAction_Code int32

const (
	LtoAction_LTO_ACTION_UNKNOWN               LtoAction_Code = 0
	LtoAction_INVALID_ABSOLUTE_PATH_IN_IMPORTS LtoAction_Code = 1
	LtoAction_MISSING_BITCODE_FILES            LtoAction_Code = 2
	LtoAction_IMPORTS_READ_IO_EXCEPTION        LtoAction_Code = 3
)

// Enum value maps for LtoAction_Code.
var (
	LtoAction_Code_name = map[int32]string{
		0: "LTO_ACTION_UNKNOWN",
		1: "INVALID_ABSOLUTE_PATH_IN_IMPORTS",
		2: "MISSING_BITCODE_FILES",
		3: "IMPORTS_READ_IO_EXCEPTION",
	}
	LtoAction_Code_value = map[string]int32{
		"LTO_ACTION_UNKNOWN":               0,
		"INVALID_ABSOLUTE_PATH_IN_IMPORTS": 1,
		"MISSING_BITCODE_FILES":            2,
		"IMPORTS_READ_IO_EXCEPTION":        3,
	}
)

func (x LtoAction_Code) Enum() *LtoAction_Code {
	p := new(LtoAction_Code)
	*p = x
	return p
}

func (x LtoAction_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LtoAction_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[52].Descriptor()
}

func (LtoAction_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[52]
}

func (x LtoAction_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LtoAction_Code.Descriptor instead.
func (LtoAction_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{55, 0}
}

type TestAction_Code int32

const (
	TestAction_TEST_ACTION_UNKNOWN            TestAction_Code = 0
	TestAction_NO_KEEP_GOING_TEST_FAILURE     TestAction_Code = 1
	TestAction_LOCAL_TEST_PREREQ_UNMET        TestAction_Code = 2
	TestAction_COMMAND_LINE_EXPANSION_FAILURE TestAction_Code = 3
	TestAction_DUPLICATE_CPU_TAGS             TestAction_Code = 4
	TestAction_INVALID_CPU_TAG                TestAction_Code = 5
)

// Enum value maps for TestAction_Code.
var (
	TestAction_Code_name = map[int32]string{
		0: "TEST_ACTION_UNKNOWN",
		1: "NO_KEEP_GOING_TEST_FAILURE",
		2: "LOCAL_TEST_PREREQ_UNMET",
		3: "COMMAND_LINE_EXPANSION_FAILURE",
		4: "DUPLICATE_CPU_TAGS",
		5: "INVALID_CPU_TAG",
	}
	TestAction_Code_value = map[string]int32{
		"TEST_ACTION_UNKNOWN":            0,
		"NO_KEEP_GOING_TEST_FAILURE":     1,
		"LOCAL_TEST_PREREQ_UNMET":        2,
		"COMMAND_LINE_EXPANSION_FAILURE": 3,
		"DUPLICATE_CPU_TAGS":             4,
		"INVALID_CPU_TAG":                5,
	}
)

func (x TestAction_Code) Enum() *TestAction_Code {
	p := new(TestAction_Code)
	*p = x
	return p
}

func (x TestAction_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestAction_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[53].Descriptor()
}

func (TestAction_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[53]
}

func (x TestAction_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestAction_Code.Descriptor instead.
func (TestAction_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{56, 0}
}

type Worker_Code int32

const (
	Worker_WORKER_UNKNOWN                        Worker_Code = 0
	Worker_MULTIPLEXER_INSTANCE_REMOVAL_FAILURE  Worker_Code = 1
	Worker_MULTIPLEXER_DOES_NOT_EXIST            Worker_Code = 2
	Worker_NO_TOOLS                              Worker_Code = 3
	Worker_NO_FLAGFILE                           Worker_Code = 4
	Worker_VIRTUAL_INPUT_MATERIALIZATION_FAILURE Worker_Code = 5
	Worker_BORROW_FAILURE                        Worker_Code = 6
	Worker_PREFETCH_FAILURE                      Worker_Code = 7
	Worker_PREPARE_FAILURE                       Worker_Code = 8
	Worker_REQUEST_FAILURE                       Worker_Code = 9
	Worker_PARSE_RESPONSE_FAILURE                Worker_Code = 10
	Worker_NO_RESPONSE                           Worker_Code = 11
	Worker_FINISH_FAILURE                        Worker_Code = 12
	Worker_FORBIDDEN_INPUT                       Worker_Code = 13
)

// Enum value maps for Worker_Code.
var (
	Worker_Code_name = map[int32]string{
		0:  "WORKER_UNKNOWN",
		1:  "MULTIPLEXER_INSTANCE_REMOVAL_FAILURE",
		2:  "MULTIPLEXER_DOES_NOT_EXIST",
		3:  "NO_TOOLS",
		4:  "NO_FLAGFILE",
		5:  "VIRTUAL_INPUT_MATERIALIZATION_FAILURE",
		6:  "BORROW_FAILURE",
		7:  "PREFETCH_FAILURE",
		8:  "PREPARE_FAILURE",
		9:  "REQUEST_FAILURE",
		10: "PARSE_RESPONSE_FAILURE",
		11: "NO_RESPONSE",
		12: "FINISH_FAILURE",
		13: "FORBIDDEN_INPUT",
	}
	Worker_Code_value = map[string]int32{
		"WORKER_UNKNOWN":                        0,
		"MULTIPLEXER_INSTANCE_REMOVAL_FAILURE":  1,
		"MULTIPLEXER_DOES_NOT_EXIST":            2,
		"NO_TOOLS":                              3,
		"NO_FLAGFILE":                           4,
		"VIRTUAL_INPUT_MATERIALIZATION_FAILURE": 5,
		"BORROW_FAILURE":                        6,
		"PREFETCH_FAILURE":                      7,
		"PREPARE_FAILURE":                       8,
		"REQUEST_FAILURE":                       9,
		"PARSE_RESPONSE_FAILURE":                10,
		"NO_RESPONSE":                           11,
		"FINISH_FAILURE":                        12,
		"FORBIDDEN_INPUT":                       13,
	}
)

func (x Worker_Code) Enum() *Worker_Code {
	p := new(Worker_Code)
	*p = x
	return p
}

func (x Worker_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Worker_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[54].Descriptor()
}

func (Worker_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[54]
}

func (x Worker_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Worker_Code.Descriptor instead.
func (Worker_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{57, 0}
}

type Analysis_Code int32

const (
	Analysis_ANALYSIS_UNKNOWN                       Analysis_Code = 0
	Analysis_LOAD_FAILURE                           Analysis_Code = 1
	Analysis_GENERIC_LOADING_PHASE_FAILURE          Analysis_Code = 2
	Analysis_NOT_ALL_TARGETS_ANALYZED               Analysis_Code = 3
	Analysis_CYCLE                                  Analysis_Code = 4
	Analysis_PARAMETERIZED_TOP_LEVEL_ASPECT_INVALID Analysis_Code = 5
	Analysis_ASPECT_LABEL_SYNTAX_ERROR              Analysis_Code = 6
	Analysis_ASPECT_PREREQ_UNMET                    Analysis_Code = 7
	Analysis_ASPECT_NOT_FOUND                       Analysis_Code = 8
	Analysis_ACTION_CONFLICT                        Analysis_Code = 9
	Analysis_ARTIFACT_PREFIX_CONFLICT               Analysis_Code = 10
	Analysis_UNEXPECTED_ANALYSIS_EXCEPTION          Analysis_Code = 11
	Analysis_TARGETS_MISSING_ENVIRONMENTS           Analysis_Code = 12
	Analysis_INVALID_ENVIRONMENT                    Analysis_Code = 13
	Analysis_ENVIRONMENT_MISSING_FROM_GROUPS        Analysis_Code = 14
	Analysis_EXEC_GROUP_MISSING                     Analysis_Code = 15
	Analysis_INVALID_EXECUTION_PLATFORM             Analysis_Code = 16
	Analysis_ASPECT_CREATION_FAILED                 Analysis_Code = 17
	Analysis_CONFIGURED_VALUE_CREATION_FAILED       Analysis_Code = 18
	Analysis_INCOMPATIBLE_TARGET_REQUESTED          Analysis_Code = 19
	Analysis_ANALYSIS_FAILURE_PROPAGATION_FAILED    Analysis_Code = 20
)

// Enum value maps for Analysis_Code.
var (
	Analysis_Code_name = map[int32]string{
		0:  "ANALYSIS_UNKNOWN",
		1:  "LOAD_FAILURE",
		2:  "GENERIC_LOADING_PHASE_FAILURE",
		3:  "NOT_ALL_TARGETS_ANALYZED",
		4:  "CYCLE",
		5:  "PARAMETERIZED_TOP_LEVEL_ASPECT_INVALID",
		6:  "ASPECT_LABEL_SYNTAX_ERROR",
		7:  "ASPECT_PREREQ_UNMET",
		8:  "ASPECT_NOT_FOUND",
		9:  "ACTION_CONFLICT",
		10: "ARTIFACT_PREFIX_CONFLICT",
		11: "UNEXPECTED_ANALYSIS_EXCEPTION",
		12: "TARGETS_MISSING_ENVIRONMENTS",
		13: "INVALID_ENVIRONMENT",
		14: "ENVIRONMENT_MISSING_FROM_GROUPS",
		15: "EXEC_GROUP_MISSING",
		16: "INVALID_EXECUTION_PLATFORM",
		17: "ASPECT_CREATION_FAILED",
		18: "CONFIGURED_VALUE_CREATION_FAILED",
		19: "INCOMPATIBLE_TARGET_REQUESTED",
		20: "ANALYSIS_FAILURE_PROPAGATION_FAILED",
	}
	Analysis_Code_value = map[string]int32{
		"ANALYSIS_UNKNOWN":                       0,
		"LOAD_FAILURE":                           1,
		"GENERIC_LOADING_PHASE_FAILURE":          2,
		"NOT_ALL_TARGETS_ANALYZED":               3,
		"CYCLE":                                  4,
		"PARAMETERIZED_TOP_LEVEL_ASPECT_INVALID": 5,
		"ASPECT_LABEL_SYNTAX_ERROR":              6,
		"ASPECT_PREREQ_UNMET":                    7,
		"ASPECT_NOT_FOUND":                       8,
		"ACTION_CONFLICT":                        9,
		"ARTIFACT_PREFIX_CONFLICT":               10,
		"UNEXPECTED_ANALYSIS_EXCEPTION":          11,
		"TARGETS_MISSING_ENVIRONMENTS":           12,
		"INVALID_ENVIRONMENT":                    13,
		"ENVIRONMENT_MISSING_FROM_GROUPS":        14,
		"EXEC_GROUP_MISSING":                     15,
		"INVALID_EXECUTION_PLATFORM":             16,
		"ASPECT_CREATION_FAILED":                 17,
		"CONFIGURED_VALUE_CREATION_FAILED":       18,
		"INCOMPATIBLE_TARGET_REQUESTED":          19,
		"ANALYSIS_FAILURE_PROPAGATION_FAILED":    20,
	}
)

func (x Analysis_Code) Enum() *Analysis_Code {
	p := new(Analysis_Code)
	*p = x
	return p
}

func (x Analysis_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Analysis_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[55].Descriptor()
}

func (Analysis_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[55]
}

func (x Analysis_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Analysis_Code.Descriptor instead.
func (Analysis_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{58, 0}
}

type PackageLoading_Code int32

const (
	PackageLoading_PACKAGE_LOADING_UNKNOWN                  PackageLoading_Code = 0
	PackageLoading_WORKSPACE_FILE_ERROR                     PackageLoading_Code = 1
	PackageLoading_MAX_COMPUTATION_STEPS_EXCEEDED           PackageLoading_Code = 2
	PackageLoading_BUILD_FILE_MISSING                       PackageLoading_Code = 3
	PackageLoading_REPOSITORY_MISSING                       PackageLoading_Code = 4
	PackageLoading_PERSISTENT_INCONSISTENT_FILESYSTEM_ERROR PackageLoading_Code = 5
	PackageLoading_TRANSIENT_INCONSISTENT_FILESYSTEM_ERROR  PackageLoading_Code = 6
	PackageLoading_INVALID_NAME                             PackageLoading_Code = 7
	PackageLoading_EVAL_GLOBS_SYMLINK_ERROR                 PackageLoading_Code = 9
	PackageLoading_IMPORT_STARLARK_FILE_ERROR               PackageLoading_Code = 10
	PackageLoading_PACKAGE_MISSING                          PackageLoading_Code = 11
	PackageLoading_TARGET_MISSING                           PackageLoading_Code = 12
	PackageLoading_NO_SUCH_THING                            PackageLoading_Code = 13
	PackageLoading_GLOB_IO_EXCEPTION                        PackageLoading_Code = 14
	PackageLoading_DUPLICATE_LABEL                          PackageLoading_Code = 15
	PackageLoading_INVALID_PACKAGE_SPECIFICATION            PackageLoading_Code = 16
	PackageLoading_SYNTAX_ERROR                             PackageLoading_Code = 17
	PackageLoading_ENVIRONMENT_IN_DIFFERENT_PACKAGE         PackageLoading_Code = 18
	PackageLoading_DEFAULT_ENVIRONMENT_UNDECLARED           PackageLoading_Code = 19
	PackageLoading_ENVIRONMENT_IN_MULTIPLE_GROUPS           PackageLoading_Code = 20
	PackageLoading_ENVIRONMENT_DOES_NOT_EXIST               PackageLoading_Code = 21
	PackageLoading_ENVIRONMENT_INVALID                      PackageLoading_Code = 22
	PackageLoading_ENVIRONMENT_NOT_IN_GROUP                 PackageLoading_Code = 23
	PackageLoading_PACKAGE_NAME_INVALID                     PackageLoading_Code = 24
	PackageLoading_STARLARK_EVAL_ERROR                      PackageLoading_Code = 25
	PackageLoading_LICENSE_PARSE_FAILURE                    PackageLoading_Code = 26
	PackageLoading_DISTRIBUTIONS_PARSE_FAILURE              PackageLoading_Code = 27
	PackageLoading_LABEL_CROSSES_PACKAGE_BOUNDARY           PackageLoading_Code = 28
	PackageLoading_BUILTINS_INJECTION_FAILURE               PackageLoading_Code = 29
	PackageLoading_SYMLINK_CYCLE_OR_INFINITE_EXPANSION      PackageLoading_Code = 30
	PackageLoading_OTHER_IO_EXCEPTION                       PackageLoading_Code = 31
)

// Enum value maps for PackageLoading_Code.
var (
	PackageLoading_Code_name = map[int32]string{
		0:  "PACKAGE_LOADING_UNKNOWN",
		1:  "WORKSPACE_FILE_ERROR",
		2:  "MAX_COMPUTATION_STEPS_EXCEEDED",
		3:  "BUILD_FILE_MISSING",
		4:  "REPOSITORY_MISSING",
		5:  "PERSISTENT_INCONSISTENT_FILESYSTEM_ERROR",
		6:  "TRANSIENT_INCONSISTENT_FILESYSTEM_ERROR",
		7:  "INVALID_NAME",
		9:  "EVAL_GLOBS_SYMLINK_ERROR",
		10: "IMPORT_STARLARK_FILE_ERROR",
		11: "PACKAGE_MISSING",
		12: "TARGET_MISSING",
		13: "NO_SUCH_THING",
		14: "GLOB_IO_EXCEPTION",
		15: "DUPLICATE_LABEL",
		16: "INVALID_PACKAGE_SPECIFICATION",
		17: "SYNTAX_ERROR",
		18: "ENVIRONMENT_IN_DIFFERENT_PACKAGE",
		19: "DEFAULT_ENVIRONMENT_UNDECLARED",
		20: "ENVIRONMENT_IN_MULTIPLE_GROUPS",
		21: "ENVIRONMENT_DOES_NOT_EXIST",
		22: "ENVIRONMENT_INVALID",
		23: "ENVIRONMENT_NOT_IN_GROUP",
		24: "PACKAGE_NAME_INVALID",
		25: "STARLARK_EVAL_ERROR",
		26: "LICENSE_PARSE_FAILURE",
		27: "DISTRIBUTIONS_PARSE_FAILURE",
		28: "LABEL_CROSSES_PACKAGE_BOUNDARY",
		29: "BUILTINS_INJECTION_FAILURE",
		30: "SYMLINK_CYCLE_OR_INFINITE_EXPANSION",
		31: "OTHER_IO_EXCEPTION",
	}
	PackageLoading_Code_value = map[string]int32{
		"PACKAGE_LOADING_UNKNOWN":                  0,
		"WORKSPACE_FILE_ERROR":                     1,
		"MAX_COMPUTATION_STEPS_EXCEEDED":           2,
		"BUILD_FILE_MISSING":                       3,
		"REPOSITORY_MISSING":                       4,
		"PERSISTENT_INCONSISTENT_FILESYSTEM_ERROR": 5,
		"TRANSIENT_INCONSISTENT_FILESYSTEM_ERROR":  6,
		"INVALID_NAME":                             7,
		"EVAL_GLOBS_SYMLINK_ERROR":                 9,
		"IMPORT_STARLARK_FILE_ERROR":               10,
		"PACKAGE_MISSING":                          11,
		"TARGET_MISSING":                           12,
		"NO_SUCH_THING":                            13,
		"GLOB_IO_EXCEPTION":                        14,
		"DUPLICATE_LABEL":                          15,
		"INVALID_PACKAGE_SPECIFICATION":            16,
		"SYNTAX_ERROR":                             17,
		"ENVIRONMENT_IN_DIFFERENT_PACKAGE":         18,
		"DEFAULT_ENVIRONMENT_UNDECLARED":           19,
		"ENVIRONMENT_IN_MULTIPLE_GROUPS":           20,
		"ENVIRONMENT_DOES_NOT_EXIST":               21,
		"ENVIRONMENT_INVALID":                      22,
		"ENVIRONMENT_NOT_IN_GROUP":                 23,
		"PACKAGE_NAME_INVALID":                     24,
		"STARLARK_EVAL_ERROR":                      25,
		"LICENSE_PARSE_FAILURE":                    26,
		"DISTRIBUTIONS_PARSE_FAILURE":              27,
		"LABEL_CROSSES_PACKAGE_BOUNDARY":           28,
		"BUILTINS_INJECTION_FAILURE":               29,
		"SYMLINK_CYCLE_OR_INFINITE_EXPANSION":      30,
		"OTHER_IO_EXCEPTION":                       31,
	}
)

func (x PackageLoading_Code) Enum() *PackageLoading_Code {
	p := new(PackageLoading_Code)
	*p = x
	return p
}

func (x PackageLoading_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageLoading_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[56].Descriptor()
}

func (PackageLoading_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[56]
}

func (x PackageLoading_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageLoading_Code.Descriptor instead.
func (PackageLoading_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{59, 0}
}

type Toolchain_Code int32

const (
	Toolchain_TOOLCHAIN_UNKNOWN              Toolchain_Code = 0
	Toolchain_MISSING_PROVIDER               Toolchain_Code = 1
	Toolchain_INVALID_CONSTRAINT_VALUE       Toolchain_Code = 2
	Toolchain_INVALID_PLATFORM_VALUE         Toolchain_Code = 3
	Toolchain_INVALID_TOOLCHAIN              Toolchain_Code = 4
	Toolchain_NO_MATCHING_EXECUTION_PLATFORM Toolchain_Code = 5
	Toolchain_NO_MATCHING_TOOLCHAIN          Toolchain_Code = 6
	Toolchain_INVALID_TOOLCHAIN_TYPE         Toolchain_Code = 7
)

// Enum value maps for Toolchain_Code.
var (
	Toolchain_Code_name = map[int32]string{
		0: "TOOLCHAIN_UNKNOWN",
		1: "MISSING_PROVIDER",
		2: "INVALID_CONSTRAINT_VALUE",
		3: "INVALID_PLATFORM_VALUE",
		4: "INVALID_TOOLCHAIN",
		5: "NO_MATCHING_EXECUTION_PLATFORM",
		6: "NO_MATCHING_TOOLCHAIN",
		7: "INVALID_TOOLCHAIN_TYPE",
	}
	Toolchain_Code_value = map[string]int32{
		"TOOLCHAIN_UNKNOWN":              0,
		"MISSING_PROVIDER":               1,
		"INVALID_CONSTRAINT_VALUE":       2,
		"INVALID_PLATFORM_VALUE":         3,
		"INVALID_TOOLCHAIN":              4,
		"NO_MATCHING_EXECUTION_PLATFORM": 5,
		"NO_MATCHING_TOOLCHAIN":          6,
		"INVALID_TOOLCHAIN_TYPE":         7,
	}
)

func (x Toolchain_Code) Enum() *Toolchain_Code {
	p := new(Toolchain_Code)
	*p = x
	return p
}

func (x Toolchain_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Toolchain_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[57].Descriptor()
}

func (Toolchain_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[57]
}

func (x Toolchain_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Toolchain_Code.Descriptor instead.
func (Toolchain_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{60, 0}
}

type StarlarkLoading_Code int32

const (
	StarlarkLoading_STARLARK_LOADING_UNKNOWN       StarlarkLoading_Code = 0
	StarlarkLoading_CYCLE                          StarlarkLoading_Code = 1
	StarlarkLoading_COMPILE_ERROR                  StarlarkLoading_Code = 2
	StarlarkLoading_PARSE_ERROR                    StarlarkLoading_Code = 3
	StarlarkLoading_EVAL_ERROR                     StarlarkLoading_Code = 4
	StarlarkLoading_CONTAINING_PACKAGE_NOT_FOUND   StarlarkLoading_Code = 5
	StarlarkLoading_PACKAGE_NOT_FOUND              StarlarkLoading_Code = 6
	StarlarkLoading_IO_ERROR                       StarlarkLoading_Code = 7
	StarlarkLoading_LABEL_CROSSES_PACKAGE_BOUNDARY StarlarkLoading_Code = 8
	StarlarkLoading_BUILTINS_ERROR                 StarlarkLoading_Code = 9
	StarlarkLoading_VISIBILITY_ERROR               StarlarkLoading_Code = 10
)

// Enum value maps for StarlarkLoading_Code.
var (
	StarlarkLoading_Code_name = map[int32]string{
		0:  "STARLARK_LOADING_UNKNOWN",
		1:  "CYCLE",
		2:  "COMPILE_ERROR",
		3:  "PARSE_ERROR",
		4:  "EVAL_ERROR",
		5:  "CONTAINING_PACKAGE_NOT_FOUND",
		6:  "PACKAGE_NOT_FOUND",
		7:  "IO_ERROR",
		8:  "LABEL_CROSSES_PACKAGE_BOUNDARY",
		9:  "BUILTINS_ERROR",
		10: "VISIBILITY_ERROR",
	}
	StarlarkLoading_Code_value = map[string]int32{
		"STARLARK_LOADING_UNKNOWN":       0,
		"CYCLE":                          1,
		"COMPILE_ERROR":                  2,
		"PARSE_ERROR":                    3,
		"EVAL_ERROR":                     4,
		"CONTAINING_PACKAGE_NOT_FOUND":   5,
		"PACKAGE_NOT_FOUND":              6,
		"IO_ERROR":                       7,
		"LABEL_CROSSES_PACKAGE_BOUNDARY": 8,
		"BUILTINS_ERROR":                 9,
		"VISIBILITY_ERROR":               10,
	}
)

func (x StarlarkLoading_Code) Enum() *StarlarkLoading_Code {
	p := new(StarlarkLoading_Code)
	*p = x
	return p
}

func (x StarlarkLoading_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StarlarkLoading_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[58].Descriptor()
}

func (StarlarkLoading_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[58]
}

func (x StarlarkLoading_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StarlarkLoading_Code.Descriptor instead.
func (StarlarkLoading_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{61, 0}
}

type ExternalDeps_Code int32

const (
	ExternalDeps_EXTERNAL_DEPS_UNKNOWN    ExternalDeps_Code = 0
	ExternalDeps_MODULE_NOT_FOUND         ExternalDeps_Code = 1
	ExternalDeps_BAD_MODULE               ExternalDeps_Code = 2
	ExternalDeps_VERSION_RESOLUTION_ERROR ExternalDeps_Code = 3
	ExternalDeps_INVALID_REGISTRY_URL     ExternalDeps_Code = 4
	ExternalDeps_ERROR_ACCESSING_REGISTRY ExternalDeps_Code = 5
)

// Enum value maps for ExternalDeps_Code.
var (
	ExternalDeps_Code_name = map[int32]string{
		0: "EXTERNAL_DEPS_UNKNOWN",
		1: "MODULE_NOT_FOUND",
		2: "BAD_MODULE",
		3: "VERSION_RESOLUTION_ERROR",
		4: "INVALID_REGISTRY_URL",
		5: "ERROR_ACCESSING_REGISTRY",
	}
	ExternalDeps_Code_value = map[string]int32{
		"EXTERNAL_DEPS_UNKNOWN":    0,
		"MODULE_NOT_FOUND":         1,
		"BAD_MODULE":               2,
		"VERSION_RESOLUTION_ERROR": 3,
		"INVALID_REGISTRY_URL":     4,
		"ERROR_ACCESSING_REGISTRY": 5,
	}
)

func (x ExternalDeps_Code) Enum() *ExternalDeps_Code {
	p := new(ExternalDeps_Code)
	*p = x
	return p
}

func (x ExternalDeps_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalDeps_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[59].Descriptor()
}

func (ExternalDeps_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[59]
}

func (x ExternalDeps_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalDeps_Code.Descriptor instead.
func (ExternalDeps_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{62, 0}
}

type DiffAwareness_Code int32

const (
	DiffAwareness_DIFF_AWARENESS_UNKNOWN DiffAwareness_Code = 0
	DiffAwareness_DIFF_STAT_FAILED       DiffAwareness_Code = 1
)

// Enum value maps for DiffAwareness_Code.
var (
	DiffAwareness_Code_name = map[int32]string{
		0: "DIFF_AWARENESS_UNKNOWN",
		1: "DIFF_STAT_FAILED",
	}
	DiffAwareness_Code_value = map[string]int32{
		"DIFF_AWARENESS_UNKNOWN": 0,
		"DIFF_STAT_FAILED":       1,
	}
)

func (x DiffAwareness_Code) Enum() *DiffAwareness_Code {
	p := new(DiffAwareness_Code)
	*p = x
	return p
}

func (x DiffAwareness_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiffAwareness_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[60].Descriptor()
}

func (DiffAwareness_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[60]
}

func (x DiffAwareness_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiffAwareness_Code.Descriptor instead.
func (DiffAwareness_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{63, 0}
}

type ModqueryCommand_Code int32

const (
	ModqueryCommand_MODQUERY_COMMAND_UNKNOWN ModqueryCommand_Code = 0
	ModqueryCommand_MISSING_ARGUMENTS        ModqueryCommand_Code = 1
	ModqueryCommand_TOO_MANY_ARGUMENTS       ModqueryCommand_Code = 2
	ModqueryCommand_INVALID_ARGUMENTS        ModqueryCommand_Code = 3
)

// Enum value maps for ModqueryCommand_Code.
var (
	ModqueryCommand_Code_name = map[int32]string{
		0: "MODQUERY_COMMAND_UNKNOWN",
		1: "MISSING_ARGUMENTS",
		2: "TOO_MANY_ARGUMENTS",
		3: "INVALID_ARGUMENTS",
	}
	ModqueryCommand_Code_value = map[string]int32{
		"MODQUERY_COMMAND_UNKNOWN": 0,
		"MISSING_ARGUMENTS":        1,
		"TOO_MANY_ARGUMENTS":       2,
		"INVALID_ARGUMENTS":        3,
	}
)

func (x ModqueryCommand_Code) Enum() *ModqueryCommand_Code {
	p := new(ModqueryCommand_Code)
	*p = x
	return p
}

func (x ModqueryCommand_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModqueryCommand_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[61].Descriptor()
}

func (ModqueryCommand_Code) Type() protoreflect.EnumType {
	return &file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes[61]
}

func (x ModqueryCommand_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModqueryCommand_Code.Descriptor instead.
func (ModqueryCommand_Code) EnumDescriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{64, 0}
}

type FailureDetailMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitCode uint32 `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (x *FailureDetailMetadata) Reset() {
	*x = FailureDetailMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureDetailMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureDetailMetadata) ProtoMessage() {}

func (x *FailureDetailMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureDetailMetadata.ProtoReflect.Descriptor instead.
func (*FailureDetailMetadata) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{0}
}

func (x *FailureDetailMetadata) GetExitCode() uint32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

type FailureDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Types that are assignable to Category:
	//
	//	*FailureDetail_Interrupted
	//	*FailureDetail_ExternalRepository
	//	*FailureDetail_BuildProgress
	//	*FailureDetail_RemoteOptions
	//	*FailureDetail_ClientEnvironment
	//	*FailureDetail_Crash
	//	*FailureDetail_SymlinkForest
	//	*FailureDetail_PackageOptions
	//	*FailureDetail_RemoteExecution
	//	*FailureDetail_Execution
	//	*FailureDetail_Workspaces
	//	*FailureDetail_CrashOptions
	//	*FailureDetail_Filesystem
	//	*FailureDetail_ExecutionOptions
	//	*FailureDetail_Command
	//	*FailureDetail_Spawn
	//	*FailureDetail_GrpcServer
	//	*FailureDetail_CanonicalizeFlags
	//	*FailureDetail_BuildConfiguration
	//	*FailureDetail_InfoCommand
	//	*FailureDetail_MemoryOptions
	//	*FailureDetail_Query
	//	*FailureDetail_LocalExecution
	//	*FailureDetail_ActionCache
	//	*FailureDetail_FetchCommand
	//	*FailureDetail_SyncCommand
	//	*FailureDetail_Sandbox
	//	*FailureDetail_IncludeScanning
	//	*FailureDetail_TestCommand
	//	*FailureDetail_ActionQuery
	//	*FailureDetail_TargetPatterns
	//	*FailureDetail_CleanCommand
	//	*FailureDetail_ConfigCommand
	//	*FailureDetail_ConfigurableQuery
	//	*FailureDetail_DumpCommand
	//	*FailureDetail_HelpCommand
	//	*FailureDetail_MobileInstall
	//	*FailureDetail_ProfileCommand
	//	*FailureDetail_RunCommand
	//	*FailureDetail_VersionCommand
	//	*FailureDetail_PrintActionCommand
	//	*FailureDetail_WorkspaceStatus
	//	*FailureDetail_JavaCompile
	//	*FailureDetail_ActionRewinding
	//	*FailureDetail_CppCompile
	//	*FailureDetail_StarlarkAction
	//	*FailureDetail_NinjaAction
	//	*FailureDetail_DynamicExecution
	//	*FailureDetail_FailAction
	//	*FailureDetail_SymlinkAction
	//	*FailureDetail_CppLink
	//	*FailureDetail_LtoAction
	//	*FailureDetail_TestAction
	//	*FailureDetail_Worker
	//	*FailureDetail_Analysis
	//	*FailureDetail_PackageLoading
	//	*FailureDetail_Toolchain
	//	*FailureDetail_StarlarkLoading
	//	*FailureDetail_ExternalDeps
	//	*FailureDetail_DiffAwareness
	//	*FailureDetail_ModqueryCommand
	//	*FailureDetail_BuildReport
	Category isFailureDetail_Category `protobuf_oneof:"category"`
}

func (x *FailureDetail) Reset() {
	*x = FailureDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureDetail) ProtoMessage() {}

func (x *FailureDetail) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureDetail.ProtoReflect.Descriptor instead.
func (*FailureDetail) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{1}
}

func (x *FailureDetail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (m *FailureDetail) GetCategory() isFailureDetail_Category {
	if m != nil {
		return m.Category
	}
	return nil
}

func (x *FailureDetail) GetInterrupted() *Interrupted {
	if x, ok := x.GetCategory().(*FailureDetail_Interrupted); ok {
		return x.Interrupted
	}
	return nil
}

func (x *FailureDetail) GetExternalRepository() *ExternalRepository {
	if x, ok := x.GetCategory().(*FailureDetail_ExternalRepository); ok {
		return x.ExternalRepository
	}
	return nil
}

func (x *FailureDetail) GetBuildProgress() *BuildProgress {
	if x, ok := x.GetCategory().(*FailureDetail_BuildProgress); ok {
		return x.BuildProgress
	}
	return nil
}

func (x *FailureDetail) GetRemoteOptions() *RemoteOptions {
	if x, ok := x.GetCategory().(*FailureDetail_RemoteOptions); ok {
		return x.RemoteOptions
	}
	return nil
}

func (x *FailureDetail) GetClientEnvironment() *ClientEnvironment {
	if x, ok := x.GetCategory().(*FailureDetail_ClientEnvironment); ok {
		return x.ClientEnvironment
	}
	return nil
}

func (x *FailureDetail) GetCrash() *Crash {
	if x, ok := x.GetCategory().(*FailureDetail_Crash); ok {
		return x.Crash
	}
	return nil
}

func (x *FailureDetail) GetSymlinkForest() *SymlinkForest {
	if x, ok := x.GetCategory().(*FailureDetail_SymlinkForest); ok {
		return x.SymlinkForest
	}
	return nil
}

func (x *FailureDetail) GetPackageOptions() *PackageOptions {
	if x, ok := x.GetCategory().(*FailureDetail_PackageOptions); ok {
		return x.PackageOptions
	}
	return nil
}

func (x *FailureDetail) GetRemoteExecution() *RemoteExecution {
	if x, ok := x.GetCategory().(*FailureDetail_RemoteExecution); ok {
		return x.RemoteExecution
	}
	return nil
}

func (x *FailureDetail) GetExecution() *Execution {
	if x, ok := x.GetCategory().(*FailureDetail_Execution); ok {
		return x.Execution
	}
	return nil
}

func (x *FailureDetail) GetWorkspaces() *Workspaces {
	if x, ok := x.GetCategory().(*FailureDetail_Workspaces); ok {
		return x.Workspaces
	}
	return nil
}

func (x *FailureDetail) GetCrashOptions() *CrashOptions {
	if x, ok := x.GetCategory().(*FailureDetail_CrashOptions); ok {
		return x.CrashOptions
	}
	return nil
}

func (x *FailureDetail) GetFilesystem() *Filesystem {
	if x, ok := x.GetCategory().(*FailureDetail_Filesystem); ok {
		return x.Filesystem
	}
	return nil
}

func (x *FailureDetail) GetExecutionOptions() *ExecutionOptions {
	if x, ok := x.GetCategory().(*FailureDetail_ExecutionOptions); ok {
		return x.ExecutionOptions
	}
	return nil
}

func (x *FailureDetail) GetCommand() *Command {
	if x, ok := x.GetCategory().(*FailureDetail_Command); ok {
		return x.Command
	}
	return nil
}

func (x *FailureDetail) GetSpawn() *Spawn {
	if x, ok := x.GetCategory().(*FailureDetail_Spawn); ok {
		return x.Spawn
	}
	return nil
}

func (x *FailureDetail) GetGrpcServer() *GrpcServer {
	if x, ok := x.GetCategory().(*FailureDetail_GrpcServer); ok {
		return x.GrpcServer
	}
	return nil
}

func (x *FailureDetail) GetCanonicalizeFlags() *CanonicalizeFlags {
	if x, ok := x.GetCategory().(*FailureDetail_CanonicalizeFlags); ok {
		return x.CanonicalizeFlags
	}
	return nil
}

func (x *FailureDetail) GetBuildConfiguration() *BuildConfiguration {
	if x, ok := x.GetCategory().(*FailureDetail_BuildConfiguration); ok {
		return x.BuildConfiguration
	}
	return nil
}

func (x *FailureDetail) GetInfoCommand() *InfoCommand {
	if x, ok := x.GetCategory().(*FailureDetail_InfoCommand); ok {
		return x.InfoCommand
	}
	return nil
}

func (x *FailureDetail) GetMemoryOptions() *MemoryOptions {
	if x, ok := x.GetCategory().(*FailureDetail_MemoryOptions); ok {
		return x.MemoryOptions
	}
	return nil
}

func (x *FailureDetail) GetQuery() *Query {
	if x, ok := x.GetCategory().(*FailureDetail_Query); ok {
		return x.Query
	}
	return nil
}

func (x *FailureDetail) GetLocalExecution() *LocalExecution {
	if x, ok := x.GetCategory().(*FailureDetail_LocalExecution); ok {
		return x.LocalExecution
	}
	return nil
}

func (x *FailureDetail) GetActionCache() *ActionCache {
	if x, ok := x.GetCategory().(*FailureDetail_ActionCache); ok {
		return x.ActionCache
	}
	return nil
}

func (x *FailureDetail) GetFetchCommand() *FetchCommand {
	if x, ok := x.GetCategory().(*FailureDetail_FetchCommand); ok {
		return x.FetchCommand
	}
	return nil
}

func (x *FailureDetail) GetSyncCommand() *SyncCommand {
	if x, ok := x.GetCategory().(*FailureDetail_SyncCommand); ok {
		return x.SyncCommand
	}
	return nil
}

func (x *FailureDetail) GetSandbox() *Sandbox {
	if x, ok := x.GetCategory().(*FailureDetail_Sandbox); ok {
		return x.Sandbox
	}
	return nil
}

func (x *FailureDetail) GetIncludeScanning() *IncludeScanning {
	if x, ok := x.GetCategory().(*FailureDetail_IncludeScanning); ok {
		return x.IncludeScanning
	}
	return nil
}

func (x *FailureDetail) GetTestCommand() *TestCommand {
	if x, ok := x.GetCategory().(*FailureDetail_TestCommand); ok {
		return x.TestCommand
	}
	return nil
}

func (x *FailureDetail) GetActionQuery() *ActionQuery {
	if x, ok := x.GetCategory().(*FailureDetail_ActionQuery); ok {
		return x.ActionQuery
	}
	return nil
}

func (x *FailureDetail) GetTargetPatterns() *TargetPatterns {
	if x, ok := x.GetCategory().(*FailureDetail_TargetPatterns); ok {
		return x.TargetPatterns
	}
	return nil
}

func (x *FailureDetail) GetCleanCommand() *CleanCommand {
	if x, ok := x.GetCategory().(*FailureDetail_CleanCommand); ok {
		return x.CleanCommand
	}
	return nil
}

func (x *FailureDetail) GetConfigCommand() *ConfigCommand {
	if x, ok := x.GetCategory().(*FailureDetail_ConfigCommand); ok {
		return x.ConfigCommand
	}
	return nil
}

func (x *FailureDetail) GetConfigurableQuery() *ConfigurableQuery {
	if x, ok := x.GetCategory().(*FailureDetail_ConfigurableQuery); ok {
		return x.ConfigurableQuery
	}
	return nil
}

func (x *FailureDetail) GetDumpCommand() *DumpCommand {
	if x, ok := x.GetCategory().(*FailureDetail_DumpCommand); ok {
		return x.DumpCommand
	}
	return nil
}

func (x *FailureDetail) GetHelpCommand() *HelpCommand {
	if x, ok := x.GetCategory().(*FailureDetail_HelpCommand); ok {
		return x.HelpCommand
	}
	return nil
}

func (x *FailureDetail) GetMobileInstall() *MobileInstall {
	if x, ok := x.GetCategory().(*FailureDetail_MobileInstall); ok {
		return x.MobileInstall
	}
	return nil
}

func (x *FailureDetail) GetProfileCommand() *ProfileCommand {
	if x, ok := x.GetCategory().(*FailureDetail_ProfileCommand); ok {
		return x.ProfileCommand
	}
	return nil
}

func (x *FailureDetail) GetRunCommand() *RunCommand {
	if x, ok := x.GetCategory().(*FailureDetail_RunCommand); ok {
		return x.RunCommand
	}
	return nil
}

func (x *FailureDetail) GetVersionCommand() *VersionCommand {
	if x, ok := x.GetCategory().(*FailureDetail_VersionCommand); ok {
		return x.VersionCommand
	}
	return nil
}

func (x *FailureDetail) GetPrintActionCommand() *PrintActionCommand {
	if x, ok := x.GetCategory().(*FailureDetail_PrintActionCommand); ok {
		return x.PrintActionCommand
	}
	return nil
}

func (x *FailureDetail) GetWorkspaceStatus() *WorkspaceStatus {
	if x, ok := x.GetCategory().(*FailureDetail_WorkspaceStatus); ok {
		return x.WorkspaceStatus
	}
	return nil
}

func (x *FailureDetail) GetJavaCompile() *JavaCompile {
	if x, ok := x.GetCategory().(*FailureDetail_JavaCompile); ok {
		return x.JavaCompile
	}
	return nil
}

func (x *FailureDetail) GetActionRewinding() *ActionRewinding {
	if x, ok := x.GetCategory().(*FailureDetail_ActionRewinding); ok {
		return x.ActionRewinding
	}
	return nil
}

func (x *FailureDetail) GetCppCompile() *CppCompile {
	if x, ok := x.GetCategory().(*FailureDetail_CppCompile); ok {
		return x.CppCompile
	}
	return nil
}

func (x *FailureDetail) GetStarlarkAction() *StarlarkAction {
	if x, ok := x.GetCategory().(*FailureDetail_StarlarkAction); ok {
		return x.StarlarkAction
	}
	return nil
}

func (x *FailureDetail) GetNinjaAction() *NinjaAction {
	if x, ok := x.GetCategory().(*FailureDetail_NinjaAction); ok {
		return x.NinjaAction
	}
	return nil
}

func (x *FailureDetail) GetDynamicExecution() *DynamicExecution {
	if x, ok := x.GetCategory().(*FailureDetail_DynamicExecution); ok {
		return x.DynamicExecution
	}
	return nil
}

func (x *FailureDetail) GetFailAction() *FailAction {
	if x, ok := x.GetCategory().(*FailureDetail_FailAction); ok {
		return x.FailAction
	}
	return nil
}

func (x *FailureDetail) GetSymlinkAction() *SymlinkAction {
	if x, ok := x.GetCategory().(*FailureDetail_SymlinkAction); ok {
		return x.SymlinkAction
	}
	return nil
}

func (x *FailureDetail) GetCppLink() *CppLink {
	if x, ok := x.GetCategory().(*FailureDetail_CppLink); ok {
		return x.CppLink
	}
	return nil
}

func (x *FailureDetail) GetLtoAction() *LtoAction {
	if x, ok := x.GetCategory().(*FailureDetail_LtoAction); ok {
		return x.LtoAction
	}
	return nil
}

func (x *FailureDetail) GetTestAction() *TestAction {
	if x, ok := x.GetCategory().(*FailureDetail_TestAction); ok {
		return x.TestAction
	}
	return nil
}

func (x *FailureDetail) GetWorker() *Worker {
	if x, ok := x.GetCategory().(*FailureDetail_Worker); ok {
		return x.Worker
	}
	return nil
}

func (x *FailureDetail) GetAnalysis() *Analysis {
	if x, ok := x.GetCategory().(*FailureDetail_Analysis); ok {
		return x.Analysis
	}
	return nil
}

func (x *FailureDetail) GetPackageLoading() *PackageLoading {
	if x, ok := x.GetCategory().(*FailureDetail_PackageLoading); ok {
		return x.PackageLoading
	}
	return nil
}

func (x *FailureDetail) GetToolchain() *Toolchain {
	if x, ok := x.GetCategory().(*FailureDetail_Toolchain); ok {
		return x.Toolchain
	}
	return nil
}

func (x *FailureDetail) GetStarlarkLoading() *StarlarkLoading {
	if x, ok := x.GetCategory().(*FailureDetail_StarlarkLoading); ok {
		return x.StarlarkLoading
	}
	return nil
}

func (x *FailureDetail) GetExternalDeps() *ExternalDeps {
	if x, ok := x.GetCategory().(*FailureDetail_ExternalDeps); ok {
		return x.ExternalDeps
	}
	return nil
}

func (x *FailureDetail) GetDiffAwareness() *DiffAwareness {
	if x, ok := x.GetCategory().(*FailureDetail_DiffAwareness); ok {
		return x.DiffAwareness
	}
	return nil
}

func (x *FailureDetail) GetModqueryCommand() *ModqueryCommand {
	if x, ok := x.GetCategory().(*FailureDetail_ModqueryCommand); ok {
		return x.ModqueryCommand
	}
	return nil
}

func (x *FailureDetail) GetBuildReport() *BuildReport {
	if x, ok := x.GetCategory().(*FailureDetail_BuildReport); ok {
		return x.BuildReport
	}
	return nil
}

type isFailureDetail_Category interface {
	isFailureDetail_Category()
}

type FailureDetail_Interrupted struct {
	Interrupted *Interrupted `protobuf:"bytes,101,opt,name=interrupted,proto3,oneof"`
}

type FailureDetail_ExternalRepository struct {
	ExternalRepository *ExternalRepository `protobuf:"bytes,103,opt,name=external_repository,json=externalRepository,proto3,oneof"`
}

type FailureDetail_BuildProgress struct {
	BuildProgress *BuildProgress `protobuf:"bytes,104,opt,name=build_progress,json=buildProgress,proto3,oneof"`
}

type FailureDetail_RemoteOptions struct {
	RemoteOptions *RemoteOptions `protobuf:"bytes,106,opt,name=remote_options,json=remoteOptions,proto3,oneof"`
}

type FailureDetail_ClientEnvironment struct {
	ClientEnvironment *ClientEnvironment `protobuf:"bytes,107,opt,name=client_environment,json=clientEnvironment,proto3,oneof"`
}

type FailureDetail_Crash struct {
	Crash *Crash `protobuf:"bytes,108,opt,name=crash,proto3,oneof"`
}

type FailureDetail_SymlinkForest struct {
	SymlinkForest *SymlinkForest `protobuf:"bytes,110,opt,name=symlink_forest,json=symlinkForest,proto3,oneof"`
}

type FailureDetail_PackageOptions struct {
	PackageOptions *PackageOptions `protobuf:"bytes,114,opt,name=package_options,json=packageOptions,proto3,oneof"`
}

type FailureDetail_RemoteExecution struct {
	RemoteExecution *RemoteExecution `protobuf:"bytes,115,opt,name=remote_execution,json=remoteExecution,proto3,oneof"`
}

type FailureDetail_Execution struct {
	Execution *Execution `protobuf:"bytes,116,opt,name=execution,proto3,oneof"`
}

type FailureDetail_Workspaces struct {
	Workspaces *Workspaces `protobuf:"bytes,117,opt,name=workspaces,proto3,oneof"`
}

type FailureDetail_CrashOptions struct {
	CrashOptions *CrashOptions `protobuf:"bytes,118,opt,name=crash_options,json=crashOptions,proto3,oneof"`
}

type FailureDetail_Filesystem struct {
	Filesystem *Filesystem `protobuf:"bytes,119,opt,name=filesystem,proto3,oneof"`
}

type FailureDetail_ExecutionOptions struct {
	ExecutionOptions *ExecutionOptions `protobuf:"bytes,121,opt,name=execution_options,json=executionOptions,proto3,oneof"`
}

type FailureDetail_Command struct {
	Command *Command `protobuf:"bytes,122,opt,name=command,proto3,oneof"`
}

type FailureDetail_Spawn struct {
	Spawn *Spawn `protobuf:"bytes,123,opt,name=spawn,proto3,oneof"`
}

type FailureDetail_GrpcServer struct {
	GrpcServer *GrpcServer `protobuf:"bytes,124,opt,name=grpc_server,json=grpcServer,proto3,oneof"`
}

type FailureDetail_CanonicalizeFlags struct {
	CanonicalizeFlags *CanonicalizeFlags `protobuf:"bytes,125,opt,name=canonicalize_flags,json=canonicalizeFlags,proto3,oneof"`
}

type FailureDetail_BuildConfiguration struct {
	BuildConfiguration *BuildConfiguration `protobuf:"bytes,126,opt,name=build_configuration,json=buildConfiguration,proto3,oneof"`
}

type FailureDetail_InfoCommand struct {
	InfoCommand *InfoCommand `protobuf:"bytes,127,opt,name=info_command,json=infoCommand,proto3,oneof"`
}

type FailureDetail_MemoryOptions struct {
	MemoryOptions *MemoryOptions `protobuf:"bytes,129,opt,name=memory_options,json=memoryOptions,proto3,oneof"`
}

type FailureDetail_Query struct {
	Query *Query `protobuf:"bytes,130,opt,name=query,proto3,oneof"`
}

type FailureDetail_LocalExecution struct {
	LocalExecution *LocalExecution `protobuf:"bytes,132,opt,name=local_execution,json=localExecution,proto3,oneof"`
}

type FailureDetail_ActionCache struct {
	ActionCache *ActionCache `protobuf:"bytes,134,opt,name=action_cache,json=actionCache,proto3,oneof"`
}

type FailureDetail_FetchCommand struct {
	FetchCommand *FetchCommand `protobuf:"bytes,135,opt,name=fetch_command,json=fetchCommand,proto3,oneof"`
}

type FailureDetail_SyncCommand struct {
	SyncCommand *SyncCommand `protobuf:"bytes,136,opt,name=sync_command,json=syncCommand,proto3,oneof"`
}

type FailureDetail_Sandbox struct {
	Sandbox *Sandbox `protobuf:"bytes,137,opt,name=sandbox,proto3,oneof"`
}

type FailureDetail_IncludeScanning struct {
	IncludeScanning *IncludeScanning `protobuf:"bytes,139,opt,name=include_scanning,json=includeScanning,proto3,oneof"`
}

type FailureDetail_TestCommand struct {
	TestCommand *TestCommand `protobuf:"bytes,140,opt,name=test_command,json=testCommand,proto3,oneof"`
}

type FailureDetail_ActionQuery struct {
	ActionQuery *ActionQuery `protobuf:"bytes,141,opt,name=action_query,json=actionQuery,proto3,oneof"`
}

type FailureDetail_TargetPatterns struct {
	TargetPatterns *TargetPatterns `protobuf:"bytes,142,opt,name=target_patterns,json=targetPatterns,proto3,oneof"`
}

type FailureDetail_CleanCommand struct {
	CleanCommand *CleanCommand `protobuf:"bytes,144,opt,name=clean_command,json=cleanCommand,proto3,oneof"`
}

type FailureDetail_ConfigCommand struct {
	ConfigCommand *ConfigCommand `protobuf:"bytes,145,opt,name=config_command,json=configCommand,proto3,oneof"`
}

type FailureDetail_ConfigurableQuery struct {
	ConfigurableQuery *ConfigurableQuery `protobuf:"bytes,146,opt,name=configurable_query,json=configurableQuery,proto3,oneof"`
}

type FailureDetail_DumpCommand struct {
	DumpCommand *DumpCommand `protobuf:"bytes,147,opt,name=dump_command,json=dumpCommand,proto3,oneof"`
}

type FailureDetail_HelpCommand struct {
	HelpCommand *HelpCommand `protobuf:"bytes,148,opt,name=help_command,json=helpCommand,proto3,oneof"`
}

type FailureDetail_MobileInstall struct {
	MobileInstall *MobileInstall `protobuf:"bytes,150,opt,name=mobile_install,json=mobileInstall,proto3,oneof"`
}

type FailureDetail_ProfileCommand struct {
	ProfileCommand *ProfileCommand `protobuf:"bytes,151,opt,name=profile_command,json=profileCommand,proto3,oneof"`
}

type FailureDetail_RunCommand struct {
	RunCommand *RunCommand `protobuf:"bytes,152,opt,name=run_command,json=runCommand,proto3,oneof"`
}

type FailureDetail_VersionCommand struct {
	VersionCommand *VersionCommand `protobuf:"bytes,153,opt,name=version_command,json=versionCommand,proto3,oneof"`
}

type FailureDetail_PrintActionCommand struct {
	PrintActionCommand *PrintActionCommand `protobuf:"bytes,154,opt,name=print_action_command,json=printActionCommand,proto3,oneof"`
}

type FailureDetail_WorkspaceStatus struct {
	WorkspaceStatus *WorkspaceStatus `protobuf:"bytes,158,opt,name=workspace_status,json=workspaceStatus,proto3,oneof"`
}

type FailureDetail_JavaCompile struct {
	JavaCompile *JavaCompile `protobuf:"bytes,159,opt,name=java_compile,json=javaCompile,proto3,oneof"`
}

type FailureDetail_ActionRewinding struct {
	ActionRewinding *ActionRewinding `protobuf:"bytes,160,opt,name=action_rewinding,json=actionRewinding,proto3,oneof"`
}

type FailureDetail_CppCompile struct {
	CppCompile *CppCompile `protobuf:"bytes,161,opt,name=cpp_compile,json=cppCompile,proto3,oneof"`
}

type FailureDetail_StarlarkAction struct {
	StarlarkAction *StarlarkAction `protobuf:"bytes,162,opt,name=starlark_action,json=starlarkAction,proto3,oneof"`
}

type FailureDetail_NinjaAction struct {
	NinjaAction *NinjaAction `protobuf:"bytes,163,opt,name=ninja_action,json=ninjaAction,proto3,oneof"`
}

type FailureDetail_DynamicExecution struct {
	DynamicExecution *DynamicExecution `protobuf:"bytes,164,opt,name=dynamic_execution,json=dynamicExecution,proto3,oneof"`
}

type FailureDetail_FailAction struct {
	FailAction *FailAction `protobuf:"bytes,166,opt,name=fail_action,json=failAction,proto3,oneof"`
}

type FailureDetail_SymlinkAction struct {
	SymlinkAction *SymlinkAction `protobuf:"bytes,167,opt,name=symlink_action,json=symlinkAction,proto3,oneof"`
}

type FailureDetail_CppLink struct {
	CppLink *CppLink `protobuf:"bytes,168,opt,name=cpp_link,json=cppLink,proto3,oneof"`
}

type FailureDetail_LtoAction struct {
	LtoAction *LtoAction `protobuf:"bytes,169,opt,name=lto_action,json=ltoAction,proto3,oneof"`
}

type FailureDetail_TestAction struct {
	TestAction *TestAction `protobuf:"bytes,172,opt,name=test_action,json=testAction,proto3,oneof"`
}

type FailureDetail_Worker struct {
	Worker *Worker `protobuf:"bytes,173,opt,name=worker,proto3,oneof"`
}

type FailureDetail_Analysis struct {
	Analysis *Analysis `protobuf:"bytes,174,opt,name=analysis,proto3,oneof"`
}

type FailureDetail_PackageLoading struct {
	PackageLoading *PackageLoading `protobuf:"bytes,175,opt,name=package_loading,json=packageLoading,proto3,oneof"`
}

type FailureDetail_Toolchain struct {
	Toolchain *Toolchain `protobuf:"bytes,177,opt,name=toolchain,proto3,oneof"`
}

type FailureDetail_StarlarkLoading struct {
	StarlarkLoading *StarlarkLoading `protobuf:"bytes,179,opt,name=starlark_loading,json=starlarkLoading,proto3,oneof"`
}

type FailureDetail_ExternalDeps struct {
	ExternalDeps *ExternalDeps `protobuf:"bytes,181,opt,name=external_deps,json=externalDeps,proto3,oneof"`
}

type FailureDetail_DiffAwareness struct {
	DiffAwareness *DiffAwareness `protobuf:"bytes,182,opt,name=diff_awareness,json=diffAwareness,proto3,oneof"`
}

type FailureDetail_ModqueryCommand struct {
	ModqueryCommand *ModqueryCommand `protobuf:"bytes,183,opt,name=modquery_command,json=modqueryCommand,proto3,oneof"`
}

type FailureDetail_BuildReport struct {
	BuildReport *BuildReport `protobuf:"bytes,184,opt,name=build_report,json=buildReport,proto3,oneof"`
}

func (*FailureDetail_Interrupted) isFailureDetail_Category() {}

func (*FailureDetail_ExternalRepository) isFailureDetail_Category() {}

func (*FailureDetail_BuildProgress) isFailureDetail_Category() {}

func (*FailureDetail_RemoteOptions) isFailureDetail_Category() {}

func (*FailureDetail_ClientEnvironment) isFailureDetail_Category() {}

func (*FailureDetail_Crash) isFailureDetail_Category() {}

func (*FailureDetail_SymlinkForest) isFailureDetail_Category() {}

func (*FailureDetail_PackageOptions) isFailureDetail_Category() {}

func (*FailureDetail_RemoteExecution) isFailureDetail_Category() {}

func (*FailureDetail_Execution) isFailureDetail_Category() {}

func (*FailureDetail_Workspaces) isFailureDetail_Category() {}

func (*FailureDetail_CrashOptions) isFailureDetail_Category() {}

func (*FailureDetail_Filesystem) isFailureDetail_Category() {}

func (*FailureDetail_ExecutionOptions) isFailureDetail_Category() {}

func (*FailureDetail_Command) isFailureDetail_Category() {}

func (*FailureDetail_Spawn) isFailureDetail_Category() {}

func (*FailureDetail_GrpcServer) isFailureDetail_Category() {}

func (*FailureDetail_CanonicalizeFlags) isFailureDetail_Category() {}

func (*FailureDetail_BuildConfiguration) isFailureDetail_Category() {}

func (*FailureDetail_InfoCommand) isFailureDetail_Category() {}

func (*FailureDetail_MemoryOptions) isFailureDetail_Category() {}

func (*FailureDetail_Query) isFailureDetail_Category() {}

func (*FailureDetail_LocalExecution) isFailureDetail_Category() {}

func (*FailureDetail_ActionCache) isFailureDetail_Category() {}

func (*FailureDetail_FetchCommand) isFailureDetail_Category() {}

func (*FailureDetail_SyncCommand) isFailureDetail_Category() {}

func (*FailureDetail_Sandbox) isFailureDetail_Category() {}

func (*FailureDetail_IncludeScanning) isFailureDetail_Category() {}

func (*FailureDetail_TestCommand) isFailureDetail_Category() {}

func (*FailureDetail_ActionQuery) isFailureDetail_Category() {}

func (*FailureDetail_TargetPatterns) isFailureDetail_Category() {}

func (*FailureDetail_CleanCommand) isFailureDetail_Category() {}

func (*FailureDetail_ConfigCommand) isFailureDetail_Category() {}

func (*FailureDetail_ConfigurableQuery) isFailureDetail_Category() {}

func (*FailureDetail_DumpCommand) isFailureDetail_Category() {}

func (*FailureDetail_HelpCommand) isFailureDetail_Category() {}

func (*FailureDetail_MobileInstall) isFailureDetail_Category() {}

func (*FailureDetail_ProfileCommand) isFailureDetail_Category() {}

func (*FailureDetail_RunCommand) isFailureDetail_Category() {}

func (*FailureDetail_VersionCommand) isFailureDetail_Category() {}

func (*FailureDetail_PrintActionCommand) isFailureDetail_Category() {}

func (*FailureDetail_WorkspaceStatus) isFailureDetail_Category() {}

func (*FailureDetail_JavaCompile) isFailureDetail_Category() {}

func (*FailureDetail_ActionRewinding) isFailureDetail_Category() {}

func (*FailureDetail_CppCompile) isFailureDetail_Category() {}

func (*FailureDetail_StarlarkAction) isFailureDetail_Category() {}

func (*FailureDetail_NinjaAction) isFailureDetail_Category() {}

func (*FailureDetail_DynamicExecution) isFailureDetail_Category() {}

func (*FailureDetail_FailAction) isFailureDetail_Category() {}

func (*FailureDetail_SymlinkAction) isFailureDetail_Category() {}

func (*FailureDetail_CppLink) isFailureDetail_Category() {}

func (*FailureDetail_LtoAction) isFailureDetail_Category() {}

func (*FailureDetail_TestAction) isFailureDetail_Category() {}

func (*FailureDetail_Worker) isFailureDetail_Category() {}

func (*FailureDetail_Analysis) isFailureDetail_Category() {}

func (*FailureDetail_PackageLoading) isFailureDetail_Category() {}

func (*FailureDetail_Toolchain) isFailureDetail_Category() {}

func (*FailureDetail_StarlarkLoading) isFailureDetail_Category() {}

func (*FailureDetail_ExternalDeps) isFailureDetail_Category() {}

func (*FailureDetail_DiffAwareness) isFailureDetail_Category() {}

func (*FailureDetail_ModqueryCommand) isFailureDetail_Category() {}

func (*FailureDetail_BuildReport) isFailureDetail_Category() {}

type Interrupted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Interrupted_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Interrupted_Code" json:"code,omitempty"`
}

func (x *Interrupted) Reset() {
	*x = Interrupted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interrupted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interrupted) ProtoMessage() {}

func (x *Interrupted) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interrupted.ProtoReflect.Descriptor instead.
func (*Interrupted) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{2}
}

func (x *Interrupted) GetCode() Interrupted_Code {
	if x != nil {
		return x.Code
	}
	return Interrupted_INTERRUPTED_UNKNOWN
}

type Spawn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          Spawn_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Spawn_Code" json:"code,omitempty"`
	Catastrophic  bool       `protobuf:"varint,2,opt,name=catastrophic,proto3" json:"catastrophic,omitempty"`
	SpawnExitCode int32      `protobuf:"varint,3,opt,name=spawn_exit_code,json=spawnExitCode,proto3" json:"spawn_exit_code,omitempty"`
}

func (x *Spawn) Reset() {
	*x = Spawn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spawn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spawn) ProtoMessage() {}

func (x *Spawn) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spawn.ProtoReflect.Descriptor instead.
func (*Spawn) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{3}
}

func (x *Spawn) GetCode() Spawn_Code {
	if x != nil {
		return x.Code
	}
	return Spawn_SPAWN_UNKNOWN
}

func (x *Spawn) GetCatastrophic() bool {
	if x != nil {
		return x.Catastrophic
	}
	return false
}

func (x *Spawn) GetSpawnExitCode() int32 {
	if x != nil {
		return x.SpawnExitCode
	}
	return 0
}

type ExternalRepository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ExternalRepository_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ExternalRepository_Code" json:"code,omitempty"`
}

func (x *ExternalRepository) Reset() {
	*x = ExternalRepository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalRepository) ProtoMessage() {}

func (x *ExternalRepository) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalRepository.ProtoReflect.Descriptor instead.
func (*ExternalRepository) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{4}
}

func (x *ExternalRepository) GetCode() ExternalRepository_Code {
	if x != nil {
		return x.Code
	}
	return ExternalRepository_EXTERNAL_REPOSITORY_UNKNOWN
}

type BuildProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code BuildProgress_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.BuildProgress_Code" json:"code,omitempty"`
}

func (x *BuildProgress) Reset() {
	*x = BuildProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildProgress) ProtoMessage() {}

func (x *BuildProgress) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildProgress.ProtoReflect.Descriptor instead.
func (*BuildProgress) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{5}
}

func (x *BuildProgress) GetCode() BuildProgress_Code {
	if x != nil {
		return x.Code
	}
	return BuildProgress_BUILD_PROGRESS_UNKNOWN
}

type RemoteOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code RemoteOptions_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.RemoteOptions_Code" json:"code,omitempty"`
}

func (x *RemoteOptions) Reset() {
	*x = RemoteOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteOptions) ProtoMessage() {}

func (x *RemoteOptions) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteOptions.ProtoReflect.Descriptor instead.
func (*RemoteOptions) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{6}
}

func (x *RemoteOptions) GetCode() RemoteOptions_Code {
	if x != nil {
		return x.Code
	}
	return RemoteOptions_REMOTE_OPTIONS_UNKNOWN
}

type ClientEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ClientEnvironment_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ClientEnvironment_Code" json:"code,omitempty"`
}

func (x *ClientEnvironment) Reset() {
	*x = ClientEnvironment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientEnvironment) ProtoMessage() {}

func (x *ClientEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientEnvironment.ProtoReflect.Descriptor instead.
func (*ClientEnvironment) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{7}
}

func (x *ClientEnvironment) GetCode() ClientEnvironment_Code {
	if x != nil {
		return x.Code
	}
	return ClientEnvironment_CLIENT_ENVIRONMENT_UNKNOWN
}

type Crash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   Crash_Code   `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Crash_Code" json:"code,omitempty"`
	Causes []*Throwable `protobuf:"bytes,2,rep,name=causes,proto3" json:"causes,omitempty"`
}

func (x *Crash) Reset() {
	*x = Crash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crash) ProtoMessage() {}

func (x *Crash) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crash.ProtoReflect.Descriptor instead.
func (*Crash) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{8}
}

func (x *Crash) GetCode() Crash_Code {
	if x != nil {
		return x.Code
	}
	return Crash_CRASH_UNKNOWN
}

func (x *Crash) GetCauses() []*Throwable {
	if x != nil {
		return x.Causes
	}
	return nil
}

type Throwable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThrowableClass string   `protobuf:"bytes,1,opt,name=throwable_class,json=throwableClass,proto3" json:"throwable_class,omitempty"`
	Message        string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	StackTrace     []string `protobuf:"bytes,3,rep,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`
}

func (x *Throwable) Reset() {
	*x = Throwable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Throwable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Throwable) ProtoMessage() {}

func (x *Throwable) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Throwable.ProtoReflect.Descriptor instead.
func (*Throwable) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{9}
}

func (x *Throwable) GetThrowableClass() string {
	if x != nil {
		return x.ThrowableClass
	}
	return ""
}

func (x *Throwable) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Throwable) GetStackTrace() []string {
	if x != nil {
		return x.StackTrace
	}
	return nil
}

type SymlinkForest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SymlinkForest_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.SymlinkForest_Code" json:"code,omitempty"`
}

func (x *SymlinkForest) Reset() {
	*x = SymlinkForest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymlinkForest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymlinkForest) ProtoMessage() {}

func (x *SymlinkForest) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymlinkForest.ProtoReflect.Descriptor instead.
func (*SymlinkForest) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{10}
}

func (x *SymlinkForest) GetCode() SymlinkForest_Code {
	if x != nil {
		return x.Code
	}
	return SymlinkForest_SYMLINK_FOREST_UNKNOWN
}

type BuildReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code BuildReport_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.BuildReport_Code" json:"code,omitempty"`
}

func (x *BuildReport) Reset() {
	*x = BuildReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildReport) ProtoMessage() {}

func (x *BuildReport) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildReport.ProtoReflect.Descriptor instead.
func (*BuildReport) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{11}
}

func (x *BuildReport) GetCode() BuildReport_Code {
	if x != nil {
		return x.Code
	}
	return BuildReport_BUILD_REPORT_UNKNOWN
}

type PackageOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code PackageOptions_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.PackageOptions_Code" json:"code,omitempty"`
}

func (x *PackageOptions) Reset() {
	*x = PackageOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageOptions) ProtoMessage() {}

func (x *PackageOptions) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageOptions.ProtoReflect.Descriptor instead.
func (*PackageOptions) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{12}
}

func (x *PackageOptions) GetCode() PackageOptions_Code {
	if x != nil {
		return x.Code
	}
	return PackageOptions_PACKAGE_OPTIONS_UNKNOWN
}

type RemoteExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code RemoteExecution_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.RemoteExecution_Code" json:"code,omitempty"`
}

func (x *RemoteExecution) Reset() {
	*x = RemoteExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteExecution) ProtoMessage() {}

func (x *RemoteExecution) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteExecution.ProtoReflect.Descriptor instead.
func (*RemoteExecution) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{13}
}

func (x *RemoteExecution) GetCode() RemoteExecution_Code {
	if x != nil {
		return x.Code
	}
	return RemoteExecution_REMOTE_EXECUTION_UNKNOWN
}

type Execution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Execution_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Execution_Code" json:"code,omitempty"`
}

func (x *Execution) Reset() {
	*x = Execution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution) ProtoMessage() {}

func (x *Execution) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution.ProtoReflect.Descriptor instead.
func (*Execution) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{14}
}

func (x *Execution) GetCode() Execution_Code {
	if x != nil {
		return x.Code
	}
	return Execution_EXECUTION_UNKNOWN
}

type Workspaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Workspaces_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Workspaces_Code" json:"code,omitempty"`
}

func (x *Workspaces) Reset() {
	*x = Workspaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspaces) ProtoMessage() {}

func (x *Workspaces) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspaces.ProtoReflect.Descriptor instead.
func (*Workspaces) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{15}
}

func (x *Workspaces) GetCode() Workspaces_Code {
	if x != nil {
		return x.Code
	}
	return Workspaces_WORKSPACES_UNKNOWN
}

type CrashOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CrashOptions_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.CrashOptions_Code" json:"code,omitempty"`
}

func (x *CrashOptions) Reset() {
	*x = CrashOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrashOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrashOptions) ProtoMessage() {}

func (x *CrashOptions) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrashOptions.ProtoReflect.Descriptor instead.
func (*CrashOptions) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{16}
}

func (x *CrashOptions) GetCode() CrashOptions_Code {
	if x != nil {
		return x.Code
	}
	return CrashOptions_CRASH_OPTIONS_UNKNOWN
}

type Filesystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Filesystem_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Filesystem_Code" json:"code,omitempty"`
}

func (x *Filesystem) Reset() {
	*x = Filesystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filesystem) ProtoMessage() {}

func (x *Filesystem) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filesystem.ProtoReflect.Descriptor instead.
func (*Filesystem) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{17}
}

func (x *Filesystem) GetCode() Filesystem_Code {
	if x != nil {
		return x.Code
	}
	return Filesystem_FILESYSTEM_UNKNOWN
}

type ExecutionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ExecutionOptions_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ExecutionOptions_Code" json:"code,omitempty"`
}

func (x *ExecutionOptions) Reset() {
	*x = ExecutionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionOptions) ProtoMessage() {}

func (x *ExecutionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionOptions.ProtoReflect.Descriptor instead.
func (*ExecutionOptions) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{18}
}

func (x *ExecutionOptions) GetCode() ExecutionOptions_Code {
	if x != nil {
		return x.Code
	}
	return ExecutionOptions_EXECUTION_OPTIONS_UNKNOWN
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Command_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Command_Code" json:"code,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{19}
}

func (x *Command) GetCode() Command_Code {
	if x != nil {
		return x.Code
	}
	return Command_COMMAND_FAILURE_UNKNOWN
}

type GrpcServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code GrpcServer_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.GrpcServer_Code" json:"code,omitempty"`
}

func (x *GrpcServer) Reset() {
	*x = GrpcServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcServer) ProtoMessage() {}

func (x *GrpcServer) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcServer.ProtoReflect.Descriptor instead.
func (*GrpcServer) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{20}
}

func (x *GrpcServer) GetCode() GrpcServer_Code {
	if x != nil {
		return x.Code
	}
	return GrpcServer_GRPC_SERVER_UNKNOWN
}

type CanonicalizeFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CanonicalizeFlags_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.CanonicalizeFlags_Code" json:"code,omitempty"`
}

func (x *CanonicalizeFlags) Reset() {
	*x = CanonicalizeFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanonicalizeFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanonicalizeFlags) ProtoMessage() {}

func (x *CanonicalizeFlags) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanonicalizeFlags.ProtoReflect.Descriptor instead.
func (*CanonicalizeFlags) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{21}
}

func (x *CanonicalizeFlags) GetCode() CanonicalizeFlags_Code {
	if x != nil {
		return x.Code
	}
	return CanonicalizeFlags_CANONICALIZE_FLAGS_UNKNOWN
}

type BuildConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code BuildConfiguration_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.BuildConfiguration_Code" json:"code,omitempty"`
}

func (x *BuildConfiguration) Reset() {
	*x = BuildConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildConfiguration) ProtoMessage() {}

func (x *BuildConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildConfiguration.ProtoReflect.Descriptor instead.
func (*BuildConfiguration) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{22}
}

func (x *BuildConfiguration) GetCode() BuildConfiguration_Code {
	if x != nil {
		return x.Code
	}
	return BuildConfiguration_BUILD_CONFIGURATION_UNKNOWN
}

type InfoCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code InfoCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.InfoCommand_Code" json:"code,omitempty"`
}

func (x *InfoCommand) Reset() {
	*x = InfoCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoCommand) ProtoMessage() {}

func (x *InfoCommand) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoCommand.ProtoReflect.Descriptor instead.
func (*InfoCommand) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{23}
}

func (x *InfoCommand) GetCode() InfoCommand_Code {
	if x != nil {
		return x.Code
	}
	return InfoCommand_INFO_COMMAND_UNKNOWN
}

type MemoryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code MemoryOptions_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.MemoryOptions_Code" json:"code,omitempty"`
}

func (x *MemoryOptions) Reset() {
	*x = MemoryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryOptions) ProtoMessage() {}

func (x *MemoryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryOptions.ProtoReflect.Descriptor instead.
func (*MemoryOptions) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{24}
}

func (x *MemoryOptions) GetCode() MemoryOptions_Code {
	if x != nil {
		return x.Code
	}
	return MemoryOptions_MEMORY_OPTIONS_UNKNOWN
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Query_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Query_Code" json:"code,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{25}
}

func (x *Query) GetCode() Query_Code {
	if x != nil {
		return x.Code
	}
	return Query_QUERY_UNKNOWN
}

type LocalExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code LocalExecution_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.LocalExecution_Code" json:"code,omitempty"`
}

func (x *LocalExecution) Reset() {
	*x = LocalExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalExecution) ProtoMessage() {}

func (x *LocalExecution) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalExecution.ProtoReflect.Descriptor instead.
func (*LocalExecution) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{26}
}

func (x *LocalExecution) GetCode() LocalExecution_Code {
	if x != nil {
		return x.Code
	}
	return LocalExecution_LOCAL_EXECUTION_UNKNOWN
}

type ActionCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ActionCache_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ActionCache_Code" json:"code,omitempty"`
}

func (x *ActionCache) Reset() {
	*x = ActionCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCache) ProtoMessage() {}

func (x *ActionCache) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCache.ProtoReflect.Descriptor instead.
func (*ActionCache) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{27}
}

func (x *ActionCache) GetCode() ActionCache_Code {
	if x != nil {
		return x.Code
	}
	return ActionCache_ACTION_CACHE_UNKNOWN
}

type FetchCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code FetchCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.FetchCommand_Code" json:"code,omitempty"`
}

func (x *FetchCommand) Reset() {
	*x = FetchCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCommand) ProtoMessage() {}

func (x *FetchCommand) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCommand.ProtoReflect.Descriptor instead.
func (*FetchCommand) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{28}
}

func (x *FetchCommand) GetCode() FetchCommand_Code {
	if x != nil {
		return x.Code
	}
	return FetchCommand_FETCH_COMMAND_UNKNOWN
}

type SyncCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SyncCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.SyncCommand_Code" json:"code,omitempty"`
}

func (x *SyncCommand) Reset() {
	*x = SyncCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncCommand) ProtoMessage() {}

func (x *SyncCommand) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncCommand.ProtoReflect.Descriptor instead.
func (*SyncCommand) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{29}
}

func (x *SyncCommand) GetCode() SyncCommand_Code {
	if x != nil {
		return x.Code
	}
	return SyncCommand_SYNC_COMMAND_UNKNOWN
}

type Sandbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Sandbox_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Sandbox_Code" json:"code,omitempty"`
}

func (x *Sandbox) Reset() {
	*x = Sandbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sandbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sandbox) ProtoMessage() {}

func (x *Sandbox) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sandbox.ProtoReflect.Descriptor instead.
func (*Sandbox) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{30}
}

func (x *Sandbox) GetCode() Sandbox_Code {
	if x != nil {
		return x.Code
	}
	return Sandbox_SANDBOX_FAILURE_UNKNOWN
}

type IncludeScanning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code               IncludeScanning_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.IncludeScanning_Code" json:"code,omitempty"`
	PackageLoadingCode PackageLoading_Code  `protobuf:"varint,2,opt,name=package_loading_code,json=packageLoadingCode,proto3,enum=failure_details.PackageLoading_Code" json:"package_loading_code,omitempty"`
}

func (x *IncludeScanning) Reset() {
	*x = IncludeScanning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncludeScanning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncludeScanning) ProtoMessage() {}

func (x *IncludeScanning) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncludeScanning.ProtoReflect.Descriptor instead.
func (*IncludeScanning) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{31}
}

func (x *IncludeScanning) GetCode() IncludeScanning_Code {
	if x != nil {
		return x.Code
	}
	return IncludeScanning_INCLUDE_SCANNING_UNKNOWN
}

func (x *IncludeScanning) GetPackageLoadingCode() PackageLoading_Code {
	if x != nil {
		return x.PackageLoadingCode
	}
	return PackageLoading_PACKAGE_LOADING_UNKNOWN
}

type TestCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code TestCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.TestCommand_Code" json:"code,omitempty"`
}

func (x *TestCommand) Reset() {
	*x = TestCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCommand) ProtoMessage() {}

func (x *TestCommand) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCommand.ProtoReflect.Descriptor instead.
func (*TestCommand) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{32}
}

func (x *TestCommand) GetCode() TestCommand_Code {
	if x != nil {
		return x.Code
	}
	return TestCommand_TEST_COMMAND_UNKNOWN
}

type ActionQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ActionQuery_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ActionQuery_Code" json:"code,omitempty"`
}

func (x *ActionQuery) Reset() {
	*x = ActionQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionQuery) ProtoMessage() {}

func (x *ActionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionQuery.ProtoReflect.Descriptor instead.
func (*ActionQuery) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{33}
}

func (x *ActionQuery) GetCode() ActionQuery_Code {
	if x != nil {
		return x.Code
	}
	return ActionQuery_ACTION_QUERY_UNKNOWN
}

type TargetPatterns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code TargetPatterns_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.TargetPatterns_Code" json:"code,omitempty"`
}

func (x *TargetPatterns) Reset() {
	*x = TargetPatterns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetPatterns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetPatterns) ProtoMessage() {}

func (x *TargetPatterns) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetPatterns.ProtoReflect.Descriptor instead.
func (*TargetPatterns) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{34}
}

func (x *TargetPatterns) GetCode() TargetPatterns_Code {
	if x != nil {
		return x.Code
	}
	return TargetPatterns_TARGET_PATTERNS_UNKNOWN
}

type CleanCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CleanCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.CleanCommand_Code" json:"code,omitempty"`
}

func (x *CleanCommand) Reset() {
	*x = CleanCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanCommand) ProtoMessage() {}

func (x *CleanCommand) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanCommand.ProtoReflect.Descriptor instead.
func (*CleanCommand) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{35}
}

func (x *CleanCommand) GetCode() CleanCommand_Code {
	if x != nil {
		return x.Code
	}
	return CleanCommand_CLEAN_COMMAND_UNKNOWN
}

type ConfigCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ConfigCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ConfigCommand_Code" json:"code,omitempty"`
}

func (x *ConfigCommand) Reset() {
	*x = ConfigCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigCommand) ProtoMessage() {}

func (x *ConfigCommand) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigCommand.ProtoReflect.Descriptor instead.
func (*ConfigCommand) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{36}
}

func (x *ConfigCommand) GetCode() ConfigCommand_Code {
	if x != nil {
		return x.Code
	}
	return ConfigCommand_CONFIG_COMMAND_UNKNOWN
}

type ConfigurableQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ConfigurableQuery_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ConfigurableQuery_Code" json:"code,omitempty"`
}

func (x *ConfigurableQuery) Reset() {
	*x = ConfigurableQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurableQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurableQuery) ProtoMessage() {}

func (x *ConfigurableQuery) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurableQuery.ProtoReflect.Descriptor instead.
func (*ConfigurableQuery) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{37}
}

func (x *ConfigurableQuery) GetCode() ConfigurableQuery_Code {
	if x != nil {
		return x.Code
	}
	return ConfigurableQuery_CONFIGURABLE_QUERY_UNKNOWN
}

type DumpCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code DumpCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.DumpCommand_Code" json:"code,omitempty"`
}

func (x *DumpCommand) Reset() {
	*x = DumpCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpCommand) ProtoMessage() {}

func (x *DumpCommand) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpCommand.ProtoReflect.Descriptor instead.
func (*DumpCommand) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{38}
}

func (x *DumpCommand) GetCode() DumpCommand_Code {
	if x != nil {
		return x.Code
	}
	return DumpCommand_DUMP_COMMAND_UNKNOWN
}

type HelpCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code HelpCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.HelpCommand_Code" json:"code,omitempty"`
}

func (x *HelpCommand) Reset() {
	*x = HelpCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelpCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpCommand) ProtoMessage() {}

func (x *HelpCommand) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpCommand.ProtoReflect.Descriptor instead.
func (*HelpCommand) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{39}
}

func (x *HelpCommand) GetCode() HelpCommand_Code {
	if x != nil {
		return x.Code
	}
	return HelpCommand_HELP_COMMAND_UNKNOWN
}

type MobileInstall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code MobileInstall_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.MobileInstall_Code" json:"code,omitempty"`
}

func (x *MobileInstall) Reset() {
	*x = MobileInstall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobileInstall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobileInstall) ProtoMessage() {}

func (x *MobileInstall) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobileInstall.ProtoReflect.Descriptor instead.
func (*MobileInstall) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{40}
}

func (x *MobileInstall) GetCode() MobileInstall_Code {
	if x != nil {
		return x.Code
	}
	return MobileInstall_MOBILE_INSTALL_UNKNOWN
}

type ProfileCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ProfileCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ProfileCommand_Code" json:"code,omitempty"`
}

func (x *ProfileCommand) Reset() {
	*x = ProfileCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileCommand) ProtoMessage() {}

func (x *ProfileCommand) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileCommand.ProtoReflect.Descriptor instead.
func (*ProfileCommand) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{41}
}

func (x *ProfileCommand) GetCode() ProfileCommand_Code {
	if x != nil {
		return x.Code
	}
	return ProfileCommand_PROFILE_COMMAND_UNKNOWN
}

type RunCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code RunCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.RunCommand_Code" json:"code,omitempty"`
}

func (x *RunCommand) Reset() {
	*x = RunCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCommand) ProtoMessage() {}

func (x *RunCommand) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCommand.ProtoReflect.Descriptor instead.
func (*RunCommand) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{42}
}

func (x *RunCommand) GetCode() RunCommand_Code {
	if x != nil {
		return x.Code
	}
	return RunCommand_RUN_COMMAND_UNKNOWN
}

type VersionCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code VersionCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.VersionCommand_Code" json:"code,omitempty"`
}

func (x *VersionCommand) Reset() {
	*x = VersionCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionCommand) ProtoMessage() {}

func (x *VersionCommand) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionCommand.ProtoReflect.Descriptor instead.
func (*VersionCommand) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{43}
}

func (x *VersionCommand) GetCode() VersionCommand_Code {
	if x != nil {
		return x.Code
	}
	return VersionCommand_VERSION_COMMAND_UNKNOWN
}

type PrintActionCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code PrintActionCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.PrintActionCommand_Code" json:"code,omitempty"`
}

func (x *PrintActionCommand) Reset() {
	*x = PrintActionCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrintActionCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintActionCommand) ProtoMessage() {}

func (x *PrintActionCommand) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintActionCommand.ProtoReflect.Descriptor instead.
func (*PrintActionCommand) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{44}
}

func (x *PrintActionCommand) GetCode() PrintActionCommand_Code {
	if x != nil {
		return x.Code
	}
	return PrintActionCommand_PRINT_ACTION_COMMAND_UNKNOWN
}

type WorkspaceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code WorkspaceStatus_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.WorkspaceStatus_Code" json:"code,omitempty"`
}

func (x *WorkspaceStatus) Reset() {
	*x = WorkspaceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceStatus) ProtoMessage() {}

func (x *WorkspaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceStatus.ProtoReflect.Descriptor instead.
func (*WorkspaceStatus) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{45}
}

func (x *WorkspaceStatus) GetCode() WorkspaceStatus_Code {
	if x != nil {
		return x.Code
	}
	return WorkspaceStatus_WORKSPACE_STATUS_UNKNOWN
}

type JavaCompile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code JavaCompile_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.JavaCompile_Code" json:"code,omitempty"`
}

func (x *JavaCompile) Reset() {
	*x = JavaCompile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaCompile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaCompile) ProtoMessage() {}

func (x *JavaCompile) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaCompile.ProtoReflect.Descriptor instead.
func (*JavaCompile) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{46}
}

func (x *JavaCompile) GetCode() JavaCompile_Code {
	if x != nil {
		return x.Code
	}
	return JavaCompile_JAVA_COMPILE_UNKNOWN
}

type ActionRewinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ActionRewinding_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ActionRewinding_Code" json:"code,omitempty"`
}

func (x *ActionRewinding) Reset() {
	*x = ActionRewinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRewinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRewinding) ProtoMessage() {}

func (x *ActionRewinding) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRewinding.ProtoReflect.Descriptor instead.
func (*ActionRewinding) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{47}
}

func (x *ActionRewinding) GetCode() ActionRewinding_Code {
	if x != nil {
		return x.Code
	}
	return ActionRewinding_ACTION_REWINDING_UNKNOWN
}

type CppCompile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CppCompile_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.CppCompile_Code" json:"code,omitempty"`
}

func (x *CppCompile) Reset() {
	*x = CppCompile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppCompile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppCompile) ProtoMessage() {}

func (x *CppCompile) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppCompile.ProtoReflect.Descriptor instead.
func (*CppCompile) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{48}
}

func (x *CppCompile) GetCode() CppCompile_Code {
	if x != nil {
		return x.Code
	}
	return CppCompile_CPP_COMPILE_UNKNOWN
}

type StarlarkAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code StarlarkAction_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.StarlarkAction_Code" json:"code,omitempty"`
}

func (x *StarlarkAction) Reset() {
	*x = StarlarkAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkAction) ProtoMessage() {}

func (x *StarlarkAction) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkAction.ProtoReflect.Descriptor instead.
func (*StarlarkAction) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{49}
}

func (x *StarlarkAction) GetCode() StarlarkAction_Code {
	if x != nil {
		return x.Code
	}
	return StarlarkAction_STARLARK_ACTION_UNKNOWN
}

type NinjaAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code NinjaAction_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.NinjaAction_Code" json:"code,omitempty"`
}

func (x *NinjaAction) Reset() {
	*x = NinjaAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NinjaAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NinjaAction) ProtoMessage() {}

func (x *NinjaAction) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NinjaAction.ProtoReflect.Descriptor instead.
func (*NinjaAction) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{50}
}

func (x *NinjaAction) GetCode() NinjaAction_Code {
	if x != nil {
		return x.Code
	}
	return NinjaAction_NINJA_ACTION_UNKNOWN
}

type DynamicExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code DynamicExecution_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.DynamicExecution_Code" json:"code,omitempty"`
}

func (x *DynamicExecution) Reset() {
	*x = DynamicExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicExecution) ProtoMessage() {}

func (x *DynamicExecution) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicExecution.ProtoReflect.Descriptor instead.
func (*DynamicExecution) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{51}
}

func (x *DynamicExecution) GetCode() DynamicExecution_Code {
	if x != nil {
		return x.Code
	}
	return DynamicExecution_DYNAMIC_EXECUTION_UNKNOWN
}

type FailAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code FailAction_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.FailAction_Code" json:"code,omitempty"`
}

func (x *FailAction) Reset() {
	*x = FailAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailAction) ProtoMessage() {}

func (x *FailAction) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailAction.ProtoReflect.Descriptor instead.
func (*FailAction) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{52}
}

func (x *FailAction) GetCode() FailAction_Code {
	if x != nil {
		return x.Code
	}
	return FailAction_FAIL_ACTION_UNKNOWN
}

type SymlinkAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SymlinkAction_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.SymlinkAction_Code" json:"code,omitempty"`
}

func (x *SymlinkAction) Reset() {
	*x = SymlinkAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymlinkAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymlinkAction) ProtoMessage() {}

func (x *SymlinkAction) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymlinkAction.ProtoReflect.Descriptor instead.
func (*SymlinkAction) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{53}
}

func (x *SymlinkAction) GetCode() SymlinkAction_Code {
	if x != nil {
		return x.Code
	}
	return SymlinkAction_SYMLINK_ACTION_UNKNOWN
}

type CppLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CppLink_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.CppLink_Code" json:"code,omitempty"`
}

func (x *CppLink) Reset() {
	*x = CppLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppLink) ProtoMessage() {}

func (x *CppLink) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppLink.ProtoReflect.Descriptor instead.
func (*CppLink) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{54}
}

func (x *CppLink) GetCode() CppLink_Code {
	if x != nil {
		return x.Code
	}
	return CppLink_CPP_LINK_UNKNOWN
}

type LtoAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code LtoAction_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.LtoAction_Code" json:"code,omitempty"`
}

func (x *LtoAction) Reset() {
	*x = LtoAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LtoAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LtoAction) ProtoMessage() {}

func (x *LtoAction) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LtoAction.ProtoReflect.Descriptor instead.
func (*LtoAction) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{55}
}

func (x *LtoAction) GetCode() LtoAction_Code {
	if x != nil {
		return x.Code
	}
	return LtoAction_LTO_ACTION_UNKNOWN
}

type TestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code TestAction_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.TestAction_Code" json:"code,omitempty"`
}

func (x *TestAction) Reset() {
	*x = TestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAction) ProtoMessage() {}

func (x *TestAction) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAction.ProtoReflect.Descriptor instead.
func (*TestAction) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{56}
}

func (x *TestAction) GetCode() TestAction_Code {
	if x != nil {
		return x.Code
	}
	return TestAction_TEST_ACTION_UNKNOWN
}

type Worker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Worker_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Worker_Code" json:"code,omitempty"`
}

func (x *Worker) Reset() {
	*x = Worker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{57}
}

func (x *Worker) GetCode() Worker_Code {
	if x != nil {
		return x.Code
	}
	return Worker_WORKER_UNKNOWN
}

type Analysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Analysis_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Analysis_Code" json:"code,omitempty"`
}

func (x *Analysis) Reset() {
	*x = Analysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Analysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Analysis) ProtoMessage() {}

func (x *Analysis) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Analysis.ProtoReflect.Descriptor instead.
func (*Analysis) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{58}
}

func (x *Analysis) GetCode() Analysis_Code {
	if x != nil {
		return x.Code
	}
	return Analysis_ANALYSIS_UNKNOWN
}

type PackageLoading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code PackageLoading_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.PackageLoading_Code" json:"code,omitempty"`
}

func (x *PackageLoading) Reset() {
	*x = PackageLoading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageLoading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageLoading) ProtoMessage() {}

func (x *PackageLoading) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageLoading.ProtoReflect.Descriptor instead.
func (*PackageLoading) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{59}
}

func (x *PackageLoading) GetCode() PackageLoading_Code {
	if x != nil {
		return x.Code
	}
	return PackageLoading_PACKAGE_LOADING_UNKNOWN
}

type Toolchain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Toolchain_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.Toolchain_Code" json:"code,omitempty"`
}

func (x *Toolchain) Reset() {
	*x = Toolchain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Toolchain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Toolchain) ProtoMessage() {}

func (x *Toolchain) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Toolchain.ProtoReflect.Descriptor instead.
func (*Toolchain) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{60}
}

func (x *Toolchain) GetCode() Toolchain_Code {
	if x != nil {
		return x.Code
	}
	return Toolchain_TOOLCHAIN_UNKNOWN
}

type StarlarkLoading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code StarlarkLoading_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.StarlarkLoading_Code" json:"code,omitempty"`
}

func (x *StarlarkLoading) Reset() {
	*x = StarlarkLoading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkLoading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkLoading) ProtoMessage() {}

func (x *StarlarkLoading) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkLoading.ProtoReflect.Descriptor instead.
func (*StarlarkLoading) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{61}
}

func (x *StarlarkLoading) GetCode() StarlarkLoading_Code {
	if x != nil {
		return x.Code
	}
	return StarlarkLoading_STARLARK_LOADING_UNKNOWN
}

type ExternalDeps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ExternalDeps_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ExternalDeps_Code" json:"code,omitempty"`
}

func (x *ExternalDeps) Reset() {
	*x = ExternalDeps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalDeps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalDeps) ProtoMessage() {}

func (x *ExternalDeps) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalDeps.ProtoReflect.Descriptor instead.
func (*ExternalDeps) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{62}
}

func (x *ExternalDeps) GetCode() ExternalDeps_Code {
	if x != nil {
		return x.Code
	}
	return ExternalDeps_EXTERNAL_DEPS_UNKNOWN
}

type DiffAwareness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code DiffAwareness_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.DiffAwareness_Code" json:"code,omitempty"`
}

func (x *DiffAwareness) Reset() {
	*x = DiffAwareness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffAwareness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffAwareness) ProtoMessage() {}

func (x *DiffAwareness) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffAwareness.ProtoReflect.Descriptor instead.
func (*DiffAwareness) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{63}
}

func (x *DiffAwareness) GetCode() DiffAwareness_Code {
	if x != nil {
		return x.Code
	}
	return DiffAwareness_DIFF_AWARENESS_UNKNOWN
}

type ModqueryCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ModqueryCommand_Code `protobuf:"varint,1,opt,name=code,proto3,enum=failure_details.ModqueryCommand_Code" json:"code,omitempty"`
}

func (x *ModqueryCommand) Reset() {
	*x = ModqueryCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModqueryCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModqueryCommand) ProtoMessage() {}

func (x *ModqueryCommand) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModqueryCommand.ProtoReflect.Descriptor instead.
func (*ModqueryCommand) Descriptor() ([]byte, []int) {
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP(), []int{64}
}

func (x *ModqueryCommand) GetCode() ModqueryCommand_Code {
	if x != nil {
		return x.Code
	}
	return ModqueryCommand_MODQUERY_COMMAND_UNKNOWN
}

var file_third_party_bazel_src_main_protobuf_failure_details_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*FailureDetailMetadata)(nil),
		Field:         1078,
		Name:          "failure_details.metadata",
		Tag:           "bytes,1078,opt,name=metadata",
		Filename:      "third_party/bazel/src/main/protobuf/failure_details.proto",
	},
}

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional failure_details.FailureDetailMetadata metadata = 1078;
	E_Metadata = &file_third_party_bazel_src_main_protobuf_failure_details_proto_extTypes[0]
)

var File_third_party_bazel_src_main_protobuf_failure_details_proto protoreflect.FileDescriptor

var file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDesc = []byte{
	0x0a, 0x39, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x62, 0x61,
	0x7a, 0x65, 0x6c, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34,
	0x0a, 0x15, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xcf, 0x23, 0x0a, 0x0d, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x40, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x65, 0x64, 0x12, 0x56, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x0e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x12,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x72, 0x61, 0x73, 0x68, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x43, 0x72, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x05, 0x63, 0x72, 0x61, 0x73,
	0x68, 0x12, 0x47, 0x0a, 0x0e, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x6f, 0x72,
	0x65, 0x73, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x6c,
	0x69, 0x6e, 0x6b, 0x46, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x79, 0x6d,
	0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x72, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x0d, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x72, 0x61, 0x73, 0x68, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x72, 0x61, 0x73, 0x68, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x50, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2e, 0x0a,
	0x05, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53,
	0x70, 0x61, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x12, 0x3e, 0x0a,
	0x0b, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x7c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x53, 0x0a,
	0x12, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x48, 0x00, 0x52,
	0x11, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x56, 0x0a, 0x13, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x48, 0x0a,
	0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x84, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x42, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x18,
	0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x12, 0x4e, 0x0a, 0x10, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0c, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x42, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x48, 0x00,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73,
	0x12, 0x45, 0x0a, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6c, 0x65, 0x61, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x54, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0c, 0x64, 0x75, 0x6d, 0x70, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x68,
	0x65, 0x6c, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x94, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x0b, 0x68, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x48, 0x0a, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52,
	0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x75, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x58, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x9a, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x4e,
	0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42,
	0x0a, 0x0c, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x18, 0x9f,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6a, 0x61, 0x76, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x70, 0x70, 0x43, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x70, 0x70, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x0c, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4e, 0x69, 0x6e, 0x6a, 0x61, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x46, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x61,
	0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0e, 0x73, 0x79, 0x6d, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0xa8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x74,
	0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x4c, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x6c,
	0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x74,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x48, 0x00, 0x52, 0x08, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x45, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x70, 0x73, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x64, 0x69, 0x66, 0x66,
	0x5f, 0x61, 0x77, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x41, 0x77, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x41, 0x77, 0x61, 0x72, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x4d, 0x6f, 0x64, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x65, 0x4a, 0x04, 0x08, 0x66, 0x10, 0x67, 0x4a, 0x04,
	0x08, 0x69, 0x10, 0x6a, 0x4a, 0x04, 0x08, 0x6d, 0x10, 0x6e, 0x4a, 0x04, 0x08, 0x6f, 0x10, 0x72,
	0x4a, 0x04, 0x08, 0x78, 0x10, 0x79, 0x4a, 0x06, 0x08, 0x80, 0x01, 0x10, 0x81, 0x01, 0x4a, 0x06,
	0x08, 0x83, 0x01, 0x10, 0x84, 0x01, 0x4a, 0x06, 0x08, 0x85, 0x01, 0x10, 0x86, 0x01, 0x4a, 0x06,
	0x08, 0x8a, 0x01, 0x10, 0x8b, 0x01, 0x4a, 0x06, 0x08, 0x8f, 0x01, 0x10, 0x90, 0x01, 0x4a, 0x06,
	0x08, 0x95, 0x01, 0x10, 0x96, 0x01, 0x4a, 0x06, 0x08, 0x9b, 0x01, 0x10, 0x9e, 0x01, 0x4a, 0x06,
	0x08, 0xa5, 0x01, 0x10, 0xa6, 0x01, 0x4a, 0x06, 0x08, 0xaa, 0x01, 0x10, 0xac, 0x01, 0x4a, 0x06,
	0x08, 0xb0, 0x01, 0x10, 0xb1, 0x01, 0x4a, 0x06, 0x08, 0xb2, 0x01, 0x10, 0xb3, 0x01, 0x4a, 0x06,
	0x08, 0xb4, 0x01, 0x10, 0xb5, 0x01, 0x22, 0xa8, 0x05, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x65, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe1, 0x04,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x13, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52,
	0x55, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x08, 0x12, 0x16, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52,
	0x55, 0x50, 0x54, 0x45, 0x44, 0x10, 0x1c, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x08, 0x12, 0x1b,
	0x0a, 0x10, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x08, 0x12, 0x26, 0x0a, 0x1b, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x08, 0x12, 0x2a, 0x0a, 0x1f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x08, 0x12,
	0x29, 0x0a, 0x1e, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x08, 0x12, 0x26, 0x0a, 0x1b, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x08, 0x12, 0x1f, 0x0a, 0x14, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x08, 0x12, 0x21, 0x0a, 0x16, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x0a, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x08, 0x12, 0x23, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41,
	0x4e, 0x44, 0x10, 0x11, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x08, 0x12, 0x22, 0x0a, 0x17, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x12, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x08, 0x12,
	0x23, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4c,
	0x45, 0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x14, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x08, 0x12, 0x2c, 0x0a, 0x21, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c,
	0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x15, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x08, 0x12, 0x1b, 0x0a, 0x10, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x16, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x08, 0x12,
	0x21, 0x0a, 0x16, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x55,
	0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x17, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x08, 0x12, 0x25, 0x0a, 0x1a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x1b, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x08, 0x22, 0x04, 0x08, 0x01, 0x10, 0x03, 0x22,
	0x04, 0x08, 0x0b, 0x10, 0x10, 0x22, 0x04, 0x08, 0x13, 0x10, 0x13, 0x22, 0x04, 0x08, 0x18, 0x10,
	0x1a, 0x22, 0xc9, 0x04, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x70, 0x61, 0x77,
	0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x63,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x70, 0x61, 0x77, 0x6e,
	0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc2, 0x03, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x0d, 0x53, 0x50, 0x41, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x18, 0x0a, 0x0d, 0x4e,
	0x4f, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x01, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x12, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x18, 0x0a, 0x0d, 0x4f, 0x55, 0x54,
	0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x1b, 0x0a, 0x10, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x22,
	0x12, 0x1b, 0x0a, 0x10, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1e, 0x0a,
	0x13, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x22, 0x12, 0x29, 0x0a,
	0x1e, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58,
	0x50, 0x41, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1c, 0x0a, 0x11, 0x45, 0x58, 0x45, 0x43,
	0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x1a, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x01, 0x12, 0x2e, 0x0a, 0x23, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x49, 0x45, 0x53, 0x10, 0x0a, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x01, 0x12, 0x23, 0x0a, 0x18, 0x4e, 0x4f, 0x5f, 0x55, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0b,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x28, 0x0a, 0x1d, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0c, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x01, 0x12, 0x1a, 0x0a, 0x0f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x49,
	0x4e, 0x50, 0x55, 0x54, 0x10, 0x0d, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x22, 0x8a, 0x02,
	0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x1b, 0x45,
	0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x25, 0x12, 0x32, 0x0a, 0x27, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x44, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x01,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x20, 0x0a, 0x15, 0x42, 0x41, 0x44, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x2f, 0x0a, 0x24, 0x52, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x22, 0xad, 0x06, 0x0a, 0x0d, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe2, 0x05, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21,
	0x0a, 0x16, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x25, 0x12, 0x20, 0x0a, 0x15, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x24, 0x12, 0x2e, 0x0a, 0x23, 0x42, 0x45, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x53, 0x5f,
	0x50, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x02, 0x12, 0x20, 0x0a, 0x15, 0x42, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x23, 0x0a, 0x18, 0x42, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x23, 0x0a, 0x18, 0x42, 0x45,
	0x53, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x26, 0x12,
	0x21, 0x0a, 0x16, 0x42, 0x45, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x08, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x26, 0x12, 0x22, 0x0a, 0x17, 0x42, 0x45, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x26, 0x12, 0x25, 0x0a, 0x1a, 0x42, 0x45, 0x53, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55,
	0x50, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x26, 0x12, 0x22, 0x0a,
	0x17, 0x42, 0x45, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x26, 0x12, 0x27, 0x0a, 0x1c, 0x42, 0x45, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x0c, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x26, 0x12, 0x26, 0x0a, 0x1b, 0x42, 0x45,
	0x53, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0d, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x26, 0x12, 0x2a, 0x0a, 0x1f, 0x42, 0x45, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0e, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x2d, 0x12, 0x37,
	0x0a, 0x2c, 0x42, 0x45, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x41, 0x43,
	0x4b, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0f,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x2d, 0x12, 0x38, 0x0a, 0x2d, 0x42, 0x45, 0x53, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x10, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x2d, 0x12, 0x31, 0x0a, 0x26, 0x42, 0x45, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x13, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x2d, 0x12, 0x32, 0x0a, 0x27, 0x42, 0x45, 0x53, 0x5f, 0x55, 0x50, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x11, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x26, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x22, 0x04,
	0x08, 0x02, 0x10, 0x02, 0x22, 0x04, 0x08, 0x12, 0x10, 0x12, 0x22, 0xc9, 0x02, 0x0a, 0x0d, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21,
	0x0a, 0x16, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x25, 0x12, 0x35, 0x0a, 0x2a, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54,
	0x49, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x23, 0x0a, 0x18, 0x43, 0x52, 0x45, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x24, 0x0a,
	0x19, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x24, 0x12, 0x28, 0x0a, 0x1d, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x45,
	0x52, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x43,
	0x41, 0x43, 0x48, 0x45, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x27, 0x0a,
	0x1c, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x05, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x22, 0xa0, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x1a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x56, 0x49,
	0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1f, 0x0a, 0x14, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x57, 0x44, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44,
	0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x22, 0xa4, 0x01, 0x0a, 0x05, 0x43, 0x72,
	0x61, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x43, 0x72, 0x61, 0x73, 0x68, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x06, 0x63, 0x61, 0x75, 0x73, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x0d, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x14, 0x0a, 0x09, 0x43, 0x52,
	0x41, 0x53, 0x48, 0x5f, 0x4f, 0x4f, 0x4d, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x21,
	0x22, 0x6f, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x22, 0xed, 0x01, 0x0a, 0x0d, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x6f, 0x72,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x6f, 0x72, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa2, 0x01, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x16, 0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x46, 0x4f, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x30, 0x0a, 0x25, 0x54, 0x4f, 0x50, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x44, 0x49, 0x52, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x41, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43,
	0x54, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x29, 0x0a, 0x1e, 0x54, 0x4f,
	0x50, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x44, 0x49, 0x52, 0x5f, 0x55, 0x53,
	0x45, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1a, 0x0a, 0x0f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x02, 0x22, 0xca, 0x01, 0x0a, 0x0b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x14, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x25, 0x12, 0x34, 0x0a, 0x29, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x45, 0x44,
	0x53, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x10,
	0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x24, 0x0a, 0x19, 0x42, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x22, 0xa3,
	0x01, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x17, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1f, 0x0a, 0x14, 0x50, 0x41, 0x43, 0x4b, 0x41,
	0x47, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x22, 0x04, 0x08, 0x02, 0x10, 0x02, 0x22, 0x04,
	0x08, 0x03, 0x10, 0x03, 0x22, 0xb9, 0x06, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xea, 0x05, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x18,
	0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x25, 0x12, 0x25, 0x0a, 0x1a, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45,
	0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x22, 0x12, 0x23, 0x0a, 0x18, 0x43, 0x52, 0x45, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1d, 0x0a,
	0x12, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1a, 0x0a, 0x0f,
	0x52, 0x50, 0x43, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x24, 0x0a, 0x19, 0x45, 0x58, 0x45, 0x43,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x25,
	0x0a, 0x1a, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x2a, 0x0a, 0x1f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x02, 0x12, 0x22, 0x0a, 0x17, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x49, 0x52, 0x5f, 0x43, 0x4c, 0x45,
	0x41, 0x4e, 0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x08, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x25, 0x0a, 0x1a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49,
	0x42, 0x4c, 0x45, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x22, 0x12, 0x2d, 0x0a, 0x22,
	0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x0a, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x22, 0x12, 0x40, 0x0a, 0x35, 0x52,
	0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x49, 0x4e, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f,
	0x44, 0x4f, 0x54, 0x44, 0x10, 0x0b, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x41, 0x0a,
	0x36, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x41, 0x4c,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x49, 0x4e, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x5f, 0x4a, 0x44, 0x45, 0x50, 0x53, 0x10, 0x0c, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02,
	0x12, 0x35, 0x0a, 0x2a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43,
	0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0d,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x3b, 0x0a, 0x30, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x41,
	0x52, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0e, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x01, 0x12, 0x19, 0x0a, 0x0e, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f,
	0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x0f, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12,
	0x2f, 0x0a, 0x24, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x45, 0x52, 0x54, 0x49, 0x45, 0x53, 0x10, 0x10, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x22, 0xde, 0x0d, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x9b, 0x0d, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x11,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x2f, 0x0a, 0x24, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x26, 0x0a, 0x1b, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x24, 0x12, 0x24, 0x0a, 0x19, 0x45, 0x58, 0x45, 0x43, 0x52, 0x4f, 0x4f, 0x54, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x38, 0x0a, 0x2d, 0x54, 0x45, 0x4d,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x24, 0x12, 0x38, 0x0a, 0x2d, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x3e, 0x0a,
	0x33, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x31, 0x0a,
	0x26, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24,
	0x12, 0x2b, 0x0a, 0x20, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x2d, 0x0a,
	0x22, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x2f, 0x0a, 0x24,
	0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54,
	0x50, 0x55, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x0b, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x23, 0x0a,
	0x18, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x49, 0x4f, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x24, 0x12, 0x22, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x24, 0x0a, 0x19, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4f,
	0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x32, 0x0a, 0x27,
	0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x49, 0x46, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24,
	0x12, 0x32, 0x0a, 0x27, 0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x52, 0x45, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x49,
	0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x24, 0x12, 0x2d, 0x0a, 0x22, 0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x54, 0x52, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4f,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x24, 0x12, 0x32, 0x0a, 0x27, 0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54,
	0x52, 0x45, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x12,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x29, 0x0a, 0x1e, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x49, 0x4f, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x13, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x24, 0x12, 0x20, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x55, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x14, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x01, 0x12, 0x2d, 0x0a, 0x22, 0x50, 0x53, 0x45, 0x55, 0x44, 0x4f, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x45, 0x44, 0x10, 0x15, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x2a, 0x0a, 0x1f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x16, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12,
	0x2a, 0x0a, 0x1f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x17, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x25, 0x0a, 0x1a, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x18, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x01, 0x12, 0x26, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e,
	0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x19, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1c, 0x0a, 0x11, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10,
	0x1a, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x2c, 0x0a, 0x21, 0x46, 0x49, 0x4c, 0x45,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x1b, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x26, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x1c, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x27,
	0x0a, 0x1c, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1d,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x33, 0x0a, 0x28, 0x54, 0x52, 0x45, 0x45, 0x5f,
	0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x1e, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x33, 0x0a, 0x28,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x1f, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x01, 0x12, 0x36, 0x0a, 0x2b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x53, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x20, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x37, 0x0a, 0x2c, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x53, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x21, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x01, 0x12, 0x27, 0x0a, 0x1c, 0x4e, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x22, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x10, 0x0a, 0x05, 0x43,
	0x59, 0x43, 0x4c, 0x45, 0x10, 0x23, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1f, 0x0a,
	0x14, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x24, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1f,
	0x0a, 0x14, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x25, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12,
	0x24, 0x0a, 0x19, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f,
	0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x27, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x22, 0x04, 0x08, 0x08, 0x10, 0x08, 0x22, 0x04, 0x08, 0x26, 0x10,
	0x26, 0x22, 0xca, 0x02, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x12, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x30,
	0x0a, 0x25, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x47,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02,
	0x12, 0x27, 0x0a, 0x1c, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x4c,
	0x4f, 0x47, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x42, 0x0a, 0x37, 0x49, 0x4c, 0x4c,
	0x45, 0x47, 0x41, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x49, 0x45, 0x53, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x3f, 0x0a,
	0x34, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x22, 0x76,
	0x0a, 0x0c, 0x43, 0x72, 0x61, 0x73, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43,
	0x72, 0x61, 0x73, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x15, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25,
	0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x22, 0xb8, 0x02, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x25, 0x12, 0x30, 0x0a, 0x25, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x45, 0x44, 0x5f,
	0x42, 0x49, 0x4e, 0x41, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x2b, 0x0a, 0x20, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x50, 0x49, 0x44, 0x5f, 0x54, 0x58, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x24, 0x12, 0x24, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x35, 0x0a, 0x2a, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x22,
	0x04, 0x08, 0x01, 0x10, 0x01, 0x22, 0x04, 0x08, 0x02, 0x10, 0x02, 0x22, 0x04, 0x08, 0x07, 0x10,
	0x07, 0x22, 0xf0, 0x03, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x9f, 0x03, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x19, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x25, 0x12, 0x1b, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x45, 0x47, 0x59, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x3a,
	0x0a, 0x2f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x45, 0x47, 0x59, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c,
	0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x2a, 0x0a, 0x1f, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x05, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x2a, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x49, 0x43, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x24, 0x12, 0x32, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x07, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x36, 0x0a, 0x2b, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45,
	0x47, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x42, 0x53, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f,
	0x53, 0x50, 0x41, 0x57, 0x4e, 0x10, 0x08, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1d,
	0x0a, 0x12, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x29, 0x0a,
	0x1e, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47,
	0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x45, 0x44, 0x10,
	0x0a, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x22, 0x04,
	0x08, 0x02, 0x10, 0x02, 0x22, 0x9c, 0x05, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xdd, 0x04, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x17,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25,
	0x12, 0x1c, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x22,
	0x0a, 0x17, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x09, 0x12, 0x1e, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x4c, 0x59,
	0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x24, 0x12, 0x3b, 0x0a, 0x30, 0x53, 0x54, 0x41, 0x52, 0x4c, 0x41, 0x52, 0x4b, 0x5f, 0x43,
	0x50, 0x55, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12,
	0x38, 0x0a, 0x2d, 0x53, 0x54, 0x41, 0x52, 0x4c, 0x41, 0x52, 0x4b, 0x5f, 0x43, 0x50, 0x55, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x32, 0x0a, 0x27, 0x53, 0x54, 0x41,
	0x52, 0x4c, 0x41, 0x52, 0x4b, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x2a, 0x0a,
	0x1f, 0x49, 0x4e, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x24, 0x0a, 0x19, 0x49, 0x4e, 0x56,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x08, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12,
	0x20, 0x0a, 0x15, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x02, 0x12, 0x29, 0x0a, 0x1e, 0x53, 0x54, 0x41, 0x52, 0x4c, 0x41, 0x52, 0x4b, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x0a, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x23, 0x0a, 0x18,
	0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x0b, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x02, 0x12, 0x1b, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x0c, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x23,
	0x0a, 0x18, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x0d, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x24, 0x12, 0x1e, 0x0a, 0x13, 0x49, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x0e, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x02, 0x22, 0xf2, 0x01, 0x0a, 0x0a, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x13, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x25, 0x12, 0x26, 0x0a, 0x1b, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1e, 0x0a, 0x13, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x15, 0x0a, 0x0a, 0x42, 0x41, 0x44,
	0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24,
	0x12, 0x20, 0x0a, 0x15, 0x4e, 0x4f, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x24, 0x22, 0x04, 0x08, 0x05, 0x10, 0x05, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3b,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x1a, 0x43, 0x41, 0x4e, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1e, 0x0a, 0x13, 0x46, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x22, 0xc8, 0x04, 0x0a, 0x12, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xf3, 0x03, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x1b, 0x42, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25,
	0x12, 0x2e, 0x0a, 0x23, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x41, 0x50,
	0x50, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02,
	0x12, 0x2e, 0x0a, 0x23, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x41, 0x50,
	0x50, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x12, 0x2b, 0x0a, 0x20, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x41, 0x50,
	0x50, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x33, 0x0a,
	0x28, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x01, 0x12, 0x20, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x02, 0x12, 0x20, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x06, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x21, 0x0a, 0x16, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f,
	0x43, 0x50, 0x55, 0x5f, 0x50, 0x52, 0x45, 0x52, 0x45, 0x51, 0x5f, 0x55, 0x4e, 0x4d, 0x45, 0x54,
	0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x33, 0x0a, 0x28, 0x48, 0x45, 0x55,
	0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x08, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x10,
	0x0a, 0x05, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02,
	0x12, 0x25, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0a,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x2c, 0x0a, 0x21, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x4e, 0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x43, 0x10, 0x0b, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x02, 0x22, 0xef, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa8, 0x01, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x14, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x18, 0x0a, 0x0d, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41,
	0x4e, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02,
	0x12, 0x1d, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12,
	0x23, 0x0a, 0x18, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x07, 0x12, 0x21, 0x0a, 0x16, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x22, 0xfc, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x16, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x40,
	0x0a, 0x35, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x4f,
	0x4f, 0x4d, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x45, 0x41, 0x47, 0x45, 0x52, 0x4c, 0x59, 0x5f,
	0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02,
	0x12, 0x44, 0x0a, 0x39, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c,
	0x5f, 0x4f, 0x4f, 0x4d, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x45, 0x41, 0x47, 0x45, 0x52, 0x4c,
	0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x45, 0x4e, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x53, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x22, 0xf8, 0x0b, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xbd, 0x0b, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x0d, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x25, 0x12, 0x32, 0x0a, 0x27, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x22, 0x0a, 0x17, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x2a, 0x0a, 0x1f,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x20, 0x0a, 0x15, 0x4f, 0x55, 0x54, 0x50,
	0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x21, 0x0a, 0x16, 0x47, 0x52,
	0x41, 0x50, 0x48, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x52, 0x45, 0x51, 0x5f, 0x55,
	0x4e, 0x4d, 0x45, 0x54, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x25, 0x0a,
	0x1a, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x24, 0x12, 0x25, 0x0a, 0x1a, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x44, 0x4f, 0x55, 0x54, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x0d, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x26, 0x0a, 0x1b, 0x41,
	0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x52,
	0x45, 0x52, 0x45, 0x51, 0x5f, 0x55, 0x4e, 0x4d, 0x45, 0x54, 0x10, 0x0e, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x02, 0x12, 0x26, 0x0a, 0x1b, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x53, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x0f, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x39, 0x0a, 0x2e, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x44, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x10, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x20, 0x0a, 0x15, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x11, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x1d, 0x0a, 0x12, 0x56, 0x41, 0x52, 0x49,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x12,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x44, 0x0a, 0x39, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x46, 0x49, 0x4c, 0x45, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x46, 0x49,
	0x4c, 0x45, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x13, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1b, 0x0a,
	0x10, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x14, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x10, 0x0a, 0x05, 0x43, 0x59,
	0x43, 0x4c, 0x45, 0x10, 0x15, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x2b, 0x0a, 0x20,
	0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x5f, 0x53, 0x4b, 0x59, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x48,
	0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x16, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x27, 0x0a, 0x1c, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x56, 0x45,
	0x52, 0x53, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x17, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x02, 0x12, 0x2b, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x5f, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12,
	0x28, 0x0a, 0x1d, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x50,
	0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x19, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x26, 0x0a, 0x1b, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x1a, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x07, 0x12, 0x25, 0x0a, 0x1a, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x52, 0x45, 0x51, 0x5f, 0x55, 0x4e, 0x4d, 0x45, 0x54, 0x10,
	0x1b, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1c, 0x0a, 0x11, 0x41, 0x52, 0x47, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x1c, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x31, 0x0a, 0x26, 0x52, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x46, 0x49, 0x4c, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x4b, 0x59, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x10, 0x1d, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x25, 0x0a, 0x1a, 0x46, 0x55, 0x4c,
	0x4c, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x1e, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07,
	0x12, 0x2c, 0x0a, 0x21, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x55,
	0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1f, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x2d,
	0x0a, 0x22, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x20, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x36, 0x0a,
	0x2b, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41,
	0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x21, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x32, 0x0a, 0x27, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x4e,
	0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x22, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x17, 0x0a, 0x0c, 0x53, 0x59, 0x4e,
	0x54, 0x41, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x23, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x02, 0x12, 0x28, 0x0a, 0x1d, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x24, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x2b, 0x0a, 0x20,
	0x53, 0x4b, 0x59, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x25, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x24, 0x0a, 0x19, 0x53, 0x4b, 0x59,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x26, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12,
	0x26, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x10, 0x27,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x23, 0x0a, 0x18, 0x49, 0x4c, 0x4c, 0x45, 0x47,
	0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x28, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1d, 0x0a, 0x12,
	0x4e, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x29, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x22, 0x04, 0x08, 0x07, 0x10,
	0x0c, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x53,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x17, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x27, 0x0a, 0x1c, 0x4c, 0x4f,
	0x43, 0x4b, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x50, 0x52,
	0x45, 0x52, 0x45, 0x51, 0x5f, 0x55, 0x4e, 0x4d, 0x45, 0x54, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x02, 0x22, 0x90, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x14, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x43,
	0x48, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x25, 0x12, 0x21, 0x0a, 0x16, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x22, 0xed, 0x01, 0x0a, 0x0c, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xa4, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x15, 0x46, 0x45, 0x54, 0x43,
	0x48, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1d, 0x0a, 0x12, 0x45, 0x58,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1a, 0x0a, 0x0f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x02, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1c, 0x0a, 0x11, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x50,
	0x41, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x02, 0x12, 0x21, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x41,
	0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x22, 0xfe, 0x01, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb7, 0x01,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x14, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1f, 0x0a, 0x14, 0x50, 0x41, 0x43, 0x4b, 0x41,
	0x47, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x25, 0x0a, 0x1a, 0x57, 0x4f, 0x52, 0x4b,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12,
	0x22, 0x0a, 0x17, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x45,
	0x54, 0x43, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x07, 0x12, 0x22, 0x0a, 0x17, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x22, 0x81, 0x04, 0x0a, 0x07, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xc2, 0x03, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x17, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x25, 0x12, 0x21, 0x0a, 0x16, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x21, 0x0a, 0x16, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x21, 0x0a, 0x16, 0x44, 0x4f, 0x43,
	0x4b, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1a, 0x0a, 0x0f,
	0x4e, 0x4f, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10,
	0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x2b, 0x0a, 0x20, 0x44, 0x4f, 0x43, 0x4b,
	0x45, 0x52, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x26, 0x0a, 0x1b, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x26, 0x0a,
	0x1b, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x4f,
	0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x07, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x2c, 0x0a, 0x21, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x26, 0x0a, 0x1b, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x22, 0x0a, 0x17, 0x53,
	0x55, 0x42, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12,
	0x1a, 0x0a, 0x0f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x50,
	0x55, 0x54, 0x10, 0x0b, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x22, 0xb7, 0x04, 0x0a, 0x0f,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x12,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x90, 0x03, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x18, 0x49,
	0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25,
	0x12, 0x29, 0x0a, 0x1e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x49,
	0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x20, 0x0a, 0x15, 0x53,
	0x43, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x2c, 0x0a,
	0x21, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41,
	0x47, 0x45, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x25, 0x0a, 0x1a, 0x49,
	0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x24, 0x12, 0x20, 0x0a, 0x15, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x41, 0x42,
	0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x05, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x01, 0x12, 0x1f, 0x0a, 0x14, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x24, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x26, 0x0a, 0x1b, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x08, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x24, 0x12, 0x30, 0x0a, 0x25, 0x55, 0x4e, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x09, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7c, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x14, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1a, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x53, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x04, 0x12, 0x1e, 0x0a, 0x13, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e,
	0x4f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x5a, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x01, 0x12, 0x17, 0x0a, 0x0c, 0x54, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x03, 0x22, 0xac, 0x05, 0x0a, 0x0b, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xe5, 0x04, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x14, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x29, 0x0a, 0x1e, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x41,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x19, 0x0a, 0x0e, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x06, 0x12, 0x2a, 0x0a, 0x1f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x23, 0x0a,
	0x18, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x53,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x02, 0x12, 0x36, 0x0a, 0x2b, 0x53, 0x4b, 0x59, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x24, 0x0a, 0x19, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x12, 0x26, 0x0a, 0x1b, 0x53, 0x4b, 0x59, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x52, 0x45, 0x51, 0x5f, 0x55, 0x4e, 0x4d, 0x45, 0x54, 0x10,
	0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x20, 0x0a, 0x15, 0x41, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49,
	0x47, 0x10, 0x08, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x21, 0x0a, 0x16, 0x49, 0x4c,
	0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x53, 0x59,
	0x4e, 0x54, 0x41, 0x58, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1e, 0x0a,
	0x13, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0x0a, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x3e, 0x0a,
	0x33, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
	0x54, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x4b, 0x59, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x29, 0x0a,
	0x1e, 0x53, 0x4b, 0x59, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0c, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x28, 0x0a, 0x1d, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x02, 0x12, 0x25, 0x0a, 0x1a, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x58, 0x50, 0x41, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x0e, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x22, 0xdd, 0x06, 0x0a, 0x0e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x06, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x17, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x4e, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x25, 0x12, 0x38, 0x0a, 0x2d, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x50, 0x41, 0x54,
	0x54, 0x45, 0x52, 0x4e, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x2b, 0x0a,
	0x20, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x27, 0x0a, 0x1c, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x50, 0x41, 0x52,
	0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x1c, 0x0a, 0x11, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x01, 0x12, 0x20, 0x0a, 0x15, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x2a, 0x0a, 0x1f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12,
	0x30, 0x0a, 0x25, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x52, 0x4d,
	0x49, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x01, 0x12, 0x1d, 0x0a, 0x12, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41,
	0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x12, 0x28, 0x0a, 0x1d, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f,
	0x54, 0x5f, 0x42, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x2b, 0x0a, 0x20, 0x50, 0x41,
	0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x10, 0x0a,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x10, 0x0a, 0x05, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x10, 0x0b, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x20, 0x0a, 0x15, 0x43, 0x41, 0x4e,
	0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x10, 0x0c, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1a, 0x0a, 0x0f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x0d,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x30, 0x0a, 0x25, 0x52, 0x45, 0x43, 0x55, 0x52,
	0x53, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x54, 0x54,
	0x45, 0x52, 0x4e, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44,
	0x10, 0x0e, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x2a, 0x0a, 0x1f, 0x55, 0x50, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x0f, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x2e, 0x0a, 0x23, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x10, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x20, 0x0a, 0x15, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f,
	0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x41, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x11,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1f, 0x0a, 0x14, 0x44, 0x45, 0x50, 0x45, 0x4e,
	0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x12, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1f, 0x0a, 0x14, 0x50, 0x41, 0x43, 0x4b,
	0x41, 0x47, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x13, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x22, 0xfb, 0x03, 0x0a, 0x0c, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xb2, 0x03, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x15, 0x43,
	0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x27, 0x0a,
	0x1c, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x06, 0x12, 0x25, 0x0a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x20, 0x0a,
	0x15, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12,
	0x25, 0x0a, 0x1a, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x28, 0x0a, 0x1d, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24,
	0x12, 0x2b, 0x0a, 0x20, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x06, 0x12, 0x22, 0x0a,
	0x17, 0x45, 0x58, 0x45, 0x43, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x24, 0x12, 0x25, 0x0a, 0x1a, 0x45, 0x58, 0x45, 0x43, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x54, 0x45,
	0x4d, 0x50, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x08, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x28, 0x0a, 0x1d, 0x41, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x06, 0x12, 0x23, 0x0a, 0x18, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x0a,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x6d, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x16, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1e, 0x0a,
	0x13, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x49, 0x44, 0x53, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x22, 0x0a,
	0x17, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x02, 0x22, 0xc1, 0x04, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xee, 0x03, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x1a, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x25, 0x12, 0x2a, 0x0a, 0x1f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02,
	0x12, 0x23, 0x0a, 0x18, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x41, 0x52, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x20, 0x0a, 0x15, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x2c, 0x0a, 0x21, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x46, 0x49, 0x4c, 0x45, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x2a, 0x0a, 0x1f, 0x53, 0x49, 0x42, 0x4c, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x02, 0x12, 0x29, 0x0a, 0x1e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1c, 0x0a, 0x11,
	0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x2a, 0x0a, 0x1f, 0x49, 0x4e,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x41,
	0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x19, 0x0a, 0x0e, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x02, 0x12, 0x20, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x52, 0x4c, 0x41, 0x52, 0x4b, 0x5f, 0x53, 0x59,
	0x4e, 0x54, 0x41, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x02, 0x12, 0x1e, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x52, 0x4c, 0x41, 0x52, 0x4b, 0x5f,
	0x45, 0x56, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0b, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x02, 0x12, 0x20, 0x0a, 0x15, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x02, 0x22, 0xaf, 0x02, 0x0a, 0x0b, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe8, 0x01, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x14, 0x44, 0x55, 0x4d, 0x50, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1e, 0x0a, 0x13, 0x4e, 0x4f, 0x5f, 0x4f, 0x55, 0x54,
	0x50, 0x55, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x23, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x44, 0x55, 0x4d, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x29, 0x0a, 0x1e, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x41,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x23, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x44, 0x55, 0x4d, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x07, 0x12, 0x24, 0x0a, 0x19, 0x53,
	0x54, 0x41, 0x52, 0x4c, 0x41, 0x52, 0x4b, 0x5f, 0x48, 0x45, 0x41, 0x50, 0x5f, 0x44, 0x55, 0x4d,
	0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x08, 0x22, 0x04, 0x08, 0x06, 0x10, 0x06, 0x22, 0xa8, 0x01, 0x0a, 0x0b, 0x48, 0x65, 0x6c, 0x70,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x62,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x14, 0x48, 0x45, 0x4c, 0x50, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1b, 0x0a, 0x10, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x02, 0x12, 0x1c, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x02, 0x22, 0xb7, 0x02, 0x0a, 0x0d, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xec, 0x01,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x16, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1e, 0x0a, 0x13, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1e, 0x0a, 0x13, 0x4e, 0x4f, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x25, 0x0a, 0x1a, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x53, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02,
	0x12, 0x1e, 0x0a, 0x13, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x06,
	0x12, 0x18, 0x0a, 0x0d, 0x4e, 0x4f, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x45, 0x58, 0x49,
	0x54, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x06, 0x12, 0x20, 0x0a, 0x15, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x41, 0x4d, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x06, 0x22, 0xbe, 0x01, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x72, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x28, 0x0a, 0x1d, 0x4f, 0x4c, 0x44, 0x5f, 0x42, 0x49, 0x4e,
	0x41, 0x52, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12,
	0x1c, 0x0a, 0x11, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x22, 0xcc, 0x05,
	0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x75, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x87, 0x05, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x13, 0x52,
	0x55, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1e, 0x0a, 0x13, 0x4e,
	0x4f, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x25, 0x0a, 0x1a, 0x54,
	0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x53, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x02, 0x12, 0x20, 0x0a, 0x15, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x02, 0x12, 0x2f, 0x0a, 0x24, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x54, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x32, 0x0a, 0x27, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f,
	0x42, 0x55, 0x49, 0x4c, 0x54, 0x5f, 0x42, 0x55, 0x54, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x25, 0x0a, 0x1a, 0x52, 0x55, 0x4e,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02,
	0x12, 0x1b, 0x0a, 0x10, 0x52, 0x55, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x52, 0x45, 0x51, 0x5f, 0x55,
	0x4e, 0x4d, 0x45, 0x54, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x27, 0x0a,
	0x1c, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x53, 0x10, 0x08, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x29, 0x0a, 0x1e, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45,
	0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x24, 0x12, 0x29, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x0a, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x1d, 0x0a, 0x12,
	0x4e, 0x4f, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x0b, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1f, 0x0a, 0x14, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x0c, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x06, 0x12, 0x30, 0x0a, 0x25,
	0x52, 0x55, 0x4e, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x49, 0x45, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0d, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x2d,
	0x0a, 0x22, 0x52, 0x55, 0x4e, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x5f, 0x53, 0x59, 0x4d, 0x4c, 0x49,
	0x4e, 0x4b, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x0e, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x2d, 0x0a,
	0x22, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50,
	0x54, 0x45, 0x44, 0x10, 0x0f, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x08, 0x22, 0x90, 0x01, 0x0a,
	0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x17, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x18, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x22,
	0x8e, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a,
	0x1c, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1b, 0x0a, 0x10, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x29, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x22,
	0x0a, 0x17, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x01, 0x12, 0x1c, 0x0a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x22, 0xce, 0x02, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xff, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x18, 0x57, 0x4f, 0x52, 0x4b,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x18, 0x0a,
	0x0d, 0x4e, 0x4f, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x01,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1f, 0x0a, 0x14, 0x41, 0x42, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x16, 0x0a, 0x0b, 0x45, 0x58, 0x45, 0x43,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x12, 0x18, 0x0a, 0x0d, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x1d, 0x0a, 0x12, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x26, 0x0a, 0x1b, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4f, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x01, 0x12, 0x1e, 0x0a, 0x13, 0x53, 0x54, 0x44, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4f, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x01, 0x22, 0x9a, 0x02, 0x0a, 0x0b, 0x4a, 0x61, 0x76, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x14, 0x4a, 0x41, 0x56, 0x41, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x25, 0x12, 0x24, 0x0a, 0x19, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x44, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x29, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x22, 0x0a, 0x17, 0x4a, 0x44, 0x45, 0x50, 0x53, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x35, 0x0a, 0x2a, 0x52, 0x45, 0x44, 0x55, 0x43,
	0x45, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x4c,
	0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x22, 0xc0,
	0x01, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x72, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x57, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x24, 0x0a, 0x19, 0x4c, 0x4f,
	0x53, 0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e,
	0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x12, 0x1f, 0x0a, 0x14, 0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x01, 0x22, 0x93, 0x04, 0x0a, 0x0a, 0x43, 0x70, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x12, 0x34, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x43, 0x70, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xce, 0x03, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x13, 0x43, 0x50, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12,
	0x29, 0x0a, 0x1e, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x48, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x53, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x1f, 0x0a, 0x14, 0x43, 0x4f,
	0x50, 0x59, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x1e, 0x0a, 0x13, 0x44,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x25, 0x0a, 0x1a, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x01, 0x12, 0x23, 0x0a, 0x18, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x50,
	0x41, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x05,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x29, 0x0a, 0x1e, 0x49, 0x4e, 0x43, 0x4c, 0x55,
	0x44, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x5f,
	0x45, 0x58, 0x45, 0x43, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x01, 0x12, 0x2a, 0x0a, 0x1f, 0x46, 0x41, 0x4b, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41,
	0x4e, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x20,
	0x0a, 0x15, 0x55, 0x4e, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x43,
	0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x08, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x12, 0x1f, 0x0a, 0x14, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x01, 0x12, 0x2a, 0x0a, 0x1f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x45, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x0a, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x28, 0x0a,
	0x1d, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0b,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x22, 0xcf, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72,
	0x6c, 0x61, 0x72, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c,
	0x61, 0x72, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x17, 0x53, 0x54, 0x41, 0x52, 0x4c, 0x41, 0x52, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x25, 0x12, 0x29, 0x0a, 0x1e, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x2b, 0x0a, 0x20,
	0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x22, 0xbe, 0x01, 0x0a, 0x0b, 0x4e, 0x69,
	0x6e, 0x6a, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4e, 0x69, 0x6e, 0x6a, 0x61, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x78, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x14, 0x4e, 0x49, 0x4e, 0x4a,
	0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x2e, 0x0a, 0x23, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x43,
	0x4c, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59,
	0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x1f, 0x0a, 0x14, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x22, 0x85, 0x02, 0x0a, 0x10, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x19, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x25, 0x0a, 0x1a, 0x58, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x52,
	0x45, 0x51, 0x5f, 0x55, 0x4e, 0x4d, 0x45, 0x54, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x24, 0x12, 0x22, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x16, 0x0a, 0x0b, 0x52, 0x55, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x23, 0x0a,
	0x18, 0x4e, 0x4f, 0x5f, 0x55, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x45, 0x47, 0x59, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x02, 0x22, 0x98, 0x03, 0x0a, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x13, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25,
	0x12, 0x1e, 0x0a, 0x13, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x12, 0x23, 0x0a, 0x18, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x59,
	0x54, 0x48, 0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x21, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x47, 0x55, 0x41, 0x52,
	0x44, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x28, 0x0a, 0x1d, 0x44, 0x59, 0x4e, 0x41,
	0x4d, 0x49, 0x43, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x01, 0x12, 0x1f, 0x0a, 0x14, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x1e, 0x0a, 0x13, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x21, 0x0a, 0x16, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x29, 0x0a, 0x1e, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c,
	0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x0a, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x01, 0x22, 0x04, 0x08, 0x08, 0x10, 0x08, 0x22, 0x04, 0x08, 0x09, 0x10, 0x09, 0x22, 0xb9, 0x02,
	0x0a, 0x0d, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x16, 0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x25, 0x12, 0x24, 0x0a, 0x19, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x22, 0x0a, 0x17, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x49,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x2e,
	0x0a, 0x23, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x50,
	0x55, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x25,
	0x0a, 0x1a, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x22, 0x0a, 0x17, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x4f,
	0x55, 0x43, 0x48, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x22, 0xb4, 0x01, 0x0a, 0x07, 0x43, 0x70,
	0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x76, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x10, 0x43, 0x50, 0x50, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x25, 0x0a,
	0x1a, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x01, 0x12, 0x2a, 0x0a, 0x1f, 0x46, 0x41, 0x4b, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x22, 0xdd, 0x01, 0x0a, 0x09, 0x4c, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4c,
	0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x12,
	0x4c, 0x54, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x2b, 0x0a, 0x20, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x5f,
	0x50, 0x41, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10,
	0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x20, 0x0a, 0x15, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x42, 0x49, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x53, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x24, 0x0a, 0x19, 0x49, 0x4d,
	0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x22, 0x9c, 0x02, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x13, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x25,
	0x0a, 0x1a, 0x4e, 0x4f, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x22, 0x0a, 0x17, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x52, 0x45, 0x51, 0x5f, 0x55, 0x4e, 0x4d, 0x45, 0x54,
	0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x29, 0x0a, 0x1e, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x01, 0x12, 0x1d, 0x0a, 0x12, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x1a, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43,
	0x50, 0x55, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x22,
	0xf7, 0x03, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xba, 0x03, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x0e, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25,
	0x12, 0x2f, 0x0a, 0x24, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x58, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x41, 0x4c,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x01, 0x12, 0x25, 0x0a, 0x1a, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x58, 0x45, 0x52,
	0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10,
	0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x13, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x54,
	0x4f, 0x4f, 0x4c, 0x53, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x16, 0x0a,
	0x0b, 0x4e, 0x4f, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x04, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x30, 0x0a, 0x25, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x19, 0x0a, 0x0e, 0x42, 0x4f, 0x52, 0x52, 0x4f,
	0x57, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x01, 0x12, 0x1b, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12,
	0x1a, 0x0a, 0x0f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x08, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1a, 0x0a, 0x0f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x09,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x21, 0x0a, 0x16, 0x50, 0x41, 0x52, 0x53, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x0a, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x16, 0x0a, 0x0b, 0x4e, 0x4f,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x0b, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x01, 0x12, 0x19, 0x0a, 0x0e, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x0c, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1a, 0x0a,
	0x0f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x10, 0x0d, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x22, 0xc4, 0x06, 0x0a, 0x08, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x06, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x10, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25,
	0x12, 0x17, 0x0a, 0x0c, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x28, 0x0a, 0x1d, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x49, 0x43, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x23, 0x0a, 0x18, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x53, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x5a, 0x45, 0x44, 0x10,
	0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x10, 0x0a, 0x05, 0x43, 0x59, 0x43, 0x4c,
	0x45, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x31, 0x0a, 0x26, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x50, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x24, 0x0a,
	0x19, 0x41, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x53, 0x59,
	0x4e, 0x54, 0x41, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x1e, 0x0a, 0x13, 0x41, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x52,
	0x45, 0x52, 0x45, 0x51, 0x5f, 0x55, 0x4e, 0x4d, 0x45, 0x54, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x1b, 0x0a, 0x10, 0x41, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x08, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x12, 0x1a, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c,
	0x49, 0x43, 0x54, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x23, 0x0a, 0x18,
	0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x0a, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x01, 0x12, 0x28, 0x0a, 0x1d, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f,
	0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0b, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x27, 0x0a, 0x1c, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x45,
	0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x0c, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x01, 0x12, 0x1e, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0d, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x01, 0x12, 0x2a, 0x0a, 0x1f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x52, 0x4f, 0x4d,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x0e, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x12, 0x1d, 0x0a, 0x12, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12,
	0x25, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x10, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x21, 0x0a, 0x16, 0x41, 0x53, 0x50, 0x45, 0x43, 0x54,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x11, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x2b, 0x0a, 0x20, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x12, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x28, 0x0a, 0x1d, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x13, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x12, 0x2e, 0x0a, 0x23, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x41, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x14, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x22, 0xbe, 0x09, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xf1, 0x08,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x17, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47,
	0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1f, 0x0a, 0x14, 0x57, 0x4f,
	0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x29, 0x0a, 0x1e, 0x4d,
	0x41, 0x58, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x45, 0x50, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1d, 0x0a, 0x12, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1d, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x1a, 0x05, 0xb2,
	0x43, 0x02, 0x08, 0x01, 0x12, 0x33, 0x0a, 0x28, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x32, 0x0a, 0x27, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x12, 0x17, 0x0a,
	0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x07, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x23, 0x0a, 0x18, 0x45, 0x56, 0x41, 0x4c, 0x5f, 0x47,
	0x4c, 0x4f, 0x42, 0x53, 0x5f, 0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x25, 0x0a, 0x1a, 0x49,
	0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x4c, 0x41, 0x52, 0x4b, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x01, 0x12, 0x1a, 0x0a, 0x0f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x19,
	0x0a, 0x0e, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x0c, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x18, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f,
	0x53, 0x55, 0x43, 0x48, 0x5f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x1c, 0x0a, 0x11, 0x47, 0x4c, 0x4f, 0x42, 0x5f, 0x49, 0x4f, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08,
	0x24, 0x12, 0x1a, 0x0a, 0x0f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x10, 0x0f, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x28, 0x0a,
	0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x17, 0x0a, 0x0c, 0x53, 0x59, 0x4e, 0x54, 0x41,
	0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x11, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x12, 0x2b, 0x0a, 0x20, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x4e, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x41, 0x47, 0x45, 0x10, 0x12, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x29, 0x0a,
	0x1e, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x44, 0x10,
	0x13, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x29, 0x0a, 0x1e, 0x45, 0x4e, 0x56, 0x49,
	0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x50, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x14, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x01, 0x12, 0x25, 0x0a, 0x1a, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x10, 0x15, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1e, 0x0a, 0x13, 0x45, 0x4e,
	0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x16, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x23, 0x0a, 0x18, 0x45, 0x4e,
	0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x17, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12,
	0x1f, 0x0a, 0x14, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x18, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x12, 0x1e, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x52, 0x4c, 0x41, 0x52, 0x4b, 0x5f, 0x45, 0x56, 0x41,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x19, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x12, 0x20, 0x0a, 0x15, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x53,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x1a, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x01, 0x12, 0x26, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x1b, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x29, 0x0a, 0x1e, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x45, 0x53, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x41, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x1c, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x25, 0x0a, 0x1a, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e,
	0x53, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x1d, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x2e, 0x0a, 0x23,
	0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1d, 0x0a, 0x12,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x1f, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x22, 0x04, 0x08, 0x08, 0x10,
	0x08, 0x22, 0xda, 0x02, 0x0a, 0x09, 0x54, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x54, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x11, 0x54, 0x4f, 0x4f, 0x4c, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1b, 0x0a, 0x10, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10,
	0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x23, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x21, 0x0a,
	0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01,
	0x12, 0x1c, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x4c,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x29,
	0x0a, 0x1e, 0x4e, 0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x20, 0x0a, 0x15, 0x4e, 0x4f, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x21, 0x0a, 0x16, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x22, 0x94,
	0x03, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xc5, 0x02,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x52, 0x4c, 0x41,
	0x52, 0x4b, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x10, 0x0a, 0x05, 0x43,
	0x59, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x18, 0x0a,
	0x0d, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x16, 0x0a, 0x0b, 0x50, 0x41, 0x52, 0x53, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12,
	0x15, 0x0a, 0x0a, 0x45, 0x56, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x27, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12,
	0x1c, 0x0a, 0x11, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x13, 0x0a,
	0x08, 0x49, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x01, 0x12, 0x29, 0x0a, 0x1e, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x43, 0x52, 0x4f, 0x53,
	0x53, 0x45, 0x53, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x41, 0x52, 0x59, 0x10, 0x08, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x19, 0x0a,
	0x0e, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x09, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x01, 0x12, 0x1b, 0x0a, 0x10, 0x56, 0x49, 0x53, 0x49,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x01, 0x22, 0x90, 0x02, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x44, 0x65, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44,
	0x65, 0x70, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xc7,
	0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x15, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x50, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1b, 0x0a, 0x10, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x30, 0x12, 0x15, 0x0a, 0x0a, 0x42, 0x41, 0x44, 0x5f, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x30, 0x12, 0x23, 0x0a,
	0x18, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43, 0x02,
	0x08, 0x30, 0x12, 0x1f, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x04, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x30, 0x12, 0x23, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10,
	0x05, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x20, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x66,
	0x66, 0x41, 0x77, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x41,
	0x77, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x46, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x16, 0x44,
	0x49, 0x46, 0x46, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x45, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1b,
	0x0a, 0x10, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x01, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x24, 0x22, 0xd5, 0x01, 0x0a, 0x0f,
	0x4d, 0x6f, 0x64, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x4d, 0x6f, 0x64, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x18, 0x4d, 0x4f, 0x44, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x1a, 0x05, 0xb2, 0x43, 0x02, 0x08, 0x25, 0x12, 0x1c, 0x0a, 0x11, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x01, 0x1a,
	0x05, 0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1d, 0x0a, 0x12, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41,
	0x4e, 0x59, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x02, 0x1a, 0x05,
	0xb2, 0x43, 0x02, 0x08, 0x02, 0x12, 0x1c, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x1a, 0x05, 0xb2, 0x43,
	0x02, 0x08, 0x02, 0x3a, 0x66, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xb6, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x26, 0x0a, 0x24, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescOnce sync.Once
	file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescData = file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDesc
)

func file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescGZIP() []byte {
	file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescOnce.Do(func() {
		file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescData = protoimpl.X.CompressGZIP(file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescData)
	})
	return file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDescData
}

var file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes = make([]protoimpl.EnumInfo, 62)
var file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_third_party_bazel_src_main_protobuf_failure_details_proto_goTypes = []interface{}{
	(Interrupted_Code)(0),                 // 0: failure_details.Interrupted.Code
	(Spawn_Code)(0),                       // 1: failure_details.Spawn.Code
	(ExternalRepository_Code)(0),          // 2: failure_details.ExternalRepository.Code
	(BuildProgress_Code)(0),               // 3: failure_details.BuildProgress.Code
	(RemoteOptions_Code)(0),               // 4: failure_details.RemoteOptions.Code
	(ClientEnvironment_Code)(0),           // 5: failure_details.ClientEnvironment.Code
	(Crash_Code)(0),                       // 6: failure_details.Crash.Code
	(SymlinkForest_Code)(0),               // 7: failure_details.SymlinkForest.Code
	(BuildReport_Code)(0),                 // 8: failure_details.BuildReport.Code
	(PackageOptions_Code)(0),              // 9: failure_details.PackageOptions.Code
	(RemoteExecution_Code)(0),             // 10: failure_details.RemoteExecution.Code
	(Execution_Code)(0),                   // 11: failure_details.Execution.Code
	(Workspaces_Code)(0),                  // 12: failure_details.Workspaces.Code
	(CrashOptions_Code)(0),                // 13: failure_details.CrashOptions.Code
	(Filesystem_Code)(0),                  // 14: failure_details.Filesystem.Code
	(ExecutionOptions_Code)(0),            // 15: failure_details.ExecutionOptions.Code
	(Command_Code)(0),                     // 16: failure_details.Command.Code
	(GrpcServer_Code)(0),                  // 17: failure_details.GrpcServer.Code
	(CanonicalizeFlags_Code)(0),           // 18: failure_details.CanonicalizeFlags.Code
	(BuildConfiguration_Code)(0),          // 19: failure_details.BuildConfiguration.Code
	(InfoCommand_Code)(0),                 // 20: failure_details.InfoCommand.Code
	(MemoryOptions_Code)(0),               // 21: failure_details.MemoryOptions.Code
	(Query_Code)(0),                       // 22: failure_details.Query.Code
	(LocalExecution_Code)(0),              // 23: failure_details.LocalExecution.Code
	(ActionCache_Code)(0),                 // 24: failure_details.ActionCache.Code
	(FetchCommand_Code)(0),                // 25: failure_details.FetchCommand.Code
	(SyncCommand_Code)(0),                 // 26: failure_details.SyncCommand.Code
	(Sandbox_Code)(0),                     // 27: failure_details.Sandbox.Code
	(IncludeScanning_Code)(0),             // 28: failure_details.IncludeScanning.Code
	(TestCommand_Code)(0),                 // 29: failure_details.TestCommand.Code
	(ActionQuery_Code)(0),                 // 30: failure_details.ActionQuery.Code
	(TargetPatterns_Code)(0),              // 31: failure_details.TargetPatterns.Code
	(CleanCommand_Code)(0),                // 32: failure_details.CleanCommand.Code
	(ConfigCommand_Code)(0),               // 33: failure_details.ConfigCommand.Code
	(ConfigurableQuery_Code)(0),           // 34: failure_details.ConfigurableQuery.Code
	(DumpCommand_Code)(0),                 // 35: failure_details.DumpCommand.Code
	(HelpCommand_Code)(0),                 // 36: failure_details.HelpCommand.Code
	(MobileInstall_Code)(0),               // 37: failure_details.MobileInstall.Code
	(ProfileCommand_Code)(0),              // 38: failure_details.ProfileCommand.Code
	(RunCommand_Code)(0),                  // 39: failure_details.RunCommand.Code
	(VersionCommand_Code)(0),              // 40: failure_details.VersionCommand.Code
	(PrintActionCommand_Code)(0),          // 41: failure_details.PrintActionCommand.Code
	(WorkspaceStatus_Code)(0),             // 42: failure_details.WorkspaceStatus.Code
	(JavaCompile_Code)(0),                 // 43: failure_details.JavaCompile.Code
	(ActionRewinding_Code)(0),             // 44: failure_details.ActionRewinding.Code
	(CppCompile_Code)(0),                  // 45: failure_details.CppCompile.Code
	(StarlarkAction_Code)(0),              // 46: failure_details.StarlarkAction.Code
	(NinjaAction_Code)(0),                 // 47: failure_details.NinjaAction.Code
	(DynamicExecution_Code)(0),            // 48: failure_details.DynamicExecution.Code
	(FailAction_Code)(0),                  // 49: failure_details.FailAction.Code
	(SymlinkAction_Code)(0),               // 50: failure_details.SymlinkAction.Code
	(CppLink_Code)(0),                     // 51: failure_details.CppLink.Code
	(LtoAction_Code)(0),                   // 52: failure_details.LtoAction.Code
	(TestAction_Code)(0),                  // 53: failure_details.TestAction.Code
	(Worker_Code)(0),                      // 54: failure_details.Worker.Code
	(Analysis_Code)(0),                    // 55: failure_details.Analysis.Code
	(PackageLoading_Code)(0),              // 56: failure_details.PackageLoading.Code
	(Toolchain_Code)(0),                   // 57: failure_details.Toolchain.Code
	(StarlarkLoading_Code)(0),             // 58: failure_details.StarlarkLoading.Code
	(ExternalDeps_Code)(0),                // 59: failure_details.ExternalDeps.Code
	(DiffAwareness_Code)(0),               // 60: failure_details.DiffAwareness.Code
	(ModqueryCommand_Code)(0),             // 61: failure_details.ModqueryCommand.Code
	(*FailureDetailMetadata)(nil),         // 62: failure_details.FailureDetailMetadata
	(*FailureDetail)(nil),                 // 63: failure_details.FailureDetail
	(*Interrupted)(nil),                   // 64: failure_details.Interrupted
	(*Spawn)(nil),                         // 65: failure_details.Spawn
	(*ExternalRepository)(nil),            // 66: failure_details.ExternalRepository
	(*BuildProgress)(nil),                 // 67: failure_details.BuildProgress
	(*RemoteOptions)(nil),                 // 68: failure_details.RemoteOptions
	(*ClientEnvironment)(nil),             // 69: failure_details.ClientEnvironment
	(*Crash)(nil),                         // 70: failure_details.Crash
	(*Throwable)(nil),                     // 71: failure_details.Throwable
	(*SymlinkForest)(nil),                 // 72: failure_details.SymlinkForest
	(*BuildReport)(nil),                   // 73: failure_details.BuildReport
	(*PackageOptions)(nil),                // 74: failure_details.PackageOptions
	(*RemoteExecution)(nil),               // 75: failure_details.RemoteExecution
	(*Execution)(nil),                     // 76: failure_details.Execution
	(*Workspaces)(nil),                    // 77: failure_details.Workspaces
	(*CrashOptions)(nil),                  // 78: failure_details.CrashOptions
	(*Filesystem)(nil),                    // 79: failure_details.Filesystem
	(*ExecutionOptions)(nil),              // 80: failure_details.ExecutionOptions
	(*Command)(nil),                       // 81: failure_details.Command
	(*GrpcServer)(nil),                    // 82: failure_details.GrpcServer
	(*CanonicalizeFlags)(nil),             // 83: failure_details.CanonicalizeFlags
	(*BuildConfiguration)(nil),            // 84: failure_details.BuildConfiguration
	(*InfoCommand)(nil),                   // 85: failure_details.InfoCommand
	(*MemoryOptions)(nil),                 // 86: failure_details.MemoryOptions
	(*Query)(nil),                         // 87: failure_details.Query
	(*LocalExecution)(nil),                // 88: failure_details.LocalExecution
	(*ActionCache)(nil),                   // 89: failure_details.ActionCache
	(*FetchCommand)(nil),                  // 90: failure_details.FetchCommand
	(*SyncCommand)(nil),                   // 91: failure_details.SyncCommand
	(*Sandbox)(nil),                       // 92: failure_details.Sandbox
	(*IncludeScanning)(nil),               // 93: failure_details.IncludeScanning
	(*TestCommand)(nil),                   // 94: failure_details.TestCommand
	(*ActionQuery)(nil),                   // 95: failure_details.ActionQuery
	(*TargetPatterns)(nil),                // 96: failure_details.TargetPatterns
	(*CleanCommand)(nil),                  // 97: failure_details.CleanCommand
	(*ConfigCommand)(nil),                 // 98: failure_details.ConfigCommand
	(*ConfigurableQuery)(nil),             // 99: failure_details.ConfigurableQuery
	(*DumpCommand)(nil),                   // 100: failure_details.DumpCommand
	(*HelpCommand)(nil),                   // 101: failure_details.HelpCommand
	(*MobileInstall)(nil),                 // 102: failure_details.MobileInstall
	(*ProfileCommand)(nil),                // 103: failure_details.ProfileCommand
	(*RunCommand)(nil),                    // 104: failure_details.RunCommand
	(*VersionCommand)(nil),                // 105: failure_details.VersionCommand
	(*PrintActionCommand)(nil),            // 106: failure_details.PrintActionCommand
	(*WorkspaceStatus)(nil),               // 107: failure_details.WorkspaceStatus
	(*JavaCompile)(nil),                   // 108: failure_details.JavaCompile
	(*ActionRewinding)(nil),               // 109: failure_details.ActionRewinding
	(*CppCompile)(nil),                    // 110: failure_details.CppCompile
	(*StarlarkAction)(nil),                // 111: failure_details.StarlarkAction
	(*NinjaAction)(nil),                   // 112: failure_details.NinjaAction
	(*DynamicExecution)(nil),              // 113: failure_details.DynamicExecution
	(*FailAction)(nil),                    // 114: failure_details.FailAction
	(*SymlinkAction)(nil),                 // 115: failure_details.SymlinkAction
	(*CppLink)(nil),                       // 116: failure_details.CppLink
	(*LtoAction)(nil),                     // 117: failure_details.LtoAction
	(*TestAction)(nil),                    // 118: failure_details.TestAction
	(*Worker)(nil),                        // 119: failure_details.Worker
	(*Analysis)(nil),                      // 120: failure_details.Analysis
	(*PackageLoading)(nil),                // 121: failure_details.PackageLoading
	(*Toolchain)(nil),                     // 122: failure_details.Toolchain
	(*StarlarkLoading)(nil),               // 123: failure_details.StarlarkLoading
	(*ExternalDeps)(nil),                  // 124: failure_details.ExternalDeps
	(*DiffAwareness)(nil),                 // 125: failure_details.DiffAwareness
	(*ModqueryCommand)(nil),               // 126: failure_details.ModqueryCommand
	(*descriptorpb.EnumValueOptions)(nil), // 127: google.protobuf.EnumValueOptions
}
var file_third_party_bazel_src_main_protobuf_failure_details_proto_depIdxs = []int32{
	64,  // 0: failure_details.FailureDetail.interrupted:type_name -> failure_details.Interrupted
	66,  // 1: failure_details.FailureDetail.external_repository:type_name -> failure_details.ExternalRepository
	67,  // 2: failure_details.FailureDetail.build_progress:type_name -> failure_details.BuildProgress
	68,  // 3: failure_details.FailureDetail.remote_options:type_name -> failure_details.RemoteOptions
	69,  // 4: failure_details.FailureDetail.client_environment:type_name -> failure_details.ClientEnvironment
	70,  // 5: failure_details.FailureDetail.crash:type_name -> failure_details.Crash
	72,  // 6: failure_details.FailureDetail.symlink_forest:type_name -> failure_details.SymlinkForest
	74,  // 7: failure_details.FailureDetail.package_options:type_name -> failure_details.PackageOptions
	75,  // 8: failure_details.FailureDetail.remote_execution:type_name -> failure_details.RemoteExecution
	76,  // 9: failure_details.FailureDetail.execution:type_name -> failure_details.Execution
	77,  // 10: failure_details.FailureDetail.workspaces:type_name -> failure_details.Workspaces
	78,  // 11: failure_details.FailureDetail.crash_options:type_name -> failure_details.CrashOptions
	79,  // 12: failure_details.FailureDetail.filesystem:type_name -> failure_details.Filesystem
	80,  // 13: failure_details.FailureDetail.execution_options:type_name -> failure_details.ExecutionOptions
	81,  // 14: failure_details.FailureDetail.command:type_name -> failure_details.Command
	65,  // 15: failure_details.FailureDetail.spawn:type_name -> failure_details.Spawn
	82,  // 16: failure_details.FailureDetail.grpc_server:type_name -> failure_details.GrpcServer
	83,  // 17: failure_details.FailureDetail.canonicalize_flags:type_name -> failure_details.CanonicalizeFlags
	84,  // 18: failure_details.FailureDetail.build_configuration:type_name -> failure_details.BuildConfiguration
	85,  // 19: failure_details.FailureDetail.info_command:type_name -> failure_details.InfoCommand
	86,  // 20: failure_details.FailureDetail.memory_options:type_name -> failure_details.MemoryOptions
	87,  // 21: failure_details.FailureDetail.query:type_name -> failure_details.Query
	88,  // 22: failure_details.FailureDetail.local_execution:type_name -> failure_details.LocalExecution
	89,  // 23: failure_details.FailureDetail.action_cache:type_name -> failure_details.ActionCache
	90,  // 24: failure_details.FailureDetail.fetch_command:type_name -> failure_details.FetchCommand
	91,  // 25: failure_details.FailureDetail.sync_command:type_name -> failure_details.SyncCommand
	92,  // 26: failure_details.FailureDetail.sandbox:type_name -> failure_details.Sandbox
	93,  // 27: failure_details.FailureDetail.include_scanning:type_name -> failure_details.IncludeScanning
	94,  // 28: failure_details.FailureDetail.test_command:type_name -> failure_details.TestCommand
	95,  // 29: failure_details.FailureDetail.action_query:type_name -> failure_details.ActionQuery
	96,  // 30: failure_details.FailureDetail.target_patterns:type_name -> failure_details.TargetPatterns
	97,  // 31: failure_details.FailureDetail.clean_command:type_name -> failure_details.CleanCommand
	98,  // 32: failure_details.FailureDetail.config_command:type_name -> failure_details.ConfigCommand
	99,  // 33: failure_details.FailureDetail.configurable_query:type_name -> failure_details.ConfigurableQuery
	100, // 34: failure_details.FailureDetail.dump_command:type_name -> failure_details.DumpCommand
	101, // 35: failure_details.FailureDetail.help_command:type_name -> failure_details.HelpCommand
	102, // 36: failure_details.FailureDetail.mobile_install:type_name -> failure_details.MobileInstall
	103, // 37: failure_details.FailureDetail.profile_command:type_name -> failure_details.ProfileCommand
	104, // 38: failure_details.FailureDetail.run_command:type_name -> failure_details.RunCommand
	105, // 39: failure_details.FailureDetail.version_command:type_name -> failure_details.VersionCommand
	106, // 40: failure_details.FailureDetail.print_action_command:type_name -> failure_details.PrintActionCommand
	107, // 41: failure_details.FailureDetail.workspace_status:type_name -> failure_details.WorkspaceStatus
	108, // 42: failure_details.FailureDetail.java_compile:type_name -> failure_details.JavaCompile
	109, // 43: failure_details.FailureDetail.action_rewinding:type_name -> failure_details.ActionRewinding
	110, // 44: failure_details.FailureDetail.cpp_compile:type_name -> failure_details.CppCompile
	111, // 45: failure_details.FailureDetail.starlark_action:type_name -> failure_details.StarlarkAction
	112, // 46: failure_details.FailureDetail.ninja_action:type_name -> failure_details.NinjaAction
	113, // 47: failure_details.FailureDetail.dynamic_execution:type_name -> failure_details.DynamicExecution
	114, // 48: failure_details.FailureDetail.fail_action:type_name -> failure_details.FailAction
	115, // 49: failure_details.FailureDetail.symlink_action:type_name -> failure_details.SymlinkAction
	116, // 50: failure_details.FailureDetail.cpp_link:type_name -> failure_details.CppLink
	117, // 51: failure_details.FailureDetail.lto_action:type_name -> failure_details.LtoAction
	118, // 52: failure_details.FailureDetail.test_action:type_name -> failure_details.TestAction
	119, // 53: failure_details.FailureDetail.worker:type_name -> failure_details.Worker
	120, // 54: failure_details.FailureDetail.analysis:type_name -> failure_details.Analysis
	121, // 55: failure_details.FailureDetail.package_loading:type_name -> failure_details.PackageLoading
	122, // 56: failure_details.FailureDetail.toolchain:type_name -> failure_details.Toolchain
	123, // 57: failure_details.FailureDetail.starlark_loading:type_name -> failure_details.StarlarkLoading
	124, // 58: failure_details.FailureDetail.external_deps:type_name -> failure_details.ExternalDeps
	125, // 59: failure_details.FailureDetail.diff_awareness:type_name -> failure_details.DiffAwareness
	126, // 60: failure_details.FailureDetail.modquery_command:type_name -> failure_details.ModqueryCommand
	73,  // 61: failure_details.FailureDetail.build_report:type_name -> failure_details.BuildReport
	0,   // 62: failure_details.Interrupted.code:type_name -> failure_details.Interrupted.Code
	1,   // 63: failure_details.Spawn.code:type_name -> failure_details.Spawn.Code
	2,   // 64: failure_details.ExternalRepository.code:type_name -> failure_details.ExternalRepository.Code
	3,   // 65: failure_details.BuildProgress.code:type_name -> failure_details.BuildProgress.Code
	4,   // 66: failure_details.RemoteOptions.code:type_name -> failure_details.RemoteOptions.Code
	5,   // 67: failure_details.ClientEnvironment.code:type_name -> failure_details.ClientEnvironment.Code
	6,   // 68: failure_details.Crash.code:type_name -> failure_details.Crash.Code
	71,  // 69: failure_details.Crash.causes:type_name -> failure_details.Throwable
	7,   // 70: failure_details.SymlinkForest.code:type_name -> failure_details.SymlinkForest.Code
	8,   // 71: failure_details.BuildReport.code:type_name -> failure_details.BuildReport.Code
	9,   // 72: failure_details.PackageOptions.code:type_name -> failure_details.PackageOptions.Code
	10,  // 73: failure_details.RemoteExecution.code:type_name -> failure_details.RemoteExecution.Code
	11,  // 74: failure_details.Execution.code:type_name -> failure_details.Execution.Code
	12,  // 75: failure_details.Workspaces.code:type_name -> failure_details.Workspaces.Code
	13,  // 76: failure_details.CrashOptions.code:type_name -> failure_details.CrashOptions.Code
	14,  // 77: failure_details.Filesystem.code:type_name -> failure_details.Filesystem.Code
	15,  // 78: failure_details.ExecutionOptions.code:type_name -> failure_details.ExecutionOptions.Code
	16,  // 79: failure_details.Command.code:type_name -> failure_details.Command.Code
	17,  // 80: failure_details.GrpcServer.code:type_name -> failure_details.GrpcServer.Code
	18,  // 81: failure_details.CanonicalizeFlags.code:type_name -> failure_details.CanonicalizeFlags.Code
	19,  // 82: failure_details.BuildConfiguration.code:type_name -> failure_details.BuildConfiguration.Code
	20,  // 83: failure_details.InfoCommand.code:type_name -> failure_details.InfoCommand.Code
	21,  // 84: failure_details.MemoryOptions.code:type_name -> failure_details.MemoryOptions.Code
	22,  // 85: failure_details.Query.code:type_name -> failure_details.Query.Code
	23,  // 86: failure_details.LocalExecution.code:type_name -> failure_details.LocalExecution.Code
	24,  // 87: failure_details.ActionCache.code:type_name -> failure_details.ActionCache.Code
	25,  // 88: failure_details.FetchCommand.code:type_name -> failure_details.FetchCommand.Code
	26,  // 89: failure_details.SyncCommand.code:type_name -> failure_details.SyncCommand.Code
	27,  // 90: failure_details.Sandbox.code:type_name -> failure_details.Sandbox.Code
	28,  // 91: failure_details.IncludeScanning.code:type_name -> failure_details.IncludeScanning.Code
	56,  // 92: failure_details.IncludeScanning.package_loading_code:type_name -> failure_details.PackageLoading.Code
	29,  // 93: failure_details.TestCommand.code:type_name -> failure_details.TestCommand.Code
	30,  // 94: failure_details.ActionQuery.code:type_name -> failure_details.ActionQuery.Code
	31,  // 95: failure_details.TargetPatterns.code:type_name -> failure_details.TargetPatterns.Code
	32,  // 96: failure_details.CleanCommand.code:type_name -> failure_details.CleanCommand.Code
	33,  // 97: failure_details.ConfigCommand.code:type_name -> failure_details.ConfigCommand.Code
	34,  // 98: failure_details.ConfigurableQuery.code:type_name -> failure_details.ConfigurableQuery.Code
	35,  // 99: failure_details.DumpCommand.code:type_name -> failure_details.DumpCommand.Code
	36,  // 100: failure_details.HelpCommand.code:type_name -> failure_details.HelpCommand.Code
	37,  // 101: failure_details.MobileInstall.code:type_name -> failure_details.MobileInstall.Code
	38,  // 102: failure_details.ProfileCommand.code:type_name -> failure_details.ProfileCommand.Code
	39,  // 103: failure_details.RunCommand.code:type_name -> failure_details.RunCommand.Code
	40,  // 104: failure_details.VersionCommand.code:type_name -> failure_details.VersionCommand.Code
	41,  // 105: failure_details.PrintActionCommand.code:type_name -> failure_details.PrintActionCommand.Code
	42,  // 106: failure_details.WorkspaceStatus.code:type_name -> failure_details.WorkspaceStatus.Code
	43,  // 107: failure_details.JavaCompile.code:type_name -> failure_details.JavaCompile.Code
	44,  // 108: failure_details.ActionRewinding.code:type_name -> failure_details.ActionRewinding.Code
	45,  // 109: failure_details.CppCompile.code:type_name -> failure_details.CppCompile.Code
	46,  // 110: failure_details.StarlarkAction.code:type_name -> failure_details.StarlarkAction.Code
	47,  // 111: failure_details.NinjaAction.code:type_name -> failure_details.NinjaAction.Code
	48,  // 112: failure_details.DynamicExecution.code:type_name -> failure_details.DynamicExecution.Code
	49,  // 113: failure_details.FailAction.code:type_name -> failure_details.FailAction.Code
	50,  // 114: failure_details.SymlinkAction.code:type_name -> failure_details.SymlinkAction.Code
	51,  // 115: failure_details.CppLink.code:type_name -> failure_details.CppLink.Code
	52,  // 116: failure_details.LtoAction.code:type_name -> failure_details.LtoAction.Code
	53,  // 117: failure_details.TestAction.code:type_name -> failure_details.TestAction.Code
	54,  // 118: failure_details.Worker.code:type_name -> failure_details.Worker.Code
	55,  // 119: failure_details.Analysis.code:type_name -> failure_details.Analysis.Code
	56,  // 120: failure_details.PackageLoading.code:type_name -> failure_details.PackageLoading.Code
	57,  // 121: failure_details.Toolchain.code:type_name -> failure_details.Toolchain.Code
	58,  // 122: failure_details.StarlarkLoading.code:type_name -> failure_details.StarlarkLoading.Code
	59,  // 123: failure_details.ExternalDeps.code:type_name -> failure_details.ExternalDeps.Code
	60,  // 124: failure_details.DiffAwareness.code:type_name -> failure_details.DiffAwareness.Code
	61,  // 125: failure_details.ModqueryCommand.code:type_name -> failure_details.ModqueryCommand.Code
	127, // 126: failure_details.metadata:extendee -> google.protobuf.EnumValueOptions
	62,  // 127: failure_details.metadata:type_name -> failure_details.FailureDetailMetadata
	128, // [128:128] is the sub-list for method output_type
	128, // [128:128] is the sub-list for method input_type
	127, // [127:128] is the sub-list for extension type_name
	126, // [126:127] is the sub-list for extension extendee
	0,   // [0:126] is the sub-list for field type_name
}

func init() { file_third_party_bazel_src_main_protobuf_failure_details_proto_init() }
func file_third_party_bazel_src_main_protobuf_failure_details_proto_init() {
	if File_third_party_bazel_src_main_protobuf_failure_details_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureDetailMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interrupted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spawn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalRepository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientEnvironment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Throwable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymlinkForest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrashOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filesystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanonicalizeFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sandbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncludeScanning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetPatterns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurableQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelpCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobileInstall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrintActionCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaCompile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRewinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CppCompile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NinjaAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymlinkAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CppLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LtoAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Analysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageLoading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Toolchain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkLoading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalDeps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffAwareness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModqueryCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*FailureDetail_Interrupted)(nil),
		(*FailureDetail_ExternalRepository)(nil),
		(*FailureDetail_BuildProgress)(nil),
		(*FailureDetail_RemoteOptions)(nil),
		(*FailureDetail_ClientEnvironment)(nil),
		(*FailureDetail_Crash)(nil),
		(*FailureDetail_SymlinkForest)(nil),
		(*FailureDetail_PackageOptions)(nil),
		(*FailureDetail_RemoteExecution)(nil),
		(*FailureDetail_Execution)(nil),
		(*FailureDetail_Workspaces)(nil),
		(*FailureDetail_CrashOptions)(nil),
		(*FailureDetail_Filesystem)(nil),
		(*FailureDetail_ExecutionOptions)(nil),
		(*FailureDetail_Command)(nil),
		(*FailureDetail_Spawn)(nil),
		(*FailureDetail_GrpcServer)(nil),
		(*FailureDetail_CanonicalizeFlags)(nil),
		(*FailureDetail_BuildConfiguration)(nil),
		(*FailureDetail_InfoCommand)(nil),
		(*FailureDetail_MemoryOptions)(nil),
		(*FailureDetail_Query)(nil),
		(*FailureDetail_LocalExecution)(nil),
		(*FailureDetail_ActionCache)(nil),
		(*FailureDetail_FetchCommand)(nil),
		(*FailureDetail_SyncCommand)(nil),
		(*FailureDetail_Sandbox)(nil),
		(*FailureDetail_IncludeScanning)(nil),
		(*FailureDetail_TestCommand)(nil),
		(*FailureDetail_ActionQuery)(nil),
		(*FailureDetail_TargetPatterns)(nil),
		(*FailureDetail_CleanCommand)(nil),
		(*FailureDetail_ConfigCommand)(nil),
		(*FailureDetail_ConfigurableQuery)(nil),
		(*FailureDetail_DumpCommand)(nil),
		(*FailureDetail_HelpCommand)(nil),
		(*FailureDetail_MobileInstall)(nil),
		(*FailureDetail_ProfileCommand)(nil),
		(*FailureDetail_RunCommand)(nil),
		(*FailureDetail_VersionCommand)(nil),
		(*FailureDetail_PrintActionCommand)(nil),
		(*FailureDetail_WorkspaceStatus)(nil),
		(*FailureDetail_JavaCompile)(nil),
		(*FailureDetail_ActionRewinding)(nil),
		(*FailureDetail_CppCompile)(nil),
		(*FailureDetail_StarlarkAction)(nil),
		(*FailureDetail_NinjaAction)(nil),
		(*FailureDetail_DynamicExecution)(nil),
		(*FailureDetail_FailAction)(nil),
		(*FailureDetail_SymlinkAction)(nil),
		(*FailureDetail_CppLink)(nil),
		(*FailureDetail_LtoAction)(nil),
		(*FailureDetail_TestAction)(nil),
		(*FailureDetail_Worker)(nil),
		(*FailureDetail_Analysis)(nil),
		(*FailureDetail_PackageLoading)(nil),
		(*FailureDetail_Toolchain)(nil),
		(*FailureDetail_StarlarkLoading)(nil),
		(*FailureDetail_ExternalDeps)(nil),
		(*FailureDetail_DiffAwareness)(nil),
		(*FailureDetail_ModqueryCommand)(nil),
		(*FailureDetail_BuildReport)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDesc,
			NumEnums:      62,
			NumMessages:   65,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_third_party_bazel_src_main_protobuf_failure_details_proto_goTypes,
		DependencyIndexes: file_third_party_bazel_src_main_protobuf_failure_details_proto_depIdxs,
		EnumInfos:         file_third_party_bazel_src_main_protobuf_failure_details_proto_enumTypes,
		MessageInfos:      file_third_party_bazel_src_main_protobuf_failure_details_proto_msgTypes,
		ExtensionInfos:    file_third_party_bazel_src_main_protobuf_failure_details_proto_extTypes,
	}.Build()
	File_third_party_bazel_src_main_protobuf_failure_details_proto = out.File
	file_third_party_bazel_src_main_protobuf_failure_details_proto_rawDesc = nil
	file_third_party_bazel_src_main_protobuf_failure_details_proto_goTypes = nil
	file_third_party_bazel_src_main_protobuf_failure_details_proto_depIdxs = nil
}
