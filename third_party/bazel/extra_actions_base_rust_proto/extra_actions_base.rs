// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `third_party/bazel/src/main/protobuf/extra_actions_base.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct ExtraActionSummary {
    // message fields
    action: ::protobuf::RepeatedField<DetailedExtraActionInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExtraActionSummary {
    fn default() -> &'a ExtraActionSummary {
        <ExtraActionSummary as ::protobuf::Message>::default_instance()
    }
}

impl ExtraActionSummary {
    pub fn new() -> ExtraActionSummary {
        ::std::default::Default::default()
    }

    // repeated .blaze.DetailedExtraActionInfo action = 1;


    pub fn get_action(&self) -> &[DetailedExtraActionInfo] {
        &self.action
    }
    pub fn clear_action(&mut self) {
        self.action.clear();
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: ::protobuf::RepeatedField<DetailedExtraActionInfo>) {
        self.action = v;
    }

    // Mutable pointer to the field.
    pub fn mut_action(&mut self) -> &mut ::protobuf::RepeatedField<DetailedExtraActionInfo> {
        &mut self.action
    }

    // Take field
    pub fn take_action(&mut self) -> ::protobuf::RepeatedField<DetailedExtraActionInfo> {
        ::std::mem::replace(&mut self.action, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ExtraActionSummary {
    fn is_initialized(&self) -> bool {
        for v in &self.action {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.action)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.action {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.action {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExtraActionSummary {
        ExtraActionSummary::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DetailedExtraActionInfo>>(
                    "action",
                    |m: &ExtraActionSummary| { &m.action },
                    |m: &mut ExtraActionSummary| { &mut m.action },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExtraActionSummary>(
                    "ExtraActionSummary",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExtraActionSummary {
        static mut instance: ::protobuf::lazy::Lazy<ExtraActionSummary> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExtraActionSummary,
        };
        unsafe {
            instance.get(ExtraActionSummary::new)
        }
    }
}

impl ::protobuf::Clear for ExtraActionSummary {
    fn clear(&mut self) {
        self.action.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExtraActionSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtraActionSummary {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DetailedExtraActionInfo {
    // message fields
    triggering_file: ::protobuf::SingularField<::std::string::String>,
    action: ::protobuf::SingularPtrField<ExtraActionInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DetailedExtraActionInfo {
    fn default() -> &'a DetailedExtraActionInfo {
        <DetailedExtraActionInfo as ::protobuf::Message>::default_instance()
    }
}

impl DetailedExtraActionInfo {
    pub fn new() -> DetailedExtraActionInfo {
        ::std::default::Default::default()
    }

    // optional string triggering_file = 1;


    pub fn get_triggering_file(&self) -> &str {
        match self.triggering_file.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_triggering_file(&mut self) {
        self.triggering_file.clear();
    }

    pub fn has_triggering_file(&self) -> bool {
        self.triggering_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_triggering_file(&mut self, v: ::std::string::String) {
        self.triggering_file = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_triggering_file(&mut self) -> &mut ::std::string::String {
        if self.triggering_file.is_none() {
            self.triggering_file.set_default();
        }
        self.triggering_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_triggering_file(&mut self) -> ::std::string::String {
        self.triggering_file.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .blaze.ExtraActionInfo action = 2;


    pub fn get_action(&self) -> &ExtraActionInfo {
        self.action.as_ref().unwrap_or_else(|| ExtraActionInfo::default_instance())
    }
    pub fn clear_action(&mut self) {
        self.action.clear();
    }

    pub fn has_action(&self) -> bool {
        self.action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: ExtraActionInfo) {
        self.action = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action(&mut self) -> &mut ExtraActionInfo {
        if self.action.is_none() {
            self.action.set_default();
        }
        self.action.as_mut().unwrap()
    }

    // Take field
    pub fn take_action(&mut self) -> ExtraActionInfo {
        self.action.take().unwrap_or_else(|| ExtraActionInfo::new())
    }
}

impl ::protobuf::Message for DetailedExtraActionInfo {
    fn is_initialized(&self) -> bool {
        if self.action.is_none() {
            return false;
        }
        for v in &self.action {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.triggering_file)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.triggering_file.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.action.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.triggering_file.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.action.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DetailedExtraActionInfo {
        DetailedExtraActionInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "triggering_file",
                    |m: &DetailedExtraActionInfo| { &m.triggering_file },
                    |m: &mut DetailedExtraActionInfo| { &mut m.triggering_file },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ExtraActionInfo>>(
                    "action",
                    |m: &DetailedExtraActionInfo| { &m.action },
                    |m: &mut DetailedExtraActionInfo| { &mut m.action },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DetailedExtraActionInfo>(
                    "DetailedExtraActionInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DetailedExtraActionInfo {
        static mut instance: ::protobuf::lazy::Lazy<DetailedExtraActionInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DetailedExtraActionInfo,
        };
        unsafe {
            instance.get(DetailedExtraActionInfo::new)
        }
    }
}

impl ::protobuf::Clear for DetailedExtraActionInfo {
    fn clear(&mut self) {
        self.triggering_file.clear();
        self.action.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DetailedExtraActionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DetailedExtraActionInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExtraActionInfo {
    // message fields
    owner: ::protobuf::SingularField<::std::string::String>,
    aspect_name: ::protobuf::SingularField<::std::string::String>,
    pub aspect_parameters: ::std::collections::HashMap<::std::string::String, ExtraActionInfo_StringList>,
    aspects: ::protobuf::RepeatedField<ExtraActionInfo_AspectDescriptor>,
    id: ::protobuf::SingularField<::std::string::String>,
    mnemonic: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExtraActionInfo {
    fn default() -> &'a ExtraActionInfo {
        <ExtraActionInfo as ::protobuf::Message>::default_instance()
    }
}

impl ExtraActionInfo {
    pub fn new() -> ExtraActionInfo {
        ::std::default::Default::default()
    }

    // optional string owner = 1;


    pub fn get_owner(&self) -> &str {
        match self.owner.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_owner(&mut self) {
        self.owner.clear();
    }

    pub fn has_owner(&self) -> bool {
        self.owner.is_some()
    }

    // Param is passed by value, moved
    pub fn set_owner(&mut self, v: ::std::string::String) {
        self.owner = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_owner(&mut self) -> &mut ::std::string::String {
        if self.owner.is_none() {
            self.owner.set_default();
        }
        self.owner.as_mut().unwrap()
    }

    // Take field
    pub fn take_owner(&mut self) -> ::std::string::String {
        self.owner.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string aspect_name = 6;


    pub fn get_aspect_name(&self) -> &str {
        match self.aspect_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_aspect_name(&mut self) {
        self.aspect_name.clear();
    }

    pub fn has_aspect_name(&self) -> bool {
        self.aspect_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_aspect_name(&mut self, v: ::std::string::String) {
        self.aspect_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_aspect_name(&mut self) -> &mut ::std::string::String {
        if self.aspect_name.is_none() {
            self.aspect_name.set_default();
        }
        self.aspect_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_aspect_name(&mut self) -> ::std::string::String {
        self.aspect_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .blaze.ExtraActionInfo.AspectParametersEntry aspect_parameters = 7;


    pub fn get_aspect_parameters(&self) -> &::std::collections::HashMap<::std::string::String, ExtraActionInfo_StringList> {
        &self.aspect_parameters
    }
    pub fn clear_aspect_parameters(&mut self) {
        self.aspect_parameters.clear();
    }

    // Param is passed by value, moved
    pub fn set_aspect_parameters(&mut self, v: ::std::collections::HashMap<::std::string::String, ExtraActionInfo_StringList>) {
        self.aspect_parameters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_aspect_parameters(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ExtraActionInfo_StringList> {
        &mut self.aspect_parameters
    }

    // Take field
    pub fn take_aspect_parameters(&mut self) -> ::std::collections::HashMap<::std::string::String, ExtraActionInfo_StringList> {
        ::std::mem::replace(&mut self.aspect_parameters, ::std::collections::HashMap::new())
    }

    // repeated .blaze.ExtraActionInfo.AspectDescriptor aspects = 8;


    pub fn get_aspects(&self) -> &[ExtraActionInfo_AspectDescriptor] {
        &self.aspects
    }
    pub fn clear_aspects(&mut self) {
        self.aspects.clear();
    }

    // Param is passed by value, moved
    pub fn set_aspects(&mut self, v: ::protobuf::RepeatedField<ExtraActionInfo_AspectDescriptor>) {
        self.aspects = v;
    }

    // Mutable pointer to the field.
    pub fn mut_aspects(&mut self) -> &mut ::protobuf::RepeatedField<ExtraActionInfo_AspectDescriptor> {
        &mut self.aspects
    }

    // Take field
    pub fn take_aspects(&mut self) -> ::protobuf::RepeatedField<ExtraActionInfo_AspectDescriptor> {
        ::std::mem::replace(&mut self.aspects, ::protobuf::RepeatedField::new())
    }

    // optional string id = 2;


    pub fn get_id(&self) -> &str {
        match self.id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        self.id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string mnemonic = 5;


    pub fn get_mnemonic(&self) -> &str {
        match self.mnemonic.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_mnemonic(&mut self) {
        self.mnemonic.clear();
    }

    pub fn has_mnemonic(&self) -> bool {
        self.mnemonic.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mnemonic(&mut self, v: ::std::string::String) {
        self.mnemonic = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mnemonic(&mut self) -> &mut ::std::string::String {
        if self.mnemonic.is_none() {
            self.mnemonic.set_default();
        }
        self.mnemonic.as_mut().unwrap()
    }

    // Take field
    pub fn take_mnemonic(&mut self) -> ::std::string::String {
        self.mnemonic.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for ExtraActionInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.aspects {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.owner)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.aspect_name)?;
                },
                7 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ExtraActionInfo_StringList>>(wire_type, is, &mut self.aspect_parameters)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.aspects)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.mnemonic)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.owner.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.aspect_name.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ExtraActionInfo_StringList>>(7, &self.aspect_parameters);
        for value in &self.aspects {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.mnemonic.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.owner.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.aspect_name.as_ref() {
            os.write_string(6, &v)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ExtraActionInfo_StringList>>(7, &self.aspect_parameters, os)?;
        for v in &self.aspects {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.id.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.mnemonic.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExtraActionInfo {
        ExtraActionInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "owner",
                    |m: &ExtraActionInfo| { &m.owner },
                    |m: &mut ExtraActionInfo| { &mut m.owner },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "aspect_name",
                    |m: &ExtraActionInfo| { &m.aspect_name },
                    |m: &mut ExtraActionInfo| { &mut m.aspect_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ExtraActionInfo_StringList>>(
                    "aspect_parameters",
                    |m: &ExtraActionInfo| { &m.aspect_parameters },
                    |m: &mut ExtraActionInfo| { &mut m.aspect_parameters },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ExtraActionInfo_AspectDescriptor>>(
                    "aspects",
                    |m: &ExtraActionInfo| { &m.aspects },
                    |m: &mut ExtraActionInfo| { &mut m.aspects },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &ExtraActionInfo| { &m.id },
                    |m: &mut ExtraActionInfo| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mnemonic",
                    |m: &ExtraActionInfo| { &m.mnemonic },
                    |m: &mut ExtraActionInfo| { &mut m.mnemonic },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExtraActionInfo>(
                    "ExtraActionInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExtraActionInfo {
        static mut instance: ::protobuf::lazy::Lazy<ExtraActionInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExtraActionInfo,
        };
        unsafe {
            instance.get(ExtraActionInfo::new)
        }
    }
}

impl ::protobuf::Clear for ExtraActionInfo {
    fn clear(&mut self) {
        self.owner.clear();
        self.aspect_name.clear();
        self.aspect_parameters.clear();
        self.aspects.clear();
        self.id.clear();
        self.mnemonic.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExtraActionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtraActionInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExtraActionInfo_StringList {
    // message fields
    value: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExtraActionInfo_StringList {
    fn default() -> &'a ExtraActionInfo_StringList {
        <ExtraActionInfo_StringList as ::protobuf::Message>::default_instance()
    }
}

impl ExtraActionInfo_StringList {
    pub fn new() -> ExtraActionInfo_StringList {
        ::std::default::Default::default()
    }

    // repeated string value = 1;


    pub fn get_value(&self) -> &[::std::string::String] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.value, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ExtraActionInfo_StringList {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.value {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.value {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExtraActionInfo_StringList {
        ExtraActionInfo_StringList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &ExtraActionInfo_StringList| { &m.value },
                    |m: &mut ExtraActionInfo_StringList| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExtraActionInfo_StringList>(
                    "ExtraActionInfo_StringList",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExtraActionInfo_StringList {
        static mut instance: ::protobuf::lazy::Lazy<ExtraActionInfo_StringList> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExtraActionInfo_StringList,
        };
        unsafe {
            instance.get(ExtraActionInfo_StringList::new)
        }
    }
}

impl ::protobuf::Clear for ExtraActionInfo_StringList {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExtraActionInfo_StringList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtraActionInfo_StringList {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExtraActionInfo_AspectDescriptor {
    // message fields
    aspect_name: ::protobuf::SingularField<::std::string::String>,
    pub aspect_parameters: ::std::collections::HashMap<::std::string::String, ExtraActionInfo_AspectDescriptor_StringList>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExtraActionInfo_AspectDescriptor {
    fn default() -> &'a ExtraActionInfo_AspectDescriptor {
        <ExtraActionInfo_AspectDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl ExtraActionInfo_AspectDescriptor {
    pub fn new() -> ExtraActionInfo_AspectDescriptor {
        ::std::default::Default::default()
    }

    // optional string aspect_name = 1;


    pub fn get_aspect_name(&self) -> &str {
        match self.aspect_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_aspect_name(&mut self) {
        self.aspect_name.clear();
    }

    pub fn has_aspect_name(&self) -> bool {
        self.aspect_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_aspect_name(&mut self, v: ::std::string::String) {
        self.aspect_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_aspect_name(&mut self) -> &mut ::std::string::String {
        if self.aspect_name.is_none() {
            self.aspect_name.set_default();
        }
        self.aspect_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_aspect_name(&mut self) -> ::std::string::String {
        self.aspect_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .blaze.ExtraActionInfo.AspectDescriptor.AspectParametersEntry aspect_parameters = 2;


    pub fn get_aspect_parameters(&self) -> &::std::collections::HashMap<::std::string::String, ExtraActionInfo_AspectDescriptor_StringList> {
        &self.aspect_parameters
    }
    pub fn clear_aspect_parameters(&mut self) {
        self.aspect_parameters.clear();
    }

    // Param is passed by value, moved
    pub fn set_aspect_parameters(&mut self, v: ::std::collections::HashMap<::std::string::String, ExtraActionInfo_AspectDescriptor_StringList>) {
        self.aspect_parameters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_aspect_parameters(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ExtraActionInfo_AspectDescriptor_StringList> {
        &mut self.aspect_parameters
    }

    // Take field
    pub fn take_aspect_parameters(&mut self) -> ::std::collections::HashMap<::std::string::String, ExtraActionInfo_AspectDescriptor_StringList> {
        ::std::mem::replace(&mut self.aspect_parameters, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for ExtraActionInfo_AspectDescriptor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.aspect_name)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ExtraActionInfo_AspectDescriptor_StringList>>(wire_type, is, &mut self.aspect_parameters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.aspect_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ExtraActionInfo_AspectDescriptor_StringList>>(2, &self.aspect_parameters);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.aspect_name.as_ref() {
            os.write_string(1, &v)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ExtraActionInfo_AspectDescriptor_StringList>>(2, &self.aspect_parameters, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExtraActionInfo_AspectDescriptor {
        ExtraActionInfo_AspectDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "aspect_name",
                    |m: &ExtraActionInfo_AspectDescriptor| { &m.aspect_name },
                    |m: &mut ExtraActionInfo_AspectDescriptor| { &mut m.aspect_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ExtraActionInfo_AspectDescriptor_StringList>>(
                    "aspect_parameters",
                    |m: &ExtraActionInfo_AspectDescriptor| { &m.aspect_parameters },
                    |m: &mut ExtraActionInfo_AspectDescriptor| { &mut m.aspect_parameters },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExtraActionInfo_AspectDescriptor>(
                    "ExtraActionInfo_AspectDescriptor",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExtraActionInfo_AspectDescriptor {
        static mut instance: ::protobuf::lazy::Lazy<ExtraActionInfo_AspectDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExtraActionInfo_AspectDescriptor,
        };
        unsafe {
            instance.get(ExtraActionInfo_AspectDescriptor::new)
        }
    }
}

impl ::protobuf::Clear for ExtraActionInfo_AspectDescriptor {
    fn clear(&mut self) {
        self.aspect_name.clear();
        self.aspect_parameters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExtraActionInfo_AspectDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtraActionInfo_AspectDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExtraActionInfo_AspectDescriptor_StringList {
    // message fields
    value: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExtraActionInfo_AspectDescriptor_StringList {
    fn default() -> &'a ExtraActionInfo_AspectDescriptor_StringList {
        <ExtraActionInfo_AspectDescriptor_StringList as ::protobuf::Message>::default_instance()
    }
}

impl ExtraActionInfo_AspectDescriptor_StringList {
    pub fn new() -> ExtraActionInfo_AspectDescriptor_StringList {
        ::std::default::Default::default()
    }

    // repeated string value = 1;


    pub fn get_value(&self) -> &[::std::string::String] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.value, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ExtraActionInfo_AspectDescriptor_StringList {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.value {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.value {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExtraActionInfo_AspectDescriptor_StringList {
        ExtraActionInfo_AspectDescriptor_StringList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &ExtraActionInfo_AspectDescriptor_StringList| { &m.value },
                    |m: &mut ExtraActionInfo_AspectDescriptor_StringList| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExtraActionInfo_AspectDescriptor_StringList>(
                    "ExtraActionInfo_AspectDescriptor_StringList",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExtraActionInfo_AspectDescriptor_StringList {
        static mut instance: ::protobuf::lazy::Lazy<ExtraActionInfo_AspectDescriptor_StringList> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExtraActionInfo_AspectDescriptor_StringList,
        };
        unsafe {
            instance.get(ExtraActionInfo_AspectDescriptor_StringList::new)
        }
    }
}

impl ::protobuf::Clear for ExtraActionInfo_AspectDescriptor_StringList {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExtraActionInfo_AspectDescriptor_StringList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtraActionInfo_AspectDescriptor_StringList {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnvironmentVariable {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    value: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnvironmentVariable {
    fn default() -> &'a EnvironmentVariable {
        <EnvironmentVariable as ::protobuf::Message>::default_instance()
    }
}

impl EnvironmentVariable {
    pub fn new() -> EnvironmentVariable {
        ::std::default::Default::default()
    }

    // required string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string value = 2;


    pub fn get_value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for EnvironmentVariable {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnvironmentVariable {
        EnvironmentVariable::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &EnvironmentVariable| { &m.name },
                    |m: &mut EnvironmentVariable| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &EnvironmentVariable| { &m.value },
                    |m: &mut EnvironmentVariable| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EnvironmentVariable>(
                    "EnvironmentVariable",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EnvironmentVariable {
        static mut instance: ::protobuf::lazy::Lazy<EnvironmentVariable> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EnvironmentVariable,
        };
        unsafe {
            instance.get(EnvironmentVariable::new)
        }
    }
}

impl ::protobuf::Clear for EnvironmentVariable {
    fn clear(&mut self) {
        self.name.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnvironmentVariable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnvironmentVariable {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SpawnInfo {
    // message fields
    argument: ::protobuf::RepeatedField<::std::string::String>,
    variable: ::protobuf::RepeatedField<EnvironmentVariable>,
    input_file: ::protobuf::RepeatedField<::std::string::String>,
    output_file: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SpawnInfo {
    fn default() -> &'a SpawnInfo {
        <SpawnInfo as ::protobuf::Message>::default_instance()
    }
}

impl SpawnInfo {
    pub fn new() -> SpawnInfo {
        ::std::default::Default::default()
    }

    // repeated string argument = 1;


    pub fn get_argument(&self) -> &[::std::string::String] {
        &self.argument
    }
    pub fn clear_argument(&mut self) {
        self.argument.clear();
    }

    // Param is passed by value, moved
    pub fn set_argument(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.argument = v;
    }

    // Mutable pointer to the field.
    pub fn mut_argument(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.argument
    }

    // Take field
    pub fn take_argument(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.argument, ::protobuf::RepeatedField::new())
    }

    // repeated .blaze.EnvironmentVariable variable = 2;


    pub fn get_variable(&self) -> &[EnvironmentVariable] {
        &self.variable
    }
    pub fn clear_variable(&mut self) {
        self.variable.clear();
    }

    // Param is passed by value, moved
    pub fn set_variable(&mut self, v: ::protobuf::RepeatedField<EnvironmentVariable>) {
        self.variable = v;
    }

    // Mutable pointer to the field.
    pub fn mut_variable(&mut self) -> &mut ::protobuf::RepeatedField<EnvironmentVariable> {
        &mut self.variable
    }

    // Take field
    pub fn take_variable(&mut self) -> ::protobuf::RepeatedField<EnvironmentVariable> {
        ::std::mem::replace(&mut self.variable, ::protobuf::RepeatedField::new())
    }

    // repeated string input_file = 4;


    pub fn get_input_file(&self) -> &[::std::string::String] {
        &self.input_file
    }
    pub fn clear_input_file(&mut self) {
        self.input_file.clear();
    }

    // Param is passed by value, moved
    pub fn set_input_file(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.input_file = v;
    }

    // Mutable pointer to the field.
    pub fn mut_input_file(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.input_file
    }

    // Take field
    pub fn take_input_file(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.input_file, ::protobuf::RepeatedField::new())
    }

    // repeated string output_file = 5;


    pub fn get_output_file(&self) -> &[::std::string::String] {
        &self.output_file
    }
    pub fn clear_output_file(&mut self) {
        self.output_file.clear();
    }

    // Param is passed by value, moved
    pub fn set_output_file(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.output_file = v;
    }

    // Mutable pointer to the field.
    pub fn mut_output_file(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.output_file
    }

    // Take field
    pub fn take_output_file(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.output_file, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SpawnInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.variable {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.argument)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.variable)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.input_file)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.output_file)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.argument {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.variable {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.input_file {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in &self.output_file {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.argument {
            os.write_string(1, &v)?;
        };
        for v in &self.variable {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.input_file {
            os.write_string(4, &v)?;
        };
        for v in &self.output_file {
            os.write_string(5, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SpawnInfo {
        SpawnInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "argument",
                    |m: &SpawnInfo| { &m.argument },
                    |m: &mut SpawnInfo| { &mut m.argument },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EnvironmentVariable>>(
                    "variable",
                    |m: &SpawnInfo| { &m.variable },
                    |m: &mut SpawnInfo| { &mut m.variable },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "input_file",
                    |m: &SpawnInfo| { &m.input_file },
                    |m: &mut SpawnInfo| { &mut m.input_file },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "output_file",
                    |m: &SpawnInfo| { &m.output_file },
                    |m: &mut SpawnInfo| { &mut m.output_file },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SpawnInfo>(
                    "SpawnInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SpawnInfo {
        static mut instance: ::protobuf::lazy::Lazy<SpawnInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SpawnInfo,
        };
        unsafe {
            instance.get(SpawnInfo::new)
        }
    }
}

impl ::protobuf::Clear for SpawnInfo {
    fn clear(&mut self) {
        self.argument.clear();
        self.variable.clear();
        self.input_file.clear();
        self.output_file.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SpawnInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SpawnInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CppCompileInfo {
    // message fields
    tool: ::protobuf::SingularField<::std::string::String>,
    compiler_option: ::protobuf::RepeatedField<::std::string::String>,
    source_file: ::protobuf::SingularField<::std::string::String>,
    output_file: ::protobuf::SingularField<::std::string::String>,
    sources_and_headers: ::protobuf::RepeatedField<::std::string::String>,
    variable: ::protobuf::RepeatedField<EnvironmentVariable>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CppCompileInfo {
    fn default() -> &'a CppCompileInfo {
        <CppCompileInfo as ::protobuf::Message>::default_instance()
    }
}

impl CppCompileInfo {
    pub fn new() -> CppCompileInfo {
        ::std::default::Default::default()
    }

    // optional string tool = 1;


    pub fn get_tool(&self) -> &str {
        match self.tool.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_tool(&mut self) {
        self.tool.clear();
    }

    pub fn has_tool(&self) -> bool {
        self.tool.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tool(&mut self, v: ::std::string::String) {
        self.tool = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tool(&mut self) -> &mut ::std::string::String {
        if self.tool.is_none() {
            self.tool.set_default();
        }
        self.tool.as_mut().unwrap()
    }

    // Take field
    pub fn take_tool(&mut self) -> ::std::string::String {
        self.tool.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated string compiler_option = 2;


    pub fn get_compiler_option(&self) -> &[::std::string::String] {
        &self.compiler_option
    }
    pub fn clear_compiler_option(&mut self) {
        self.compiler_option.clear();
    }

    // Param is passed by value, moved
    pub fn set_compiler_option(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.compiler_option = v;
    }

    // Mutable pointer to the field.
    pub fn mut_compiler_option(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.compiler_option
    }

    // Take field
    pub fn take_compiler_option(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.compiler_option, ::protobuf::RepeatedField::new())
    }

    // optional string source_file = 3;


    pub fn get_source_file(&self) -> &str {
        match self.source_file.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_source_file(&mut self) {
        self.source_file.clear();
    }

    pub fn has_source_file(&self) -> bool {
        self.source_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_file(&mut self, v: ::std::string::String) {
        self.source_file = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_file(&mut self) -> &mut ::std::string::String {
        if self.source_file.is_none() {
            self.source_file.set_default();
        }
        self.source_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_file(&mut self) -> ::std::string::String {
        self.source_file.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string output_file = 4;


    pub fn get_output_file(&self) -> &str {
        match self.output_file.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_output_file(&mut self) {
        self.output_file.clear();
    }

    pub fn has_output_file(&self) -> bool {
        self.output_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_output_file(&mut self, v: ::std::string::String) {
        self.output_file = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output_file(&mut self) -> &mut ::std::string::String {
        if self.output_file.is_none() {
            self.output_file.set_default();
        }
        self.output_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_output_file(&mut self) -> ::std::string::String {
        self.output_file.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated string sources_and_headers = 5;


    pub fn get_sources_and_headers(&self) -> &[::std::string::String] {
        &self.sources_and_headers
    }
    pub fn clear_sources_and_headers(&mut self) {
        self.sources_and_headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_sources_and_headers(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.sources_and_headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sources_and_headers(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.sources_and_headers
    }

    // Take field
    pub fn take_sources_and_headers(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.sources_and_headers, ::protobuf::RepeatedField::new())
    }

    // repeated .blaze.EnvironmentVariable variable = 6;


    pub fn get_variable(&self) -> &[EnvironmentVariable] {
        &self.variable
    }
    pub fn clear_variable(&mut self) {
        self.variable.clear();
    }

    // Param is passed by value, moved
    pub fn set_variable(&mut self, v: ::protobuf::RepeatedField<EnvironmentVariable>) {
        self.variable = v;
    }

    // Mutable pointer to the field.
    pub fn mut_variable(&mut self) -> &mut ::protobuf::RepeatedField<EnvironmentVariable> {
        &mut self.variable
    }

    // Take field
    pub fn take_variable(&mut self) -> ::protobuf::RepeatedField<EnvironmentVariable> {
        ::std::mem::replace(&mut self.variable, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CppCompileInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.variable {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.tool)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.compiler_option)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.source_file)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.output_file)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.sources_and_headers)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.variable)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tool.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.compiler_option {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let Some(ref v) = self.source_file.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.output_file.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        for value in &self.sources_and_headers {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        for value in &self.variable {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tool.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.compiler_option {
            os.write_string(2, &v)?;
        };
        if let Some(ref v) = self.source_file.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.output_file.as_ref() {
            os.write_string(4, &v)?;
        }
        for v in &self.sources_and_headers {
            os.write_string(5, &v)?;
        };
        for v in &self.variable {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CppCompileInfo {
        CppCompileInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "tool",
                    |m: &CppCompileInfo| { &m.tool },
                    |m: &mut CppCompileInfo| { &mut m.tool },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "compiler_option",
                    |m: &CppCompileInfo| { &m.compiler_option },
                    |m: &mut CppCompileInfo| { &mut m.compiler_option },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "source_file",
                    |m: &CppCompileInfo| { &m.source_file },
                    |m: &mut CppCompileInfo| { &mut m.source_file },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "output_file",
                    |m: &CppCompileInfo| { &m.output_file },
                    |m: &mut CppCompileInfo| { &mut m.output_file },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sources_and_headers",
                    |m: &CppCompileInfo| { &m.sources_and_headers },
                    |m: &mut CppCompileInfo| { &mut m.sources_and_headers },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EnvironmentVariable>>(
                    "variable",
                    |m: &CppCompileInfo| { &m.variable },
                    |m: &mut CppCompileInfo| { &mut m.variable },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CppCompileInfo>(
                    "CppCompileInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CppCompileInfo {
        static mut instance: ::protobuf::lazy::Lazy<CppCompileInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CppCompileInfo,
        };
        unsafe {
            instance.get(CppCompileInfo::new)
        }
    }
}

impl ::protobuf::Clear for CppCompileInfo {
    fn clear(&mut self) {
        self.tool.clear();
        self.compiler_option.clear();
        self.source_file.clear();
        self.output_file.clear();
        self.sources_and_headers.clear();
        self.variable.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CppCompileInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CppCompileInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CppLinkInfo {
    // message fields
    input_file: ::protobuf::RepeatedField<::std::string::String>,
    output_file: ::protobuf::SingularField<::std::string::String>,
    interface_output_file: ::protobuf::SingularField<::std::string::String>,
    link_target_type: ::protobuf::SingularField<::std::string::String>,
    link_staticness: ::protobuf::SingularField<::std::string::String>,
    link_stamp: ::protobuf::RepeatedField<::std::string::String>,
    build_info_header_artifact: ::protobuf::RepeatedField<::std::string::String>,
    link_opt: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CppLinkInfo {
    fn default() -> &'a CppLinkInfo {
        <CppLinkInfo as ::protobuf::Message>::default_instance()
    }
}

impl CppLinkInfo {
    pub fn new() -> CppLinkInfo {
        ::std::default::Default::default()
    }

    // repeated string input_file = 1;


    pub fn get_input_file(&self) -> &[::std::string::String] {
        &self.input_file
    }
    pub fn clear_input_file(&mut self) {
        self.input_file.clear();
    }

    // Param is passed by value, moved
    pub fn set_input_file(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.input_file = v;
    }

    // Mutable pointer to the field.
    pub fn mut_input_file(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.input_file
    }

    // Take field
    pub fn take_input_file(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.input_file, ::protobuf::RepeatedField::new())
    }

    // optional string output_file = 2;


    pub fn get_output_file(&self) -> &str {
        match self.output_file.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_output_file(&mut self) {
        self.output_file.clear();
    }

    pub fn has_output_file(&self) -> bool {
        self.output_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_output_file(&mut self, v: ::std::string::String) {
        self.output_file = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output_file(&mut self) -> &mut ::std::string::String {
        if self.output_file.is_none() {
            self.output_file.set_default();
        }
        self.output_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_output_file(&mut self) -> ::std::string::String {
        self.output_file.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string interface_output_file = 3;


    pub fn get_interface_output_file(&self) -> &str {
        match self.interface_output_file.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_interface_output_file(&mut self) {
        self.interface_output_file.clear();
    }

    pub fn has_interface_output_file(&self) -> bool {
        self.interface_output_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interface_output_file(&mut self, v: ::std::string::String) {
        self.interface_output_file = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interface_output_file(&mut self) -> &mut ::std::string::String {
        if self.interface_output_file.is_none() {
            self.interface_output_file.set_default();
        }
        self.interface_output_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_interface_output_file(&mut self) -> ::std::string::String {
        self.interface_output_file.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string link_target_type = 4;


    pub fn get_link_target_type(&self) -> &str {
        match self.link_target_type.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_link_target_type(&mut self) {
        self.link_target_type.clear();
    }

    pub fn has_link_target_type(&self) -> bool {
        self.link_target_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_link_target_type(&mut self, v: ::std::string::String) {
        self.link_target_type = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_link_target_type(&mut self) -> &mut ::std::string::String {
        if self.link_target_type.is_none() {
            self.link_target_type.set_default();
        }
        self.link_target_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_link_target_type(&mut self) -> ::std::string::String {
        self.link_target_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string link_staticness = 5;


    pub fn get_link_staticness(&self) -> &str {
        match self.link_staticness.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_link_staticness(&mut self) {
        self.link_staticness.clear();
    }

    pub fn has_link_staticness(&self) -> bool {
        self.link_staticness.is_some()
    }

    // Param is passed by value, moved
    pub fn set_link_staticness(&mut self, v: ::std::string::String) {
        self.link_staticness = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_link_staticness(&mut self) -> &mut ::std::string::String {
        if self.link_staticness.is_none() {
            self.link_staticness.set_default();
        }
        self.link_staticness.as_mut().unwrap()
    }

    // Take field
    pub fn take_link_staticness(&mut self) -> ::std::string::String {
        self.link_staticness.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated string link_stamp = 6;


    pub fn get_link_stamp(&self) -> &[::std::string::String] {
        &self.link_stamp
    }
    pub fn clear_link_stamp(&mut self) {
        self.link_stamp.clear();
    }

    // Param is passed by value, moved
    pub fn set_link_stamp(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.link_stamp = v;
    }

    // Mutable pointer to the field.
    pub fn mut_link_stamp(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.link_stamp
    }

    // Take field
    pub fn take_link_stamp(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.link_stamp, ::protobuf::RepeatedField::new())
    }

    // repeated string build_info_header_artifact = 7;


    pub fn get_build_info_header_artifact(&self) -> &[::std::string::String] {
        &self.build_info_header_artifact
    }
    pub fn clear_build_info_header_artifact(&mut self) {
        self.build_info_header_artifact.clear();
    }

    // Param is passed by value, moved
    pub fn set_build_info_header_artifact(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.build_info_header_artifact = v;
    }

    // Mutable pointer to the field.
    pub fn mut_build_info_header_artifact(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.build_info_header_artifact
    }

    // Take field
    pub fn take_build_info_header_artifact(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.build_info_header_artifact, ::protobuf::RepeatedField::new())
    }

    // repeated string link_opt = 8;


    pub fn get_link_opt(&self) -> &[::std::string::String] {
        &self.link_opt
    }
    pub fn clear_link_opt(&mut self) {
        self.link_opt.clear();
    }

    // Param is passed by value, moved
    pub fn set_link_opt(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.link_opt = v;
    }

    // Mutable pointer to the field.
    pub fn mut_link_opt(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.link_opt
    }

    // Take field
    pub fn take_link_opt(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.link_opt, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CppLinkInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.input_file)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.output_file)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.interface_output_file)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.link_target_type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.link_staticness)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.link_stamp)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.build_info_header_artifact)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.link_opt)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.input_file {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if let Some(ref v) = self.output_file.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.interface_output_file.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.link_target_type.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.link_staticness.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        for value in &self.link_stamp {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        for value in &self.build_info_header_artifact {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        for value in &self.link_opt {
            my_size += ::protobuf::rt::string_size(8, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.input_file {
            os.write_string(1, &v)?;
        };
        if let Some(ref v) = self.output_file.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.interface_output_file.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.link_target_type.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.link_staticness.as_ref() {
            os.write_string(5, &v)?;
        }
        for v in &self.link_stamp {
            os.write_string(6, &v)?;
        };
        for v in &self.build_info_header_artifact {
            os.write_string(7, &v)?;
        };
        for v in &self.link_opt {
            os.write_string(8, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CppLinkInfo {
        CppLinkInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "input_file",
                    |m: &CppLinkInfo| { &m.input_file },
                    |m: &mut CppLinkInfo| { &mut m.input_file },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "output_file",
                    |m: &CppLinkInfo| { &m.output_file },
                    |m: &mut CppLinkInfo| { &mut m.output_file },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "interface_output_file",
                    |m: &CppLinkInfo| { &m.interface_output_file },
                    |m: &mut CppLinkInfo| { &mut m.interface_output_file },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "link_target_type",
                    |m: &CppLinkInfo| { &m.link_target_type },
                    |m: &mut CppLinkInfo| { &mut m.link_target_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "link_staticness",
                    |m: &CppLinkInfo| { &m.link_staticness },
                    |m: &mut CppLinkInfo| { &mut m.link_staticness },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "link_stamp",
                    |m: &CppLinkInfo| { &m.link_stamp },
                    |m: &mut CppLinkInfo| { &mut m.link_stamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "build_info_header_artifact",
                    |m: &CppLinkInfo| { &m.build_info_header_artifact },
                    |m: &mut CppLinkInfo| { &mut m.build_info_header_artifact },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "link_opt",
                    |m: &CppLinkInfo| { &m.link_opt },
                    |m: &mut CppLinkInfo| { &mut m.link_opt },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CppLinkInfo>(
                    "CppLinkInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CppLinkInfo {
        static mut instance: ::protobuf::lazy::Lazy<CppLinkInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CppLinkInfo,
        };
        unsafe {
            instance.get(CppLinkInfo::new)
        }
    }
}

impl ::protobuf::Clear for CppLinkInfo {
    fn clear(&mut self) {
        self.input_file.clear();
        self.output_file.clear();
        self.interface_output_file.clear();
        self.link_target_type.clear();
        self.link_staticness.clear();
        self.link_stamp.clear();
        self.build_info_header_artifact.clear();
        self.link_opt.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CppLinkInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CppLinkInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JavaCompileInfo {
    // message fields
    outputjar: ::protobuf::SingularField<::std::string::String>,
    classpath: ::protobuf::RepeatedField<::std::string::String>,
    sourcepath: ::protobuf::RepeatedField<::std::string::String>,
    source_file: ::protobuf::RepeatedField<::std::string::String>,
    javac_opt: ::protobuf::RepeatedField<::std::string::String>,
    processor: ::protobuf::RepeatedField<::std::string::String>,
    processorpath: ::protobuf::RepeatedField<::std::string::String>,
    bootclasspath: ::protobuf::RepeatedField<::std::string::String>,
    argument: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JavaCompileInfo {
    fn default() -> &'a JavaCompileInfo {
        <JavaCompileInfo as ::protobuf::Message>::default_instance()
    }
}

impl JavaCompileInfo {
    pub fn new() -> JavaCompileInfo {
        ::std::default::Default::default()
    }

    // optional string outputjar = 1;


    pub fn get_outputjar(&self) -> &str {
        match self.outputjar.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_outputjar(&mut self) {
        self.outputjar.clear();
    }

    pub fn has_outputjar(&self) -> bool {
        self.outputjar.is_some()
    }

    // Param is passed by value, moved
    pub fn set_outputjar(&mut self, v: ::std::string::String) {
        self.outputjar = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_outputjar(&mut self) -> &mut ::std::string::String {
        if self.outputjar.is_none() {
            self.outputjar.set_default();
        }
        self.outputjar.as_mut().unwrap()
    }

    // Take field
    pub fn take_outputjar(&mut self) -> ::std::string::String {
        self.outputjar.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated string classpath = 2;


    pub fn get_classpath(&self) -> &[::std::string::String] {
        &self.classpath
    }
    pub fn clear_classpath(&mut self) {
        self.classpath.clear();
    }

    // Param is passed by value, moved
    pub fn set_classpath(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.classpath = v;
    }

    // Mutable pointer to the field.
    pub fn mut_classpath(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.classpath
    }

    // Take field
    pub fn take_classpath(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.classpath, ::protobuf::RepeatedField::new())
    }

    // repeated string sourcepath = 3;


    pub fn get_sourcepath(&self) -> &[::std::string::String] {
        &self.sourcepath
    }
    pub fn clear_sourcepath(&mut self) {
        self.sourcepath.clear();
    }

    // Param is passed by value, moved
    pub fn set_sourcepath(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.sourcepath = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sourcepath(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.sourcepath
    }

    // Take field
    pub fn take_sourcepath(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.sourcepath, ::protobuf::RepeatedField::new())
    }

    // repeated string source_file = 4;


    pub fn get_source_file(&self) -> &[::std::string::String] {
        &self.source_file
    }
    pub fn clear_source_file(&mut self) {
        self.source_file.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_file(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.source_file = v;
    }

    // Mutable pointer to the field.
    pub fn mut_source_file(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.source_file
    }

    // Take field
    pub fn take_source_file(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.source_file, ::protobuf::RepeatedField::new())
    }

    // repeated string javac_opt = 5;


    pub fn get_javac_opt(&self) -> &[::std::string::String] {
        &self.javac_opt
    }
    pub fn clear_javac_opt(&mut self) {
        self.javac_opt.clear();
    }

    // Param is passed by value, moved
    pub fn set_javac_opt(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.javac_opt = v;
    }

    // Mutable pointer to the field.
    pub fn mut_javac_opt(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.javac_opt
    }

    // Take field
    pub fn take_javac_opt(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.javac_opt, ::protobuf::RepeatedField::new())
    }

    // repeated string processor = 6;


    pub fn get_processor(&self) -> &[::std::string::String] {
        &self.processor
    }
    pub fn clear_processor(&mut self) {
        self.processor.clear();
    }

    // Param is passed by value, moved
    pub fn set_processor(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.processor = v;
    }

    // Mutable pointer to the field.
    pub fn mut_processor(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.processor
    }

    // Take field
    pub fn take_processor(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.processor, ::protobuf::RepeatedField::new())
    }

    // repeated string processorpath = 7;


    pub fn get_processorpath(&self) -> &[::std::string::String] {
        &self.processorpath
    }
    pub fn clear_processorpath(&mut self) {
        self.processorpath.clear();
    }

    // Param is passed by value, moved
    pub fn set_processorpath(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.processorpath = v;
    }

    // Mutable pointer to the field.
    pub fn mut_processorpath(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.processorpath
    }

    // Take field
    pub fn take_processorpath(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.processorpath, ::protobuf::RepeatedField::new())
    }

    // repeated string bootclasspath = 8;


    pub fn get_bootclasspath(&self) -> &[::std::string::String] {
        &self.bootclasspath
    }
    pub fn clear_bootclasspath(&mut self) {
        self.bootclasspath.clear();
    }

    // Param is passed by value, moved
    pub fn set_bootclasspath(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.bootclasspath = v;
    }

    // Mutable pointer to the field.
    pub fn mut_bootclasspath(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.bootclasspath
    }

    // Take field
    pub fn take_bootclasspath(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.bootclasspath, ::protobuf::RepeatedField::new())
    }

    // repeated string argument = 9;


    pub fn get_argument(&self) -> &[::std::string::String] {
        &self.argument
    }
    pub fn clear_argument(&mut self) {
        self.argument.clear();
    }

    // Param is passed by value, moved
    pub fn set_argument(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.argument = v;
    }

    // Mutable pointer to the field.
    pub fn mut_argument(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.argument
    }

    // Take field
    pub fn take_argument(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.argument, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for JavaCompileInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.outputjar)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.classpath)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.sourcepath)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.source_file)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.javac_opt)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.processor)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.processorpath)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.bootclasspath)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.argument)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.outputjar.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.classpath {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.sourcepath {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.source_file {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in &self.javac_opt {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        for value in &self.processor {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        for value in &self.processorpath {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        for value in &self.bootclasspath {
            my_size += ::protobuf::rt::string_size(8, &value);
        };
        for value in &self.argument {
            my_size += ::protobuf::rt::string_size(9, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.outputjar.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.classpath {
            os.write_string(2, &v)?;
        };
        for v in &self.sourcepath {
            os.write_string(3, &v)?;
        };
        for v in &self.source_file {
            os.write_string(4, &v)?;
        };
        for v in &self.javac_opt {
            os.write_string(5, &v)?;
        };
        for v in &self.processor {
            os.write_string(6, &v)?;
        };
        for v in &self.processorpath {
            os.write_string(7, &v)?;
        };
        for v in &self.bootclasspath {
            os.write_string(8, &v)?;
        };
        for v in &self.argument {
            os.write_string(9, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JavaCompileInfo {
        JavaCompileInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "outputjar",
                    |m: &JavaCompileInfo| { &m.outputjar },
                    |m: &mut JavaCompileInfo| { &mut m.outputjar },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "classpath",
                    |m: &JavaCompileInfo| { &m.classpath },
                    |m: &mut JavaCompileInfo| { &mut m.classpath },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sourcepath",
                    |m: &JavaCompileInfo| { &m.sourcepath },
                    |m: &mut JavaCompileInfo| { &mut m.sourcepath },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "source_file",
                    |m: &JavaCompileInfo| { &m.source_file },
                    |m: &mut JavaCompileInfo| { &mut m.source_file },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "javac_opt",
                    |m: &JavaCompileInfo| { &m.javac_opt },
                    |m: &mut JavaCompileInfo| { &mut m.javac_opt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "processor",
                    |m: &JavaCompileInfo| { &m.processor },
                    |m: &mut JavaCompileInfo| { &mut m.processor },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "processorpath",
                    |m: &JavaCompileInfo| { &m.processorpath },
                    |m: &mut JavaCompileInfo| { &mut m.processorpath },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bootclasspath",
                    |m: &JavaCompileInfo| { &m.bootclasspath },
                    |m: &mut JavaCompileInfo| { &mut m.bootclasspath },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "argument",
                    |m: &JavaCompileInfo| { &m.argument },
                    |m: &mut JavaCompileInfo| { &mut m.argument },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<JavaCompileInfo>(
                    "JavaCompileInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static JavaCompileInfo {
        static mut instance: ::protobuf::lazy::Lazy<JavaCompileInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const JavaCompileInfo,
        };
        unsafe {
            instance.get(JavaCompileInfo::new)
        }
    }
}

impl ::protobuf::Clear for JavaCompileInfo {
    fn clear(&mut self) {
        self.outputjar.clear();
        self.classpath.clear();
        self.sourcepath.clear();
        self.source_file.clear();
        self.javac_opt.clear();
        self.processor.clear();
        self.processorpath.clear();
        self.bootclasspath.clear();
        self.argument.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JavaCompileInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JavaCompileInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PythonInfo {
    // message fields
    source_file: ::protobuf::RepeatedField<::std::string::String>,
    dep_file: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PythonInfo {
    fn default() -> &'a PythonInfo {
        <PythonInfo as ::protobuf::Message>::default_instance()
    }
}

impl PythonInfo {
    pub fn new() -> PythonInfo {
        ::std::default::Default::default()
    }

    // repeated string source_file = 1;


    pub fn get_source_file(&self) -> &[::std::string::String] {
        &self.source_file
    }
    pub fn clear_source_file(&mut self) {
        self.source_file.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_file(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.source_file = v;
    }

    // Mutable pointer to the field.
    pub fn mut_source_file(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.source_file
    }

    // Take field
    pub fn take_source_file(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.source_file, ::protobuf::RepeatedField::new())
    }

    // repeated string dep_file = 2;


    pub fn get_dep_file(&self) -> &[::std::string::String] {
        &self.dep_file
    }
    pub fn clear_dep_file(&mut self) {
        self.dep_file.clear();
    }

    // Param is passed by value, moved
    pub fn set_dep_file(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.dep_file = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dep_file(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.dep_file
    }

    // Take field
    pub fn take_dep_file(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.dep_file, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PythonInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.source_file)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.dep_file)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.source_file {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.dep_file {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.source_file {
            os.write_string(1, &v)?;
        };
        for v in &self.dep_file {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PythonInfo {
        PythonInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "source_file",
                    |m: &PythonInfo| { &m.source_file },
                    |m: &mut PythonInfo| { &mut m.source_file },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dep_file",
                    |m: &PythonInfo| { &m.dep_file },
                    |m: &mut PythonInfo| { &mut m.dep_file },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PythonInfo>(
                    "PythonInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PythonInfo {
        static mut instance: ::protobuf::lazy::Lazy<PythonInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PythonInfo,
        };
        unsafe {
            instance.get(PythonInfo::new)
        }
    }
}

impl ::protobuf::Clear for PythonInfo {
    fn clear(&mut self) {
        self.source_file.clear();
        self.dep_file.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PythonInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PythonInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n<third_party/bazel/src/main/protobuf/extra_actions_base.proto\x12\x05b\
    laze\"L\n\x12ExtraActionSummary\x126\n\x06action\x18\x01\x20\x03(\x0b2\
    \x1e.blaze.DetailedExtraActionInfoR\x06action\"r\n\x17DetailedExtraActio\
    nInfo\x12'\n\x0ftriggering_file\x18\x01\x20\x01(\tR\x0etriggeringFile\
    \x12.\n\x06action\x18\x02\x20\x02(\x0b2\x16.blaze.ExtraActionInfoR\x06ac\
    tion\"\xf4\x05\n\x0fExtraActionInfo\x12\x14\n\x05owner\x18\x01\x20\x01(\
    \tR\x05owner\x12#\n\x0baspect_name\x18\x06\x20\x01(\tR\naspectNameB\x02\
    \x18\x01\x12]\n\x11aspect_parameters\x18\x07\x20\x03(\x0b2,.blaze.ExtraA\
    ctionInfo.AspectParametersEntryR\x10aspectParametersB\x02\x18\x01\x12A\n\
    \x07aspects\x18\x08\x20\x03(\x0b2'.blaze.ExtraActionInfo.AspectDescripto\
    rR\x07aspects\x12\x0e\n\x02id\x18\x02\x20\x01(\tR\x02id\x12\x1a\n\x08mne\
    monic\x18\x05\x20\x01(\tR\x08mnemonic\x1af\n\x15AspectParametersEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x127\n\x05value\x18\x02\x20\
    \x01(\x0b2!.blaze.ExtraActionInfo.StringListR\x05value:\x028\x01\x1a&\n\
    \nStringList\x12\x14\n\x05value\x18\x01\x20\x03(\tR\x05value:\x02\x18\
    \x01\x1a\xbc\x02\n\x10AspectDescriptor\x12\x1f\n\x0baspect_name\x18\x01\
    \x20\x01(\tR\naspectName\x12j\n\x11aspect_parameters\x18\x02\x20\x03(\
    \x0b2=.blaze.ExtraActionInfo.AspectDescriptor.AspectParametersEntryR\x10\
    aspectParameters\x1aw\n\x15AspectParametersEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12H\n\x05value\x18\x02\x20\x01(\x0b22.blaze.Ext\
    raActionInfo.AspectDescriptor.StringListR\x05value:\x028\x01\x1a\"\n\nSt\
    ringList\x12\x14\n\x05value\x18\x01\x20\x03(\tR\x05value*\t\x08\xe8\x07\
    \x10\x80\x80\x80\x80\x02\"?\n\x13EnvironmentVariable\x12\x12\n\x04name\
    \x18\x01\x20\x02(\tR\x04name\x12\x14\n\x05value\x18\x02\x20\x02(\tR\x05v\
    alue\"\xe9\x01\n\tSpawnInfo\x12\x1a\n\x08argument\x18\x01\x20\x03(\tR\
    \x08argument\x126\n\x08variable\x18\x02\x20\x03(\x0b2\x1a.blaze.Environm\
    entVariableR\x08variable\x12\x1d\n\ninput_file\x18\x04\x20\x03(\tR\tinpu\
    tFile\x12\x1f\n\x0boutput_file\x18\x05\x20\x03(\tR\noutputFile2H\n\nspaw\
    n_info\x18\xeb\x07\x20\x01(\x0b2\x10.blaze.SpawnInfo\x12\x16.blaze.Extra\
    ActionInfoR\tspawnInfo\"\xd1\x02\n\x0eCppCompileInfo\x12\x12\n\x04tool\
    \x18\x01\x20\x01(\tR\x04tool\x12'\n\x0fcompiler_option\x18\x02\x20\x03(\
    \tR\x0ecompilerOption\x12\x1f\n\x0bsource_file\x18\x03\x20\x01(\tR\nsour\
    ceFile\x12\x1f\n\x0boutput_file\x18\x04\x20\x01(\tR\noutputFile\x12.\n\
    \x13sources_and_headers\x18\x05\x20\x03(\tR\x11sourcesAndHeaders\x126\n\
    \x08variable\x18\x06\x20\x03(\x0b2\x1a.blaze.EnvironmentVariableR\x08var\
    iable2X\n\x10cpp_compile_info\x18\xe9\x07\x20\x01(\x0b2\x15.blaze.CppCom\
    pileInfo\x12\x16.blaze.ExtraActionInfoR\x0ecppCompileInfo\"\x9c\x03\n\
    \x0bCppLinkInfo\x12\x1d\n\ninput_file\x18\x01\x20\x03(\tR\tinputFile\x12\
    \x1f\n\x0boutput_file\x18\x02\x20\x01(\tR\noutputFile\x122\n\x15interfac\
    e_output_file\x18\x03\x20\x01(\tR\x13interfaceOutputFile\x12(\n\x10link_\
    target_type\x18\x04\x20\x01(\tR\x0elinkTargetType\x12'\n\x0flink_staticn\
    ess\x18\x05\x20\x01(\tR\x0elinkStaticness\x12\x1d\n\nlink_stamp\x18\x06\
    \x20\x03(\tR\tlinkStamp\x12;\n\x1abuild_info_header_artifact\x18\x07\x20\
    \x03(\tR\x17buildInfoHeaderArtifact\x12\x19\n\x08link_opt\x18\x08\x20\
    \x03(\tR\x07linkOpt2O\n\rcpp_link_info\x18\xea\x07\x20\x01(\x0b2\x12.bla\
    ze.CppLinkInfo\x12\x16.blaze.ExtraActionInfoR\x0bcppLinkInfo\"\x8e\x03\n\
    \x0fJavaCompileInfo\x12\x1c\n\toutputjar\x18\x01\x20\x01(\tR\toutputjar\
    \x12\x1c\n\tclasspath\x18\x02\x20\x03(\tR\tclasspath\x12\x1e\n\nsourcepa\
    th\x18\x03\x20\x03(\tR\nsourcepath\x12\x1f\n\x0bsource_file\x18\x04\x20\
    \x03(\tR\nsourceFile\x12\x1b\n\tjavac_opt\x18\x05\x20\x03(\tR\x08javacOp\
    t\x12\x1c\n\tprocessor\x18\x06\x20\x03(\tR\tprocessor\x12$\n\rprocessorp\
    ath\x18\x07\x20\x03(\tR\rprocessorpath\x12$\n\rbootclasspath\x18\x08\x20\
    \x03(\tR\rbootclasspath\x12\x1a\n\x08argument\x18\t\x20\x03(\tR\x08argum\
    ent2[\n\x11java_compile_info\x18\xe8\x07\x20\x01(\x0b2\x16.blaze.JavaCom\
    pileInfo\x12\x16.blaze.ExtraActionInfoR\x0fjavaCompileInfo\"\x95\x01\n\n\
    PythonInfo\x12\x1f\n\x0bsource_file\x18\x01\x20\x03(\tR\nsourceFile\x12\
    \x19\n\x08dep_file\x18\x02\x20\x03(\tR\x07depFile2K\n\x0bpython_info\x18\
    \xed\x07\x20\x01(\x0b2\x11.blaze.PythonInfo\x12\x16.blaze.ExtraActionInf\
    oR\npythonInfoB/\n+com.google.devtools.build.lib.actions.extraP\x01\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
