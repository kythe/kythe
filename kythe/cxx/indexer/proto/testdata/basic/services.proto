// Test proto to test services.

syntax = "proto2";

package proto_kythe_test;

option java_package = "io.kythe";

//- @TestRequest defines/binding RequestNode
message TestRequest {
  required string request = 1;
}

//- @TestReply defines/binding ReplyNode
message TestReply {
  required string reply = 1;
}

//- @TestService defines/binding ServiceNode
//- ServiceNode childof _PackageNode
//- ServiceNode.node/kind interface
//- ServiceNode code SNRoot
//- SNRoot child.0 SNKind
//- SNKind.pre_text "service"
//- SNRoot child.1 SNName
//- SNName child.0 SNContext
//- SNName child.1 SNIdent
//- SNIdent.pre_text "TestService"
//- SNIdent link ServiceNode
//- SNContext child.0 SNContext0
//- SNContext0.pre_text "proto_kythe_test"
service TestService {
  //- @TestMethod defines/binding MethodNode
  //- MethodNode childof ServiceNode
  //- MethodNode.node/kind function
  //- @TestRequest ref RequestNode
  //- @TestReply ref ReplyNode
  //- MethodNode code MNRoot
  //- MNRoot child.0 MNKind
  //- MNKind.pre_text "rpc"
  //- MNRoot child.1 MNName
  //- MNName child.0 MNContext
  //- MNName child.1 MNIdent
  //- MNIdent.pre_text "TestMethod"
  //- MNIdent link MethodNode
  //- MNContext child.0 MNContext0
  //- MNContext child.1 MNContext1
  //- MNContext0.pre_text "proto_kythe_test"
  //- MNContext1.pre_text "TestService"
  //- MethodNode typed MethodType
  //- MethodType.node/kind tapp
  //- MethodType param.0 RpcTypeBuiltin
  //- MethodType param.1 ReplyNode
  //- MethodType param.2 RequestNode
  //- RpcTypeBuiltin.node/kind tbuiltin
  rpc TestMethod(TestRequest) returns (TestReply);

  //- @TestRequest ref RequestNode
  //- @+2"TestReply" ref ReplyNode
  rpc FullTestMethod(proto_kythe_test.TestRequest)
      returns (proto_kythe_test.TestReply);
}
