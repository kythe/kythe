// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: kythe/proto/xref.proto

package xref_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common_go_proto "kythe.io/kythe/proto/common_go_proto"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SnippetsKind int32

const (
	SnippetsKind_NONE    SnippetsKind = 0
	SnippetsKind_DEFAULT SnippetsKind = 1
)

// Enum value maps for SnippetsKind.
var (
	SnippetsKind_name = map[int32]string{
		0: "NONE",
		1: "DEFAULT",
	}
	SnippetsKind_value = map[string]int32{
		"NONE":    0,
		"DEFAULT": 1,
	}
)

func (x SnippetsKind) Enum() *SnippetsKind {
	p := new(SnippetsKind)
	*p = x
	return p
}

func (x SnippetsKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SnippetsKind) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_xref_proto_enumTypes[0].Descriptor()
}

func (SnippetsKind) Type() protoreflect.EnumType {
	return &file_kythe_proto_xref_proto_enumTypes[0]
}

func (x SnippetsKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SnippetsKind.Descriptor instead.
func (SnippetsKind) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{0}
}

type Location_Kind int32

const (
	Location_FILE Location_Kind = 0
	Location_SPAN Location_Kind = 1
)

// Enum value maps for Location_Kind.
var (
	Location_Kind_name = map[int32]string{
		0: "FILE",
		1: "SPAN",
	}
	Location_Kind_value = map[string]int32{
		"FILE": 0,
		"SPAN": 1,
	}
)

func (x Location_Kind) Enum() *Location_Kind {
	p := new(Location_Kind)
	*p = x
	return p
}

func (x Location_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Location_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_xref_proto_enumTypes[1].Descriptor()
}

func (Location_Kind) Type() protoreflect.EnumType {
	return &file_kythe_proto_xref_proto_enumTypes[1]
}

func (x Location_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Location_Kind.Descriptor instead.
func (Location_Kind) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{0, 0}
}

type DecorationsRequest_SpanKind int32

const (
	DecorationsRequest_WITHIN_SPAN DecorationsRequest_SpanKind = 0
	DecorationsRequest_AROUND_SPAN DecorationsRequest_SpanKind = 1
)

// Enum value maps for DecorationsRequest_SpanKind.
var (
	DecorationsRequest_SpanKind_name = map[int32]string{
		0: "WITHIN_SPAN",
		1: "AROUND_SPAN",
	}
	DecorationsRequest_SpanKind_value = map[string]int32{
		"WITHIN_SPAN": 0,
		"AROUND_SPAN": 1,
	}
)

func (x DecorationsRequest_SpanKind) Enum() *DecorationsRequest_SpanKind {
	p := new(DecorationsRequest_SpanKind)
	*p = x
	return p
}

func (x DecorationsRequest_SpanKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DecorationsRequest_SpanKind) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_xref_proto_enumTypes[2].Descriptor()
}

func (DecorationsRequest_SpanKind) Type() protoreflect.EnumType {
	return &file_kythe_proto_xref_proto_enumTypes[2]
}

func (x DecorationsRequest_SpanKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DecorationsRequest_SpanKind.Descriptor instead.
func (DecorationsRequest_SpanKind) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{1, 0}
}

type DecorationsReply_Override_Kind int32

const (
	DecorationsReply_Override_OVERRIDES DecorationsReply_Override_Kind = 0
	DecorationsReply_Override_EXTENDS   DecorationsReply_Override_Kind = 1
)

// Enum value maps for DecorationsReply_Override_Kind.
var (
	DecorationsReply_Override_Kind_name = map[int32]string{
		0: "OVERRIDES",
		1: "EXTENDS",
	}
	DecorationsReply_Override_Kind_value = map[string]int32{
		"OVERRIDES": 0,
		"EXTENDS":   1,
	}
)

func (x DecorationsReply_Override_Kind) Enum() *DecorationsReply_Override_Kind {
	p := new(DecorationsReply_Override_Kind)
	*p = x
	return p
}

func (x DecorationsReply_Override_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DecorationsReply_Override_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_xref_proto_enumTypes[3].Descriptor()
}

func (DecorationsReply_Override_Kind) Type() protoreflect.EnumType {
	return &file_kythe_proto_xref_proto_enumTypes[3]
}

func (x DecorationsReply_Override_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DecorationsReply_Override_Kind.Descriptor instead.
func (DecorationsReply_Override_Kind) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{3, 1, 0}
}

type CrossReferencesRequest_DefinitionKind int32

const (
	CrossReferencesRequest_NO_DEFINITIONS      CrossReferencesRequest_DefinitionKind = 0
	CrossReferencesRequest_ALL_DEFINITIONS     CrossReferencesRequest_DefinitionKind = 1
	CrossReferencesRequest_FULL_DEFINITIONS    CrossReferencesRequest_DefinitionKind = 2
	CrossReferencesRequest_BINDING_DEFINITIONS CrossReferencesRequest_DefinitionKind = 3
)

// Enum value maps for CrossReferencesRequest_DefinitionKind.
var (
	CrossReferencesRequest_DefinitionKind_name = map[int32]string{
		0: "NO_DEFINITIONS",
		1: "ALL_DEFINITIONS",
		2: "FULL_DEFINITIONS",
		3: "BINDING_DEFINITIONS",
	}
	CrossReferencesRequest_DefinitionKind_value = map[string]int32{
		"NO_DEFINITIONS":      0,
		"ALL_DEFINITIONS":     1,
		"FULL_DEFINITIONS":    2,
		"BINDING_DEFINITIONS": 3,
	}
)

func (x CrossReferencesRequest_DefinitionKind) Enum() *CrossReferencesRequest_DefinitionKind {
	p := new(CrossReferencesRequest_DefinitionKind)
	*p = x
	return p
}

func (x CrossReferencesRequest_DefinitionKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrossReferencesRequest_DefinitionKind) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_xref_proto_enumTypes[4].Descriptor()
}

func (CrossReferencesRequest_DefinitionKind) Type() protoreflect.EnumType {
	return &file_kythe_proto_xref_proto_enumTypes[4]
}

func (x CrossReferencesRequest_DefinitionKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrossReferencesRequest_DefinitionKind.Descriptor instead.
func (CrossReferencesRequest_DefinitionKind) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{4, 0}
}

type CrossReferencesRequest_DeclarationKind int32

const (
	CrossReferencesRequest_NO_DECLARATIONS  CrossReferencesRequest_DeclarationKind = 0
	CrossReferencesRequest_ALL_DECLARATIONS CrossReferencesRequest_DeclarationKind = 1
)

// Enum value maps for CrossReferencesRequest_DeclarationKind.
var (
	CrossReferencesRequest_DeclarationKind_name = map[int32]string{
		0: "NO_DECLARATIONS",
		1: "ALL_DECLARATIONS",
	}
	CrossReferencesRequest_DeclarationKind_value = map[string]int32{
		"NO_DECLARATIONS":  0,
		"ALL_DECLARATIONS": 1,
	}
)

func (x CrossReferencesRequest_DeclarationKind) Enum() *CrossReferencesRequest_DeclarationKind {
	p := new(CrossReferencesRequest_DeclarationKind)
	*p = x
	return p
}

func (x CrossReferencesRequest_DeclarationKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrossReferencesRequest_DeclarationKind) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_xref_proto_enumTypes[5].Descriptor()
}

func (CrossReferencesRequest_DeclarationKind) Type() protoreflect.EnumType {
	return &file_kythe_proto_xref_proto_enumTypes[5]
}

func (x CrossReferencesRequest_DeclarationKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrossReferencesRequest_DeclarationKind.Descriptor instead.
func (CrossReferencesRequest_DeclarationKind) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{4, 1}
}

type CrossReferencesRequest_ReferenceKind int32

const (
	CrossReferencesRequest_NO_REFERENCES       CrossReferencesRequest_ReferenceKind = 0
	CrossReferencesRequest_CALL_REFERENCES     CrossReferencesRequest_ReferenceKind = 1
	CrossReferencesRequest_NON_CALL_REFERENCES CrossReferencesRequest_ReferenceKind = 2
	CrossReferencesRequest_ALL_REFERENCES      CrossReferencesRequest_ReferenceKind = 3
)

// Enum value maps for CrossReferencesRequest_ReferenceKind.
var (
	CrossReferencesRequest_ReferenceKind_name = map[int32]string{
		0: "NO_REFERENCES",
		1: "CALL_REFERENCES",
		2: "NON_CALL_REFERENCES",
		3: "ALL_REFERENCES",
	}
	CrossReferencesRequest_ReferenceKind_value = map[string]int32{
		"NO_REFERENCES":       0,
		"CALL_REFERENCES":     1,
		"NON_CALL_REFERENCES": 2,
		"ALL_REFERENCES":      3,
	}
)

func (x CrossReferencesRequest_ReferenceKind) Enum() *CrossReferencesRequest_ReferenceKind {
	p := new(CrossReferencesRequest_ReferenceKind)
	*p = x
	return p
}

func (x CrossReferencesRequest_ReferenceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrossReferencesRequest_ReferenceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_xref_proto_enumTypes[6].Descriptor()
}

func (CrossReferencesRequest_ReferenceKind) Type() protoreflect.EnumType {
	return &file_kythe_proto_xref_proto_enumTypes[6]
}

func (x CrossReferencesRequest_ReferenceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrossReferencesRequest_ReferenceKind.Descriptor instead.
func (CrossReferencesRequest_ReferenceKind) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{4, 2}
}

type CrossReferencesRequest_CallerKind int32

const (
	CrossReferencesRequest_NO_CALLERS       CrossReferencesRequest_CallerKind = 0
	CrossReferencesRequest_DIRECT_CALLERS   CrossReferencesRequest_CallerKind = 1
	CrossReferencesRequest_OVERRIDE_CALLERS CrossReferencesRequest_CallerKind = 2
)

// Enum value maps for CrossReferencesRequest_CallerKind.
var (
	CrossReferencesRequest_CallerKind_name = map[int32]string{
		0: "NO_CALLERS",
		1: "DIRECT_CALLERS",
		2: "OVERRIDE_CALLERS",
	}
	CrossReferencesRequest_CallerKind_value = map[string]int32{
		"NO_CALLERS":       0,
		"DIRECT_CALLERS":   1,
		"OVERRIDE_CALLERS": 2,
	}
)

func (x CrossReferencesRequest_CallerKind) Enum() *CrossReferencesRequest_CallerKind {
	p := new(CrossReferencesRequest_CallerKind)
	*p = x
	return p
}

func (x CrossReferencesRequest_CallerKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrossReferencesRequest_CallerKind) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_xref_proto_enumTypes[7].Descriptor()
}

func (CrossReferencesRequest_CallerKind) Type() protoreflect.EnumType {
	return &file_kythe_proto_xref_proto_enumTypes[7]
}

func (x CrossReferencesRequest_CallerKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrossReferencesRequest_CallerKind.Descriptor instead.
func (CrossReferencesRequest_CallerKind) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{4, 3}
}

type CrossReferencesRequest_TotalsQuality int32

const (
	CrossReferencesRequest_UNSPECIFIED_TOTALS CrossReferencesRequest_TotalsQuality = 0
	CrossReferencesRequest_PRECISE_TOTALS     CrossReferencesRequest_TotalsQuality = 1
	CrossReferencesRequest_APPROXIMATE_TOTALS CrossReferencesRequest_TotalsQuality = 2
)

// Enum value maps for CrossReferencesRequest_TotalsQuality.
var (
	CrossReferencesRequest_TotalsQuality_name = map[int32]string{
		0: "UNSPECIFIED_TOTALS",
		1: "PRECISE_TOTALS",
		2: "APPROXIMATE_TOTALS",
	}
	CrossReferencesRequest_TotalsQuality_value = map[string]int32{
		"UNSPECIFIED_TOTALS": 0,
		"PRECISE_TOTALS":     1,
		"APPROXIMATE_TOTALS": 2,
	}
)

func (x CrossReferencesRequest_TotalsQuality) Enum() *CrossReferencesRequest_TotalsQuality {
	p := new(CrossReferencesRequest_TotalsQuality)
	*p = x
	return p
}

func (x CrossReferencesRequest_TotalsQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrossReferencesRequest_TotalsQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_xref_proto_enumTypes[8].Descriptor()
}

func (CrossReferencesRequest_TotalsQuality) Type() protoreflect.EnumType {
	return &file_kythe_proto_xref_proto_enumTypes[8]
}

func (x CrossReferencesRequest_TotalsQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrossReferencesRequest_TotalsQuality.Descriptor instead.
func (CrossReferencesRequest_TotalsQuality) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{4, 4}
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket string                `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Kind   Location_Kind         `protobuf:"varint,2,opt,name=kind,proto3,enum=kythe.proto.Location_Kind" json:"kind,omitempty"`
	Span   *common_go_proto.Span `protobuf:"bytes,5,opt,name=span,proto3" json:"span,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{0}
}

func (x *Location) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *Location) GetKind() Location_Kind {
	if x != nil {
		return x.Kind
	}
	return Location_FILE
}

func (x *Location) GetSpan() *common_go_proto.Span {
	if x != nil {
		return x.Span
	}
	return nil
}

type DecorationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location          *Location                   `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	SpanKind          DecorationsRequest_SpanKind `protobuf:"varint,10,opt,name=span_kind,json=spanKind,proto3,enum=kythe.proto.DecorationsRequest_SpanKind" json:"span_kind,omitempty"`
	DirtyBuffer       []byte                      `protobuf:"bytes,2,opt,name=dirty_buffer,json=dirtyBuffer,proto3" json:"dirty_buffer,omitempty"`
	SourceText        bool                        `protobuf:"varint,3,opt,name=source_text,json=sourceText,proto3" json:"source_text,omitempty"`
	References        bool                        `protobuf:"varint,4,opt,name=references,proto3" json:"references,omitempty"`
	TargetDefinitions bool                        `protobuf:"varint,6,opt,name=target_definitions,json=targetDefinitions,proto3" json:"target_definitions,omitempty"`
	Filter            []string                    `protobuf:"bytes,5,rep,name=filter,proto3" json:"filter,omitempty"`
	ExtendsOverrides  bool                        `protobuf:"varint,7,opt,name=extends_overrides,json=extendsOverrides,proto3" json:"extends_overrides,omitempty"`
	Diagnostics       bool                        `protobuf:"varint,8,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	Snippets          SnippetsKind                `protobuf:"varint,9,opt,name=snippets,proto3,enum=kythe.proto.SnippetsKind" json:"snippets,omitempty"`
	BuildConfig       []string                    `protobuf:"bytes,11,rep,name=build_config,json=buildConfig,proto3" json:"build_config,omitempty"`
	SemanticScopes    bool                        `protobuf:"varint,12,opt,name=semantic_scopes,json=semanticScopes,proto3" json:"semantic_scopes,omitempty"`
}

func (x *DecorationsRequest) Reset() {
	*x = DecorationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecorationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecorationsRequest) ProtoMessage() {}

func (x *DecorationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecorationsRequest.ProtoReflect.Descriptor instead.
func (*DecorationsRequest) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{1}
}

func (x *DecorationsRequest) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DecorationsRequest) GetSpanKind() DecorationsRequest_SpanKind {
	if x != nil {
		return x.SpanKind
	}
	return DecorationsRequest_WITHIN_SPAN
}

func (x *DecorationsRequest) GetDirtyBuffer() []byte {
	if x != nil {
		return x.DirtyBuffer
	}
	return nil
}

func (x *DecorationsRequest) GetSourceText() bool {
	if x != nil {
		return x.SourceText
	}
	return false
}

func (x *DecorationsRequest) GetReferences() bool {
	if x != nil {
		return x.References
	}
	return false
}

func (x *DecorationsRequest) GetTargetDefinitions() bool {
	if x != nil {
		return x.TargetDefinitions
	}
	return false
}

func (x *DecorationsRequest) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DecorationsRequest) GetExtendsOverrides() bool {
	if x != nil {
		return x.ExtendsOverrides
	}
	return false
}

func (x *DecorationsRequest) GetDiagnostics() bool {
	if x != nil {
		return x.Diagnostics
	}
	return false
}

func (x *DecorationsRequest) GetSnippets() SnippetsKind {
	if x != nil {
		return x.Snippets
	}
	return SnippetsKind_NONE
}

func (x *DecorationsRequest) GetBuildConfig() []string {
	if x != nil {
		return x.BuildConfig
	}
	return nil
}

func (x *DecorationsRequest) GetSemanticScopes() bool {
	if x != nil {
		return x.SemanticScopes
	}
	return false
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorpusPath *common_go_proto.CorpusPath `protobuf:"bytes,1,opt,name=corpus_path,json=corpusPath,proto3" json:"corpus_path,omitempty"`
	Revision   string                      `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{2}
}

func (x *File) GetCorpusPath() *common_go_proto.CorpusPath {
	if x != nil {
		return x.CorpusPath
	}
	return nil
}

func (x *File) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

type DecorationsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location            *Location                              `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Revision            string                                 `protobuf:"bytes,18,opt,name=revision,proto3" json:"revision,omitempty"`
	SourceText          []byte                                 `protobuf:"bytes,2,opt,name=source_text,json=sourceText,proto3" json:"source_text,omitempty"`
	Encoding            string                                 `protobuf:"bytes,3,opt,name=encoding,proto3" json:"encoding,omitempty"`
	Reference           []*DecorationsReply_Reference          `protobuf:"bytes,4,rep,name=reference,proto3" json:"reference,omitempty"`
	Diagnostic          []*common_go_proto.Diagnostic          `protobuf:"bytes,5,rep,name=diagnostic,proto3" json:"diagnostic,omitempty"`
	GeneratedByFile     []*File                                `protobuf:"bytes,19,rep,name=generated_by_file,json=generatedByFile,proto3" json:"generated_by_file,omitempty"`
	Nodes               map[string]*common_go_proto.NodeInfo   `protobuf:"bytes,15,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DefinitionLocations map[string]*Anchor                     `protobuf:"bytes,16,rep,name=definition_locations,json=definitionLocations,proto3" json:"definition_locations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtendsOverrides    map[string]*DecorationsReply_Overrides `protobuf:"bytes,17,rep,name=extends_overrides,json=extendsOverrides,proto3" json:"extends_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BuildId             string                                 `protobuf:"bytes,20,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
}

func (x *DecorationsReply) Reset() {
	*x = DecorationsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecorationsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecorationsReply) ProtoMessage() {}

func (x *DecorationsReply) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecorationsReply.ProtoReflect.Descriptor instead.
func (*DecorationsReply) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{3}
}

func (x *DecorationsReply) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DecorationsReply) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *DecorationsReply) GetSourceText() []byte {
	if x != nil {
		return x.SourceText
	}
	return nil
}

func (x *DecorationsReply) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *DecorationsReply) GetReference() []*DecorationsReply_Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *DecorationsReply) GetDiagnostic() []*common_go_proto.Diagnostic {
	if x != nil {
		return x.Diagnostic
	}
	return nil
}

func (x *DecorationsReply) GetGeneratedByFile() []*File {
	if x != nil {
		return x.GeneratedByFile
	}
	return nil
}

func (x *DecorationsReply) GetNodes() map[string]*common_go_proto.NodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *DecorationsReply) GetDefinitionLocations() map[string]*Anchor {
	if x != nil {
		return x.DefinitionLocations
	}
	return nil
}

func (x *DecorationsReply) GetExtendsOverrides() map[string]*DecorationsReply_Overrides {
	if x != nil {
		return x.ExtendsOverrides
	}
	return nil
}

func (x *DecorationsReply) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

type CrossReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket          []string                               `protobuf:"bytes,1,rep,name=ticket,proto3" json:"ticket,omitempty"`
	DefinitionKind  CrossReferencesRequest_DefinitionKind  `protobuf:"varint,2,opt,name=definition_kind,json=definitionKind,proto3,enum=kythe.proto.CrossReferencesRequest_DefinitionKind" json:"definition_kind,omitempty"`
	DeclarationKind CrossReferencesRequest_DeclarationKind `protobuf:"varint,7,opt,name=declaration_kind,json=declarationKind,proto3,enum=kythe.proto.CrossReferencesRequest_DeclarationKind" json:"declaration_kind,omitempty"`
	ReferenceKind   CrossReferencesRequest_ReferenceKind   `protobuf:"varint,3,opt,name=reference_kind,json=referenceKind,proto3,enum=kythe.proto.CrossReferencesRequest_ReferenceKind" json:"reference_kind,omitempty"`
	CallerKind      CrossReferencesRequest_CallerKind      `protobuf:"varint,12,opt,name=caller_kind,json=callerKind,proto3,enum=kythe.proto.CrossReferencesRequest_CallerKind" json:"caller_kind,omitempty"`
	Filter          []string                               `protobuf:"bytes,5,rep,name=filter,proto3" json:"filter,omitempty"`
	RelatedNodeKind []string                               `protobuf:"bytes,14,rep,name=related_node_kind,json=relatedNodeKind,proto3" json:"related_node_kind,omitempty"`
	AnchorText      bool                                   `protobuf:"varint,6,opt,name=anchor_text,json=anchorText,proto3" json:"anchor_text,omitempty"`
	NodeDefinitions bool                                   `protobuf:"varint,8,opt,name=node_definitions,json=nodeDefinitions,proto3" json:"node_definitions,omitempty"`
	TotalsQuality   CrossReferencesRequest_TotalsQuality   `protobuf:"varint,16,opt,name=totals_quality,json=totalsQuality,proto3,enum=kythe.proto.CrossReferencesRequest_TotalsQuality" json:"totals_quality,omitempty"`
	PageSize        int32                                  `protobuf:"varint,10,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken       string                                 `protobuf:"bytes,11,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Snippets        SnippetsKind                           `protobuf:"varint,13,opt,name=snippets,proto3,enum=kythe.proto.SnippetsKind" json:"snippets,omitempty"`
	BuildConfig     []string                               `protobuf:"bytes,15,rep,name=build_config,json=buildConfig,proto3" json:"build_config,omitempty"`
}

func (x *CrossReferencesRequest) Reset() {
	*x = CrossReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossReferencesRequest) ProtoMessage() {}

func (x *CrossReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossReferencesRequest.ProtoReflect.Descriptor instead.
func (*CrossReferencesRequest) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{4}
}

func (x *CrossReferencesRequest) GetTicket() []string {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *CrossReferencesRequest) GetDefinitionKind() CrossReferencesRequest_DefinitionKind {
	if x != nil {
		return x.DefinitionKind
	}
	return CrossReferencesRequest_NO_DEFINITIONS
}

func (x *CrossReferencesRequest) GetDeclarationKind() CrossReferencesRequest_DeclarationKind {
	if x != nil {
		return x.DeclarationKind
	}
	return CrossReferencesRequest_NO_DECLARATIONS
}

func (x *CrossReferencesRequest) GetReferenceKind() CrossReferencesRequest_ReferenceKind {
	if x != nil {
		return x.ReferenceKind
	}
	return CrossReferencesRequest_NO_REFERENCES
}

func (x *CrossReferencesRequest) GetCallerKind() CrossReferencesRequest_CallerKind {
	if x != nil {
		return x.CallerKind
	}
	return CrossReferencesRequest_NO_CALLERS
}

func (x *CrossReferencesRequest) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *CrossReferencesRequest) GetRelatedNodeKind() []string {
	if x != nil {
		return x.RelatedNodeKind
	}
	return nil
}

func (x *CrossReferencesRequest) GetAnchorText() bool {
	if x != nil {
		return x.AnchorText
	}
	return false
}

func (x *CrossReferencesRequest) GetNodeDefinitions() bool {
	if x != nil {
		return x.NodeDefinitions
	}
	return false
}

func (x *CrossReferencesRequest) GetTotalsQuality() CrossReferencesRequest_TotalsQuality {
	if x != nil {
		return x.TotalsQuality
	}
	return CrossReferencesRequest_UNSPECIFIED_TOTALS
}

func (x *CrossReferencesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CrossReferencesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *CrossReferencesRequest) GetSnippets() SnippetsKind {
	if x != nil {
		return x.Snippets
	}
	return SnippetsKind_NONE
}

func (x *CrossReferencesRequest) GetBuildConfig() []string {
	if x != nil {
		return x.BuildConfig
	}
	return nil
}

type Anchor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket      string                `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Kind        string                `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Parent      string                `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	Span        *common_go_proto.Span `protobuf:"bytes,10,opt,name=span,proto3" json:"span,omitempty"`
	Text        string                `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	Snippet     string                `protobuf:"bytes,7,opt,name=snippet,proto3" json:"snippet,omitempty"`
	SnippetSpan *common_go_proto.Span `protobuf:"bytes,11,opt,name=snippet_span,json=snippetSpan,proto3" json:"snippet_span,omitempty"`
	BuildConfig string                `protobuf:"bytes,12,opt,name=build_config,json=buildConfig,proto3" json:"build_config,omitempty"`
	Revision    string                `protobuf:"bytes,14,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *Anchor) Reset() {
	*x = Anchor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Anchor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Anchor) ProtoMessage() {}

func (x *Anchor) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Anchor.ProtoReflect.Descriptor instead.
func (*Anchor) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{5}
}

func (x *Anchor) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *Anchor) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Anchor) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *Anchor) GetSpan() *common_go_proto.Span {
	if x != nil {
		return x.Span
	}
	return nil
}

func (x *Anchor) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Anchor) GetSnippet() string {
	if x != nil {
		return x.Snippet
	}
	return ""
}

func (x *Anchor) GetSnippetSpan() *common_go_proto.Span {
	if x != nil {
		return x.SnippetSpan
	}
	return nil
}

func (x *Anchor) GetBuildConfig() string {
	if x != nil {
		return x.BuildConfig
	}
	return ""
}

func (x *Anchor) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

type Printable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawText string                  `protobuf:"bytes,1,opt,name=raw_text,json=rawText,proto3" json:"raw_text,omitempty"`
	Link    []*common_go_proto.Link `protobuf:"bytes,2,rep,name=link,proto3" json:"link,omitempty"`
}

func (x *Printable) Reset() {
	*x = Printable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Printable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Printable) ProtoMessage() {}

func (x *Printable) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Printable.ProtoReflect.Descriptor instead.
func (*Printable) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{6}
}

func (x *Printable) GetRawText() string {
	if x != nil {
		return x.RawText
	}
	return ""
}

func (x *Printable) GetLink() []*common_go_proto.Link {
	if x != nil {
		return x.Link
	}
	return nil
}

type CrossReferencesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total               *CrossReferencesReply_Total                        `protobuf:"bytes,5,opt,name=total,proto3" json:"total,omitempty"`
	CrossReferences     map[string]*CrossReferencesReply_CrossReferenceSet `protobuf:"bytes,1,rep,name=cross_references,json=crossReferences,proto3" json:"cross_references,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Nodes               map[string]*common_go_proto.NodeInfo               `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DefinitionLocations map[string]*Anchor                                 `protobuf:"bytes,3,rep,name=definition_locations,json=definitionLocations,proto3" json:"definition_locations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NextPageToken       string                                             `protobuf:"bytes,10,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	BuildId             string                                             `protobuf:"bytes,11,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
}

func (x *CrossReferencesReply) Reset() {
	*x = CrossReferencesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossReferencesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossReferencesReply) ProtoMessage() {}

func (x *CrossReferencesReply) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossReferencesReply.ProtoReflect.Descriptor instead.
func (*CrossReferencesReply) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{7}
}

func (x *CrossReferencesReply) GetTotal() *CrossReferencesReply_Total {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *CrossReferencesReply) GetCrossReferences() map[string]*CrossReferencesReply_CrossReferenceSet {
	if x != nil {
		return x.CrossReferences
	}
	return nil
}

func (x *CrossReferencesReply) GetNodes() map[string]*common_go_proto.NodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *CrossReferencesReply) GetDefinitionLocations() map[string]*Anchor {
	if x != nil {
		return x.DefinitionLocations
	}
	return nil
}

func (x *CrossReferencesReply) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *CrossReferencesReply) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

type DocumentationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket          []string `protobuf:"bytes,1,rep,name=ticket,proto3" json:"ticket,omitempty"`
	Filter          []string `protobuf:"bytes,2,rep,name=filter,proto3" json:"filter,omitempty"`
	IncludeChildren bool     `protobuf:"varint,3,opt,name=include_children,json=includeChildren,proto3" json:"include_children,omitempty"`
}

func (x *DocumentationRequest) Reset() {
	*x = DocumentationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentationRequest) ProtoMessage() {}

func (x *DocumentationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentationRequest.ProtoReflect.Descriptor instead.
func (*DocumentationRequest) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{8}
}

func (x *DocumentationRequest) GetTicket() []string {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *DocumentationRequest) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DocumentationRequest) GetIncludeChildren() bool {
	if x != nil {
		return x.IncludeChildren
	}
	return false
}

type DocumentationReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document            []*DocumentationReply_Document       `protobuf:"bytes,1,rep,name=document,proto3" json:"document,omitempty"`
	Nodes               map[string]*common_go_proto.NodeInfo `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DefinitionLocations map[string]*Anchor                   `protobuf:"bytes,3,rep,name=definition_locations,json=definitionLocations,proto3" json:"definition_locations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BuildId             string                               `protobuf:"bytes,4,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
}

func (x *DocumentationReply) Reset() {
	*x = DocumentationReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentationReply) ProtoMessage() {}

func (x *DocumentationReply) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentationReply.ProtoReflect.Descriptor instead.
func (*DocumentationReply) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{9}
}

func (x *DocumentationReply) GetDocument() []*DocumentationReply_Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *DocumentationReply) GetNodes() map[string]*common_go_proto.NodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *DocumentationReply) GetDefinitionLocations() map[string]*Anchor {
	if x != nil {
		return x.DefinitionLocations
	}
	return nil
}

func (x *DocumentationReply) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

type DecorationsReply_Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetTicket     string                `protobuf:"bytes,2,opt,name=target_ticket,json=targetTicket,proto3" json:"target_ticket,omitempty"`
	Kind             string                `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	TargetDefinition string                `protobuf:"bytes,4,opt,name=target_definition,json=targetDefinition,proto3" json:"target_definition,omitempty"`
	Span             *common_go_proto.Span `protobuf:"bytes,5,opt,name=span,proto3" json:"span,omitempty"`
	BuildConfig      string                `protobuf:"bytes,6,opt,name=build_config,json=buildConfig,proto3" json:"build_config,omitempty"`
	SemanticScope    string                `protobuf:"bytes,7,opt,name=semantic_scope,json=semanticScope,proto3" json:"semantic_scope,omitempty"`
	TargetRevision   string                `protobuf:"bytes,8,opt,name=target_revision,json=targetRevision,proto3" json:"target_revision,omitempty"`
}

func (x *DecorationsReply_Reference) Reset() {
	*x = DecorationsReply_Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecorationsReply_Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecorationsReply_Reference) ProtoMessage() {}

func (x *DecorationsReply_Reference) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecorationsReply_Reference.ProtoReflect.Descriptor instead.
func (*DecorationsReply_Reference) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{3, 0}
}

func (x *DecorationsReply_Reference) GetTargetTicket() string {
	if x != nil {
		return x.TargetTicket
	}
	return ""
}

func (x *DecorationsReply_Reference) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DecorationsReply_Reference) GetTargetDefinition() string {
	if x != nil {
		return x.TargetDefinition
	}
	return ""
}

func (x *DecorationsReply_Reference) GetSpan() *common_go_proto.Span {
	if x != nil {
		return x.Span
	}
	return nil
}

func (x *DecorationsReply_Reference) GetBuildConfig() string {
	if x != nil {
		return x.BuildConfig
	}
	return ""
}

func (x *DecorationsReply_Reference) GetSemanticScope() string {
	if x != nil {
		return x.SemanticScope
	}
	return ""
}

func (x *DecorationsReply_Reference) GetTargetRevision() string {
	if x != nil {
		return x.TargetRevision
	}
	return ""
}

type DecorationsReply_Override struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target           string                         `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TargetDefinition string                         `protobuf:"bytes,5,opt,name=target_definition,json=targetDefinition,proto3" json:"target_definition,omitempty"`
	Kind             DecorationsReply_Override_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=kythe.proto.DecorationsReply_Override_Kind" json:"kind,omitempty"`
	MarkedSource     *common_go_proto.MarkedSource  `protobuf:"bytes,4,opt,name=marked_source,json=markedSource,proto3" json:"marked_source,omitempty"`
}

func (x *DecorationsReply_Override) Reset() {
	*x = DecorationsReply_Override{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecorationsReply_Override) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecorationsReply_Override) ProtoMessage() {}

func (x *DecorationsReply_Override) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecorationsReply_Override.ProtoReflect.Descriptor instead.
func (*DecorationsReply_Override) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{3, 1}
}

func (x *DecorationsReply_Override) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *DecorationsReply_Override) GetTargetDefinition() string {
	if x != nil {
		return x.TargetDefinition
	}
	return ""
}

func (x *DecorationsReply_Override) GetKind() DecorationsReply_Override_Kind {
	if x != nil {
		return x.Kind
	}
	return DecorationsReply_Override_OVERRIDES
}

func (x *DecorationsReply_Override) GetMarkedSource() *common_go_proto.MarkedSource {
	if x != nil {
		return x.MarkedSource
	}
	return nil
}

type DecorationsReply_Overrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Override []*DecorationsReply_Override `protobuf:"bytes,1,rep,name=override,proto3" json:"override,omitempty"`
}

func (x *DecorationsReply_Overrides) Reset() {
	*x = DecorationsReply_Overrides{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecorationsReply_Overrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecorationsReply_Overrides) ProtoMessage() {}

func (x *DecorationsReply_Overrides) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecorationsReply_Overrides.ProtoReflect.Descriptor instead.
func (*DecorationsReply_Overrides) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{3, 2}
}

func (x *DecorationsReply_Overrides) GetOverride() []*DecorationsReply_Override {
	if x != nil {
		return x.Override
	}
	return nil
}

type CrossReferencesReply_RelatedNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket       string `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	RelationKind string `protobuf:"bytes,2,opt,name=relation_kind,json=relationKind,proto3" json:"relation_kind,omitempty"`
	Ordinal      int32  `protobuf:"varint,3,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
}

func (x *CrossReferencesReply_RelatedNode) Reset() {
	*x = CrossReferencesReply_RelatedNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossReferencesReply_RelatedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossReferencesReply_RelatedNode) ProtoMessage() {}

func (x *CrossReferencesReply_RelatedNode) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossReferencesReply_RelatedNode.ProtoReflect.Descriptor instead.
func (*CrossReferencesReply_RelatedNode) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CrossReferencesReply_RelatedNode) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *CrossReferencesReply_RelatedNode) GetRelationKind() string {
	if x != nil {
		return x.RelationKind
	}
	return ""
}

func (x *CrossReferencesReply_RelatedNode) GetOrdinal() int32 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

type CrossReferencesReply_RelatedAnchor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anchor       *Anchor                       `protobuf:"bytes,1,opt,name=anchor,proto3" json:"anchor,omitempty"`
	MarkedSource *common_go_proto.MarkedSource `protobuf:"bytes,5,opt,name=marked_source,json=markedSource,proto3" json:"marked_source,omitempty"`
	Site         []*Anchor                     `protobuf:"bytes,3,rep,name=site,proto3" json:"site,omitempty"`
	Ticket       string                        `protobuf:"bytes,4,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *CrossReferencesReply_RelatedAnchor) Reset() {
	*x = CrossReferencesReply_RelatedAnchor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossReferencesReply_RelatedAnchor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossReferencesReply_RelatedAnchor) ProtoMessage() {}

func (x *CrossReferencesReply_RelatedAnchor) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossReferencesReply_RelatedAnchor.ProtoReflect.Descriptor instead.
func (*CrossReferencesReply_RelatedAnchor) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{7, 1}
}

func (x *CrossReferencesReply_RelatedAnchor) GetAnchor() *Anchor {
	if x != nil {
		return x.Anchor
	}
	return nil
}

func (x *CrossReferencesReply_RelatedAnchor) GetMarkedSource() *common_go_proto.MarkedSource {
	if x != nil {
		return x.MarkedSource
	}
	return nil
}

func (x *CrossReferencesReply_RelatedAnchor) GetSite() []*Anchor {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *CrossReferencesReply_RelatedAnchor) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

type CrossReferencesReply_CrossReferenceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket       string                                `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	MarkedSource *common_go_proto.MarkedSource         `protobuf:"bytes,8,opt,name=marked_source,json=markedSource,proto3" json:"marked_source,omitempty"`
	Definition   []*CrossReferencesReply_RelatedAnchor `protobuf:"bytes,2,rep,name=definition,proto3" json:"definition,omitempty"`
	Declaration  []*CrossReferencesReply_RelatedAnchor `protobuf:"bytes,5,rep,name=declaration,proto3" json:"declaration,omitempty"`
	Reference    []*CrossReferencesReply_RelatedAnchor `protobuf:"bytes,3,rep,name=reference,proto3" json:"reference,omitempty"`
	Caller       []*CrossReferencesReply_RelatedAnchor `protobuf:"bytes,6,rep,name=caller,proto3" json:"caller,omitempty"`
	RelatedNode  []*CrossReferencesReply_RelatedNode   `protobuf:"bytes,10,rep,name=related_node,json=relatedNode,proto3" json:"related_node,omitempty"`
}

func (x *CrossReferencesReply_CrossReferenceSet) Reset() {
	*x = CrossReferencesReply_CrossReferenceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossReferencesReply_CrossReferenceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossReferencesReply_CrossReferenceSet) ProtoMessage() {}

func (x *CrossReferencesReply_CrossReferenceSet) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossReferencesReply_CrossReferenceSet.ProtoReflect.Descriptor instead.
func (*CrossReferencesReply_CrossReferenceSet) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{7, 2}
}

func (x *CrossReferencesReply_CrossReferenceSet) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *CrossReferencesReply_CrossReferenceSet) GetMarkedSource() *common_go_proto.MarkedSource {
	if x != nil {
		return x.MarkedSource
	}
	return nil
}

func (x *CrossReferencesReply_CrossReferenceSet) GetDefinition() []*CrossReferencesReply_RelatedAnchor {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *CrossReferencesReply_CrossReferenceSet) GetDeclaration() []*CrossReferencesReply_RelatedAnchor {
	if x != nil {
		return x.Declaration
	}
	return nil
}

func (x *CrossReferencesReply_CrossReferenceSet) GetReference() []*CrossReferencesReply_RelatedAnchor {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *CrossReferencesReply_CrossReferenceSet) GetCaller() []*CrossReferencesReply_RelatedAnchor {
	if x != nil {
		return x.Caller
	}
	return nil
}

func (x *CrossReferencesReply_CrossReferenceSet) GetRelatedNode() []*CrossReferencesReply_RelatedNode {
	if x != nil {
		return x.RelatedNode
	}
	return nil
}

type CrossReferencesReply_Total struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Definitions            int64            `protobuf:"varint,1,opt,name=definitions,proto3" json:"definitions,omitempty"`
	Declarations           int64            `protobuf:"varint,2,opt,name=declarations,proto3" json:"declarations,omitempty"`
	References             int64            `protobuf:"varint,3,opt,name=references,proto3" json:"references,omitempty"`
	Documentation          int64            `protobuf:"varint,4,opt,name=documentation,proto3" json:"documentation,omitempty"`
	Callers                int64            `protobuf:"varint,5,opt,name=callers,proto3" json:"callers,omitempty"`
	RelatedNodesByRelation map[string]int64 `protobuf:"bytes,6,rep,name=related_nodes_by_relation,json=relatedNodesByRelation,proto3" json:"related_nodes_by_relation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CrossReferencesReply_Total) Reset() {
	*x = CrossReferencesReply_Total{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossReferencesReply_Total) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossReferencesReply_Total) ProtoMessage() {}

func (x *CrossReferencesReply_Total) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossReferencesReply_Total.ProtoReflect.Descriptor instead.
func (*CrossReferencesReply_Total) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{7, 3}
}

func (x *CrossReferencesReply_Total) GetDefinitions() int64 {
	if x != nil {
		return x.Definitions
	}
	return 0
}

func (x *CrossReferencesReply_Total) GetDeclarations() int64 {
	if x != nil {
		return x.Declarations
	}
	return 0
}

func (x *CrossReferencesReply_Total) GetReferences() int64 {
	if x != nil {
		return x.References
	}
	return 0
}

func (x *CrossReferencesReply_Total) GetDocumentation() int64 {
	if x != nil {
		return x.Documentation
	}
	return 0
}

func (x *CrossReferencesReply_Total) GetCallers() int64 {
	if x != nil {
		return x.Callers
	}
	return 0
}

func (x *CrossReferencesReply_Total) GetRelatedNodesByRelation() map[string]int64 {
	if x != nil {
		return x.RelatedNodesByRelation
	}
	return nil
}

type DocumentationReply_Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket       string                         `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Text         *Printable                     `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	MarkedSource *common_go_proto.MarkedSource  `protobuf:"bytes,8,opt,name=marked_source,json=markedSource,proto3" json:"marked_source,omitempty"`
	Children     []*DocumentationReply_Document `protobuf:"bytes,9,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *DocumentationReply_Document) Reset() {
	*x = DocumentationReply_Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_xref_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentationReply_Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentationReply_Document) ProtoMessage() {}

func (x *DocumentationReply_Document) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_xref_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentationReply_Document.ProtoReflect.Descriptor instead.
func (*DocumentationReply_Document) Descriptor() ([]byte, []int) {
	return file_kythe_proto_xref_proto_rawDescGZIP(), []int{9, 0}
}

func (x *DocumentationReply_Document) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *DocumentationReply_Document) GetText() *Printable {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DocumentationReply_Document) GetMarkedSource() *common_go_proto.MarkedSource {
	if x != nil {
		return x.MarkedSource
	}
	return nil
}

func (x *DocumentationReply_Document) GetChildren() []*DocumentationReply_Document {
	if x != nil {
		return x.Children
	}
	return nil
}

var File_kythe_proto_xref_proto protoreflect.FileDescriptor

var file_kythe_proto_xref_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x72,
	0x65, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa8, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x04, 0x73, 0x70,
	0x61, 0x6e, 0x22, 0x1a, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x50, 0x41, 0x4e, 0x10, 0x01, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xb9, 0x04, 0x0a, 0x12, 0x44,
	0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x74, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x08, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x2c, 0x0a, 0x08, 0x53, 0x70, 0x61, 0x6e,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x5f, 0x53,
	0x50, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x53, 0x50, 0x41, 0x4e, 0x10, 0x01, 0x22, 0x63, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3f,
	0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x0c, 0x0a, 0x10,
	0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x31, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0a, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x12, 0x3d, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x69, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x60, 0x0a,
	0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x1a, 0xa4, 0x02, 0x0a, 0x09, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b,
	0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10,
	0x0c, 0x1a, 0x81, 0x02, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x79,
	0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x22, 0x0a, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x53,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x01, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x1a, 0x4f, 0x0a, 0x09, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x08, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x56, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b,
	0x0a, 0x18, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x79,
	0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6c, 0x0a, 0x15, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22,
	0xcf, 0x09, 0x0a, 0x16, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x5b, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6b, 0x79,
	0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x5e, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0f,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x58, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0a,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x35, 0x0a, 0x08, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x73,
	0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x68, 0x0a, 0x0e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x0e,
	0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x03, 0x22, 0x3c, 0x0a, 0x0f, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x44, 0x45,
	0x43, 0x4c, 0x41, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x01, 0x22, 0x64, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e,
	0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43,
	0x45, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x03, 0x22, 0x46, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x45, 0x52, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x56,
	0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x53, 0x10, 0x02,
	0x22, 0x53, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45,
	0x43, 0x49, 0x53, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x58, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x53, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x64, 0x10,
	0x65, 0x22, 0xbc, 0x02, 0x0a, 0x06, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0c,
	0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x0b, 0x73, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04,
	0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a,
	0x22, 0x54, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x61, 0x77, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x99, 0x0f, 0x0a, 0x14, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3d, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x61,
	0x0a, 0x10, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x1a, 0x64, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x1a, 0xca, 0x01,
	0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x0d,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x1a, 0x8c, 0x04, 0x0a, 0x11, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x4f, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08,
	0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x1a, 0xf8, 0x02, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x7e, 0x0a, 0x19, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6b,
	0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x42, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42,
	0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x49, 0x0a, 0x1b, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x77, 0x0a, 0x14, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x49,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a,
	0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b,
	0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x18, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x71, 0x0a, 0x14, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xd5, 0x05, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x08,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x1a, 0xf9, 0x01, 0x0a,
	0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a,
	0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06,
	0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x1a, 0x56, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x5b, 0x0a, 0x18, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x25, 0x0a,
	0x0c, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x01, 0x32, 0x92, 0x02, 0x0a, 0x0b, 0x58, 0x52, 0x65, 0x66, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x32, 0x0a, 0x1f, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0d,
	0x78, 0x72, 0x65, 0x66, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kythe_proto_xref_proto_rawDescOnce sync.Once
	file_kythe_proto_xref_proto_rawDescData = file_kythe_proto_xref_proto_rawDesc
)

func file_kythe_proto_xref_proto_rawDescGZIP() []byte {
	file_kythe_proto_xref_proto_rawDescOnce.Do(func() {
		file_kythe_proto_xref_proto_rawDescData = protoimpl.X.CompressGZIP(file_kythe_proto_xref_proto_rawDescData)
	})
	return file_kythe_proto_xref_proto_rawDescData
}

var file_kythe_proto_xref_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_kythe_proto_xref_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_kythe_proto_xref_proto_goTypes = []interface{}{
	(SnippetsKind)(0),                              // 0: kythe.proto.SnippetsKind
	(Location_Kind)(0),                             // 1: kythe.proto.Location.Kind
	(DecorationsRequest_SpanKind)(0),               // 2: kythe.proto.DecorationsRequest.SpanKind
	(DecorationsReply_Override_Kind)(0),            // 3: kythe.proto.DecorationsReply.Override.Kind
	(CrossReferencesRequest_DefinitionKind)(0),     // 4: kythe.proto.CrossReferencesRequest.DefinitionKind
	(CrossReferencesRequest_DeclarationKind)(0),    // 5: kythe.proto.CrossReferencesRequest.DeclarationKind
	(CrossReferencesRequest_ReferenceKind)(0),      // 6: kythe.proto.CrossReferencesRequest.ReferenceKind
	(CrossReferencesRequest_CallerKind)(0),         // 7: kythe.proto.CrossReferencesRequest.CallerKind
	(CrossReferencesRequest_TotalsQuality)(0),      // 8: kythe.proto.CrossReferencesRequest.TotalsQuality
	(*Location)(nil),                               // 9: kythe.proto.Location
	(*DecorationsRequest)(nil),                     // 10: kythe.proto.DecorationsRequest
	(*File)(nil),                                   // 11: kythe.proto.File
	(*DecorationsReply)(nil),                       // 12: kythe.proto.DecorationsReply
	(*CrossReferencesRequest)(nil),                 // 13: kythe.proto.CrossReferencesRequest
	(*Anchor)(nil),                                 // 14: kythe.proto.Anchor
	(*Printable)(nil),                              // 15: kythe.proto.Printable
	(*CrossReferencesReply)(nil),                   // 16: kythe.proto.CrossReferencesReply
	(*DocumentationRequest)(nil),                   // 17: kythe.proto.DocumentationRequest
	(*DocumentationReply)(nil),                     // 18: kythe.proto.DocumentationReply
	(*DecorationsReply_Reference)(nil),             // 19: kythe.proto.DecorationsReply.Reference
	(*DecorationsReply_Override)(nil),              // 20: kythe.proto.DecorationsReply.Override
	(*DecorationsReply_Overrides)(nil),             // 21: kythe.proto.DecorationsReply.Overrides
	nil,                                            // 22: kythe.proto.DecorationsReply.NodesEntry
	nil,                                            // 23: kythe.proto.DecorationsReply.DefinitionLocationsEntry
	nil,                                            // 24: kythe.proto.DecorationsReply.ExtendsOverridesEntry
	(*CrossReferencesReply_RelatedNode)(nil),       // 25: kythe.proto.CrossReferencesReply.RelatedNode
	(*CrossReferencesReply_RelatedAnchor)(nil),     // 26: kythe.proto.CrossReferencesReply.RelatedAnchor
	(*CrossReferencesReply_CrossReferenceSet)(nil), // 27: kythe.proto.CrossReferencesReply.CrossReferenceSet
	(*CrossReferencesReply_Total)(nil),             // 28: kythe.proto.CrossReferencesReply.Total
	nil,                                            // 29: kythe.proto.CrossReferencesReply.CrossReferencesEntry
	nil,                                            // 30: kythe.proto.CrossReferencesReply.NodesEntry
	nil,                                            // 31: kythe.proto.CrossReferencesReply.DefinitionLocationsEntry
	nil,                                            // 32: kythe.proto.CrossReferencesReply.Total.RelatedNodesByRelationEntry
	(*DocumentationReply_Document)(nil),            // 33: kythe.proto.DocumentationReply.Document
	nil,                                            // 34: kythe.proto.DocumentationReply.NodesEntry
	nil,                                            // 35: kythe.proto.DocumentationReply.DefinitionLocationsEntry
	(*common_go_proto.Span)(nil),                   // 36: kythe.proto.common.Span
	(*common_go_proto.CorpusPath)(nil),             // 37: kythe.proto.common.CorpusPath
	(*common_go_proto.Diagnostic)(nil),             // 38: kythe.proto.common.Diagnostic
	(*common_go_proto.Link)(nil),                   // 39: kythe.proto.common.Link
	(*common_go_proto.MarkedSource)(nil),           // 40: kythe.proto.common.MarkedSource
	(*common_go_proto.NodeInfo)(nil),               // 41: kythe.proto.common.NodeInfo
}
var file_kythe_proto_xref_proto_depIdxs = []int32{
	1,  // 0: kythe.proto.Location.kind:type_name -> kythe.proto.Location.Kind
	36, // 1: kythe.proto.Location.span:type_name -> kythe.proto.common.Span
	9,  // 2: kythe.proto.DecorationsRequest.location:type_name -> kythe.proto.Location
	2,  // 3: kythe.proto.DecorationsRequest.span_kind:type_name -> kythe.proto.DecorationsRequest.SpanKind
	0,  // 4: kythe.proto.DecorationsRequest.snippets:type_name -> kythe.proto.SnippetsKind
	37, // 5: kythe.proto.File.corpus_path:type_name -> kythe.proto.common.CorpusPath
	9,  // 6: kythe.proto.DecorationsReply.location:type_name -> kythe.proto.Location
	19, // 7: kythe.proto.DecorationsReply.reference:type_name -> kythe.proto.DecorationsReply.Reference
	38, // 8: kythe.proto.DecorationsReply.diagnostic:type_name -> kythe.proto.common.Diagnostic
	11, // 9: kythe.proto.DecorationsReply.generated_by_file:type_name -> kythe.proto.File
	22, // 10: kythe.proto.DecorationsReply.nodes:type_name -> kythe.proto.DecorationsReply.NodesEntry
	23, // 11: kythe.proto.DecorationsReply.definition_locations:type_name -> kythe.proto.DecorationsReply.DefinitionLocationsEntry
	24, // 12: kythe.proto.DecorationsReply.extends_overrides:type_name -> kythe.proto.DecorationsReply.ExtendsOverridesEntry
	4,  // 13: kythe.proto.CrossReferencesRequest.definition_kind:type_name -> kythe.proto.CrossReferencesRequest.DefinitionKind
	5,  // 14: kythe.proto.CrossReferencesRequest.declaration_kind:type_name -> kythe.proto.CrossReferencesRequest.DeclarationKind
	6,  // 15: kythe.proto.CrossReferencesRequest.reference_kind:type_name -> kythe.proto.CrossReferencesRequest.ReferenceKind
	7,  // 16: kythe.proto.CrossReferencesRequest.caller_kind:type_name -> kythe.proto.CrossReferencesRequest.CallerKind
	8,  // 17: kythe.proto.CrossReferencesRequest.totals_quality:type_name -> kythe.proto.CrossReferencesRequest.TotalsQuality
	0,  // 18: kythe.proto.CrossReferencesRequest.snippets:type_name -> kythe.proto.SnippetsKind
	36, // 19: kythe.proto.Anchor.span:type_name -> kythe.proto.common.Span
	36, // 20: kythe.proto.Anchor.snippet_span:type_name -> kythe.proto.common.Span
	39, // 21: kythe.proto.Printable.link:type_name -> kythe.proto.common.Link
	28, // 22: kythe.proto.CrossReferencesReply.total:type_name -> kythe.proto.CrossReferencesReply.Total
	29, // 23: kythe.proto.CrossReferencesReply.cross_references:type_name -> kythe.proto.CrossReferencesReply.CrossReferencesEntry
	30, // 24: kythe.proto.CrossReferencesReply.nodes:type_name -> kythe.proto.CrossReferencesReply.NodesEntry
	31, // 25: kythe.proto.CrossReferencesReply.definition_locations:type_name -> kythe.proto.CrossReferencesReply.DefinitionLocationsEntry
	33, // 26: kythe.proto.DocumentationReply.document:type_name -> kythe.proto.DocumentationReply.Document
	34, // 27: kythe.proto.DocumentationReply.nodes:type_name -> kythe.proto.DocumentationReply.NodesEntry
	35, // 28: kythe.proto.DocumentationReply.definition_locations:type_name -> kythe.proto.DocumentationReply.DefinitionLocationsEntry
	36, // 29: kythe.proto.DecorationsReply.Reference.span:type_name -> kythe.proto.common.Span
	3,  // 30: kythe.proto.DecorationsReply.Override.kind:type_name -> kythe.proto.DecorationsReply.Override.Kind
	40, // 31: kythe.proto.DecorationsReply.Override.marked_source:type_name -> kythe.proto.common.MarkedSource
	20, // 32: kythe.proto.DecorationsReply.Overrides.override:type_name -> kythe.proto.DecorationsReply.Override
	41, // 33: kythe.proto.DecorationsReply.NodesEntry.value:type_name -> kythe.proto.common.NodeInfo
	14, // 34: kythe.proto.DecorationsReply.DefinitionLocationsEntry.value:type_name -> kythe.proto.Anchor
	21, // 35: kythe.proto.DecorationsReply.ExtendsOverridesEntry.value:type_name -> kythe.proto.DecorationsReply.Overrides
	14, // 36: kythe.proto.CrossReferencesReply.RelatedAnchor.anchor:type_name -> kythe.proto.Anchor
	40, // 37: kythe.proto.CrossReferencesReply.RelatedAnchor.marked_source:type_name -> kythe.proto.common.MarkedSource
	14, // 38: kythe.proto.CrossReferencesReply.RelatedAnchor.site:type_name -> kythe.proto.Anchor
	40, // 39: kythe.proto.CrossReferencesReply.CrossReferenceSet.marked_source:type_name -> kythe.proto.common.MarkedSource
	26, // 40: kythe.proto.CrossReferencesReply.CrossReferenceSet.definition:type_name -> kythe.proto.CrossReferencesReply.RelatedAnchor
	26, // 41: kythe.proto.CrossReferencesReply.CrossReferenceSet.declaration:type_name -> kythe.proto.CrossReferencesReply.RelatedAnchor
	26, // 42: kythe.proto.CrossReferencesReply.CrossReferenceSet.reference:type_name -> kythe.proto.CrossReferencesReply.RelatedAnchor
	26, // 43: kythe.proto.CrossReferencesReply.CrossReferenceSet.caller:type_name -> kythe.proto.CrossReferencesReply.RelatedAnchor
	25, // 44: kythe.proto.CrossReferencesReply.CrossReferenceSet.related_node:type_name -> kythe.proto.CrossReferencesReply.RelatedNode
	32, // 45: kythe.proto.CrossReferencesReply.Total.related_nodes_by_relation:type_name -> kythe.proto.CrossReferencesReply.Total.RelatedNodesByRelationEntry
	27, // 46: kythe.proto.CrossReferencesReply.CrossReferencesEntry.value:type_name -> kythe.proto.CrossReferencesReply.CrossReferenceSet
	41, // 47: kythe.proto.CrossReferencesReply.NodesEntry.value:type_name -> kythe.proto.common.NodeInfo
	14, // 48: kythe.proto.CrossReferencesReply.DefinitionLocationsEntry.value:type_name -> kythe.proto.Anchor
	15, // 49: kythe.proto.DocumentationReply.Document.text:type_name -> kythe.proto.Printable
	40, // 50: kythe.proto.DocumentationReply.Document.marked_source:type_name -> kythe.proto.common.MarkedSource
	33, // 51: kythe.proto.DocumentationReply.Document.children:type_name -> kythe.proto.DocumentationReply.Document
	41, // 52: kythe.proto.DocumentationReply.NodesEntry.value:type_name -> kythe.proto.common.NodeInfo
	14, // 53: kythe.proto.DocumentationReply.DefinitionLocationsEntry.value:type_name -> kythe.proto.Anchor
	10, // 54: kythe.proto.XRefService.Decorations:input_type -> kythe.proto.DecorationsRequest
	13, // 55: kythe.proto.XRefService.CrossReferences:input_type -> kythe.proto.CrossReferencesRequest
	17, // 56: kythe.proto.XRefService.Documentation:input_type -> kythe.proto.DocumentationRequest
	12, // 57: kythe.proto.XRefService.Decorations:output_type -> kythe.proto.DecorationsReply
	16, // 58: kythe.proto.XRefService.CrossReferences:output_type -> kythe.proto.CrossReferencesReply
	18, // 59: kythe.proto.XRefService.Documentation:output_type -> kythe.proto.DocumentationReply
	57, // [57:60] is the sub-list for method output_type
	54, // [54:57] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_kythe_proto_xref_proto_init() }
func file_kythe_proto_xref_proto_init() {
	if File_kythe_proto_xref_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kythe_proto_xref_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecorationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecorationsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Anchor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Printable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossReferencesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentationReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecorationsReply_Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecorationsReply_Override); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecorationsReply_Overrides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossReferencesReply_RelatedNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossReferencesReply_RelatedAnchor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossReferencesReply_CrossReferenceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossReferencesReply_Total); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_xref_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentationReply_Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kythe_proto_xref_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kythe_proto_xref_proto_goTypes,
		DependencyIndexes: file_kythe_proto_xref_proto_depIdxs,
		EnumInfos:         file_kythe_proto_xref_proto_enumTypes,
		MessageInfos:      file_kythe_proto_xref_proto_msgTypes,
	}.Build()
	File_kythe_proto_xref_proto = out.File
	file_kythe_proto_xref_proto_rawDesc = nil
	file_kythe_proto_xref_proto_goTypes = nil
	file_kythe_proto_xref_proto_depIdxs = nil
}
