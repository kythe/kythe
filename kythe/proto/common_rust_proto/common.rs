// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `kythe/proto/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Fact {
    // message fields
    pub name: ::std::string::String,
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Fact {
    fn default() -> &'a Fact {
        <Fact as ::protobuf::Message>::default_instance()
    }
}

impl Fact {
    pub fn new() -> Fact {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Fact {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Fact {
        Fact::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Fact| { &m.name },
                |m: &mut Fact| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &Fact| { &m.value },
                |m: &mut Fact| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Fact>(
                "Fact",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Fact {
        static instance: ::protobuf::rt::LazyV2<Fact> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Fact::new)
    }
}

impl ::protobuf::Clear for Fact {
    fn clear(&mut self) {
        self.name.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Fact {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fact {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Point {
    // message fields
    pub byte_offset: i32,
    pub line_number: i32,
    pub column_offset: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Point {
    fn default() -> &'a Point {
        <Point as ::protobuf::Message>::default_instance()
    }
}

impl Point {
    pub fn new() -> Point {
        ::std::default::Default::default()
    }

    // int32 byte_offset = 1;


    pub fn get_byte_offset(&self) -> i32 {
        self.byte_offset
    }
    pub fn clear_byte_offset(&mut self) {
        self.byte_offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_byte_offset(&mut self, v: i32) {
        self.byte_offset = v;
    }

    // int32 line_number = 2;


    pub fn get_line_number(&self) -> i32 {
        self.line_number
    }
    pub fn clear_line_number(&mut self) {
        self.line_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_line_number(&mut self, v: i32) {
        self.line_number = v;
    }

    // int32 column_offset = 3;


    pub fn get_column_offset(&self) -> i32 {
        self.column_offset
    }
    pub fn clear_column_offset(&mut self) {
        self.column_offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_column_offset(&mut self, v: i32) {
        self.column_offset = v;
    }
}

impl ::protobuf::Message for Point {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.byte_offset = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.line_number = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.column_offset = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.byte_offset != 0 {
            my_size += ::protobuf::rt::value_size(1, self.byte_offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.line_number != 0 {
            my_size += ::protobuf::rt::value_size(2, self.line_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.column_offset != 0 {
            my_size += ::protobuf::rt::value_size(3, self.column_offset, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.byte_offset != 0 {
            os.write_int32(1, self.byte_offset)?;
        }
        if self.line_number != 0 {
            os.write_int32(2, self.line_number)?;
        }
        if self.column_offset != 0 {
            os.write_int32(3, self.column_offset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Point {
        Point::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "byte_offset",
                |m: &Point| { &m.byte_offset },
                |m: &mut Point| { &mut m.byte_offset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "line_number",
                |m: &Point| { &m.line_number },
                |m: &mut Point| { &mut m.line_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "column_offset",
                |m: &Point| { &m.column_offset },
                |m: &mut Point| { &mut m.column_offset },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Point>(
                "Point",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Point {
        static instance: ::protobuf::rt::LazyV2<Point> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Point::new)
    }
}

impl ::protobuf::Clear for Point {
    fn clear(&mut self) {
        self.byte_offset = 0;
        self.line_number = 0;
        self.column_offset = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Point {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Point {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Span {
    // message fields
    pub start: ::protobuf::SingularPtrField<Point>,
    pub end: ::protobuf::SingularPtrField<Point>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Span {
    fn default() -> &'a Span {
        <Span as ::protobuf::Message>::default_instance()
    }
}

impl Span {
    pub fn new() -> Span {
        ::std::default::Default::default()
    }

    // .kythe.proto.common.Point start = 1;


    pub fn get_start(&self) -> &Point {
        self.start.as_ref().unwrap_or_else(|| <Point as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start(&mut self) {
        self.start.clear();
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: Point) {
        self.start = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start(&mut self) -> &mut Point {
        if self.start.is_none() {
            self.start.set_default();
        }
        self.start.as_mut().unwrap()
    }

    // Take field
    pub fn take_start(&mut self) -> Point {
        self.start.take().unwrap_or_else(|| Point::new())
    }

    // .kythe.proto.common.Point end = 2;


    pub fn get_end(&self) -> &Point {
        self.end.as_ref().unwrap_or_else(|| <Point as ::protobuf::Message>::default_instance())
    }
    pub fn clear_end(&mut self) {
        self.end.clear();
    }

    pub fn has_end(&self) -> bool {
        self.end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: Point) {
        self.end = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end(&mut self) -> &mut Point {
        if self.end.is_none() {
            self.end.set_default();
        }
        self.end.as_mut().unwrap()
    }

    // Take field
    pub fn take_end(&mut self) -> Point {
        self.end.take().unwrap_or_else(|| Point::new())
    }
}

impl ::protobuf::Message for Span {
    fn is_initialized(&self) -> bool {
        for v in &self.start {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.start.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.start.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Span {
        Span::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Point>>(
                "start",
                |m: &Span| { &m.start },
                |m: &mut Span| { &mut m.start },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Point>>(
                "end",
                |m: &Span| { &m.end },
                |m: &mut Span| { &mut m.end },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Span>(
                "Span",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Span {
        static instance: ::protobuf::rt::LazyV2<Span> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Span::new)
    }
}

impl ::protobuf::Clear for Span {
    fn clear(&mut self) {
        self.start.clear();
        self.end.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Span {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Span {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeInfo {
    // message fields
    pub facts: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>>,
    pub definition: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NodeInfo {
    fn default() -> &'a NodeInfo {
        <NodeInfo as ::protobuf::Message>::default_instance()
    }
}

impl NodeInfo {
    pub fn new() -> NodeInfo {
        ::std::default::Default::default()
    }

    // repeated .kythe.proto.common.NodeInfo.FactsEntry facts = 2;


    pub fn get_facts(&self) -> &::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        &self.facts
    }
    pub fn clear_facts(&mut self) {
        self.facts.clear();
    }

    // Param is passed by value, moved
    pub fn set_facts(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>>) {
        self.facts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_facts(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        &mut self.facts
    }

    // Take field
    pub fn take_facts(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.facts, ::std::collections::HashMap::new())
    }

    // string definition = 5;


    pub fn get_definition(&self) -> &str {
        &self.definition
    }
    pub fn clear_definition(&mut self) {
        self.definition.clear();
    }

    // Param is passed by value, moved
    pub fn set_definition(&mut self, v: ::std::string::String) {
        self.definition = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_definition(&mut self) -> &mut ::std::string::String {
        &mut self.definition
    }

    // Take field
    pub fn take_definition(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.definition, ::std::string::String::new())
    }
}

impl ::protobuf::Message for NodeInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(wire_type, is, &mut self.facts)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.definition)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(2, &self.facts);
        if !self.definition.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.definition);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(2, &self.facts, os)?;
        if !self.definition.is_empty() {
            os.write_string(5, &self.definition)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeInfo {
        NodeInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(
                "facts",
                |m: &NodeInfo| { &m.facts },
                |m: &mut NodeInfo| { &mut m.facts },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "definition",
                |m: &NodeInfo| { &m.definition },
                |m: &mut NodeInfo| { &mut m.definition },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NodeInfo>(
                "NodeInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NodeInfo {
        static instance: ::protobuf::rt::LazyV2<NodeInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NodeInfo::new)
    }
}

impl ::protobuf::Clear for NodeInfo {
    fn clear(&mut self) {
        self.facts.clear();
        self.definition.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Diagnostic {
    // message fields
    pub span: ::protobuf::SingularPtrField<Span>,
    pub message: ::std::string::String,
    pub details: ::std::string::String,
    pub context_url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Diagnostic {
    fn default() -> &'a Diagnostic {
        <Diagnostic as ::protobuf::Message>::default_instance()
    }
}

impl Diagnostic {
    pub fn new() -> Diagnostic {
        ::std::default::Default::default()
    }

    // .kythe.proto.common.Span span = 1;


    pub fn get_span(&self) -> &Span {
        self.span.as_ref().unwrap_or_else(|| <Span as ::protobuf::Message>::default_instance())
    }
    pub fn clear_span(&mut self) {
        self.span.clear();
    }

    pub fn has_span(&self) -> bool {
        self.span.is_some()
    }

    // Param is passed by value, moved
    pub fn set_span(&mut self, v: Span) {
        self.span = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_span(&mut self) -> &mut Span {
        if self.span.is_none() {
            self.span.set_default();
        }
        self.span.as_mut().unwrap()
    }

    // Take field
    pub fn take_span(&mut self) -> Span {
        self.span.take().unwrap_or_else(|| Span::new())
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // string details = 3;


    pub fn get_details(&self) -> &str {
        &self.details
    }
    pub fn clear_details(&mut self) {
        self.details.clear();
    }

    // Param is passed by value, moved
    pub fn set_details(&mut self, v: ::std::string::String) {
        self.details = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_details(&mut self) -> &mut ::std::string::String {
        &mut self.details
    }

    // Take field
    pub fn take_details(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.details, ::std::string::String::new())
    }

    // string context_url = 4;


    pub fn get_context_url(&self) -> &str {
        &self.context_url
    }
    pub fn clear_context_url(&mut self) {
        self.context_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_context_url(&mut self, v: ::std::string::String) {
        self.context_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context_url(&mut self) -> &mut ::std::string::String {
        &mut self.context_url
    }

    // Take field
    pub fn take_context_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.context_url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Diagnostic {
    fn is_initialized(&self) -> bool {
        for v in &self.span {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.span)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.details)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.context_url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.span.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if !self.details.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.details);
        }
        if !self.context_url.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.context_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.span.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if !self.details.is_empty() {
            os.write_string(3, &self.details)?;
        }
        if !self.context_url.is_empty() {
            os.write_string(4, &self.context_url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Diagnostic {
        Diagnostic::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Span>>(
                "span",
                |m: &Diagnostic| { &m.span },
                |m: &mut Diagnostic| { &mut m.span },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &Diagnostic| { &m.message },
                |m: &mut Diagnostic| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "details",
                |m: &Diagnostic| { &m.details },
                |m: &mut Diagnostic| { &mut m.details },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "context_url",
                |m: &Diagnostic| { &m.context_url },
                |m: &mut Diagnostic| { &mut m.context_url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Diagnostic>(
                "Diagnostic",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Diagnostic {
        static instance: ::protobuf::rt::LazyV2<Diagnostic> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Diagnostic::new)
    }
}

impl ::protobuf::Clear for Diagnostic {
    fn clear(&mut self) {
        self.span.clear();
        self.message.clear();
        self.details.clear();
        self.context_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Diagnostic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Diagnostic {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResolvedDiagnostic {
    // message fields
    pub corpus_path: ::protobuf::SingularPtrField<CorpusPath>,
    pub diagnostic: ::protobuf::SingularPtrField<Diagnostic>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResolvedDiagnostic {
    fn default() -> &'a ResolvedDiagnostic {
        <ResolvedDiagnostic as ::protobuf::Message>::default_instance()
    }
}

impl ResolvedDiagnostic {
    pub fn new() -> ResolvedDiagnostic {
        ::std::default::Default::default()
    }

    // .kythe.proto.common.CorpusPath corpus_path = 1;


    pub fn get_corpus_path(&self) -> &CorpusPath {
        self.corpus_path.as_ref().unwrap_or_else(|| <CorpusPath as ::protobuf::Message>::default_instance())
    }
    pub fn clear_corpus_path(&mut self) {
        self.corpus_path.clear();
    }

    pub fn has_corpus_path(&self) -> bool {
        self.corpus_path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_corpus_path(&mut self, v: CorpusPath) {
        self.corpus_path = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpus_path(&mut self) -> &mut CorpusPath {
        if self.corpus_path.is_none() {
            self.corpus_path.set_default();
        }
        self.corpus_path.as_mut().unwrap()
    }

    // Take field
    pub fn take_corpus_path(&mut self) -> CorpusPath {
        self.corpus_path.take().unwrap_or_else(|| CorpusPath::new())
    }

    // .kythe.proto.common.Diagnostic diagnostic = 2;


    pub fn get_diagnostic(&self) -> &Diagnostic {
        self.diagnostic.as_ref().unwrap_or_else(|| <Diagnostic as ::protobuf::Message>::default_instance())
    }
    pub fn clear_diagnostic(&mut self) {
        self.diagnostic.clear();
    }

    pub fn has_diagnostic(&self) -> bool {
        self.diagnostic.is_some()
    }

    // Param is passed by value, moved
    pub fn set_diagnostic(&mut self, v: Diagnostic) {
        self.diagnostic = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_diagnostic(&mut self) -> &mut Diagnostic {
        if self.diagnostic.is_none() {
            self.diagnostic.set_default();
        }
        self.diagnostic.as_mut().unwrap()
    }

    // Take field
    pub fn take_diagnostic(&mut self) -> Diagnostic {
        self.diagnostic.take().unwrap_or_else(|| Diagnostic::new())
    }
}

impl ::protobuf::Message for ResolvedDiagnostic {
    fn is_initialized(&self) -> bool {
        for v in &self.corpus_path {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.diagnostic {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.corpus_path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.diagnostic)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.corpus_path.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.diagnostic.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.corpus_path.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.diagnostic.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResolvedDiagnostic {
        ResolvedDiagnostic::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CorpusPath>>(
                "corpus_path",
                |m: &ResolvedDiagnostic| { &m.corpus_path },
                |m: &mut ResolvedDiagnostic| { &mut m.corpus_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Diagnostic>>(
                "diagnostic",
                |m: &ResolvedDiagnostic| { &m.diagnostic },
                |m: &mut ResolvedDiagnostic| { &mut m.diagnostic },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResolvedDiagnostic>(
                "ResolvedDiagnostic",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResolvedDiagnostic {
        static instance: ::protobuf::rt::LazyV2<ResolvedDiagnostic> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResolvedDiagnostic::new)
    }
}

impl ::protobuf::Clear for ResolvedDiagnostic {
    fn clear(&mut self) {
        self.corpus_path.clear();
        self.diagnostic.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResolvedDiagnostic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResolvedDiagnostic {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CorpusPath {
    // message fields
    pub corpus: ::std::string::String,
    pub root: ::std::string::String,
    pub path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CorpusPath {
    fn default() -> &'a CorpusPath {
        <CorpusPath as ::protobuf::Message>::default_instance()
    }
}

impl CorpusPath {
    pub fn new() -> CorpusPath {
        ::std::default::Default::default()
    }

    // string corpus = 1;


    pub fn get_corpus(&self) -> &str {
        &self.corpus
    }
    pub fn clear_corpus(&mut self) {
        self.corpus.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpus(&mut self, v: ::std::string::String) {
        self.corpus = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpus(&mut self) -> &mut ::std::string::String {
        &mut self.corpus
    }

    // Take field
    pub fn take_corpus(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpus, ::std::string::String::new())
    }

    // string root = 2;


    pub fn get_root(&self) -> &str {
        &self.root
    }
    pub fn clear_root(&mut self) {
        self.root.clear();
    }

    // Param is passed by value, moved
    pub fn set_root(&mut self, v: ::std::string::String) {
        self.root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root(&mut self) -> &mut ::std::string::String {
        &mut self.root
    }

    // Take field
    pub fn take_root(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.root, ::std::string::String::new())
    }

    // string path = 3;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CorpusPath {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpus)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.root)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.corpus.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.corpus);
        }
        if !self.root.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.root);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.corpus.is_empty() {
            os.write_string(1, &self.corpus)?;
        }
        if !self.root.is_empty() {
            os.write_string(2, &self.root)?;
        }
        if !self.path.is_empty() {
            os.write_string(3, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CorpusPath {
        CorpusPath::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpus",
                |m: &CorpusPath| { &m.corpus },
                |m: &mut CorpusPath| { &mut m.corpus },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "root",
                |m: &CorpusPath| { &m.root },
                |m: &mut CorpusPath| { &mut m.root },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &CorpusPath| { &m.path },
                |m: &mut CorpusPath| { &mut m.path },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CorpusPath>(
                "CorpusPath",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CorpusPath {
        static instance: ::protobuf::rt::LazyV2<CorpusPath> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CorpusPath::new)
    }
}

impl ::protobuf::Clear for CorpusPath {
    fn clear(&mut self) {
        self.corpus.clear();
        self.root.clear();
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CorpusPath {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CorpusPath {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Link {
    // message fields
    pub definition: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Link {
    fn default() -> &'a Link {
        <Link as ::protobuf::Message>::default_instance()
    }
}

impl Link {
    pub fn new() -> Link {
        ::std::default::Default::default()
    }

    // repeated string definition = 3;


    pub fn get_definition(&self) -> &[::std::string::String] {
        &self.definition
    }
    pub fn clear_definition(&mut self) {
        self.definition.clear();
    }

    // Param is passed by value, moved
    pub fn set_definition(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.definition = v;
    }

    // Mutable pointer to the field.
    pub fn mut_definition(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.definition
    }

    // Take field
    pub fn take_definition(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.definition, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Link {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.definition)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.definition {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.definition {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Link {
        Link::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "definition",
                |m: &Link| { &m.definition },
                |m: &mut Link| { &mut m.definition },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Link>(
                "Link",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Link {
        static instance: ::protobuf::rt::LazyV2<Link> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Link::new)
    }
}

impl ::protobuf::Clear for Link {
    fn clear(&mut self) {
        self.definition.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Link {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Link {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MarkedSource {
    // message fields
    pub kind: MarkedSource_Kind,
    pub pre_text: ::std::string::String,
    pub child: ::protobuf::RepeatedField<MarkedSource>,
    pub post_child_text: ::std::string::String,
    pub post_text: ::std::string::String,
    pub lookup_index: u32,
    pub default_children_count: u32,
    pub add_final_list_token: bool,
    pub link: ::protobuf::RepeatedField<Link>,
    pub exclude_on_include: ::std::vec::Vec<MarkedSource_Kind>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MarkedSource {
    fn default() -> &'a MarkedSource {
        <MarkedSource as ::protobuf::Message>::default_instance()
    }
}

impl MarkedSource {
    pub fn new() -> MarkedSource {
        ::std::default::Default::default()
    }

    // .kythe.proto.common.MarkedSource.Kind kind = 1;


    pub fn get_kind(&self) -> MarkedSource_Kind {
        self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind = MarkedSource_Kind::BOX;
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: MarkedSource_Kind) {
        self.kind = v;
    }

    // string pre_text = 2;


    pub fn get_pre_text(&self) -> &str {
        &self.pre_text
    }
    pub fn clear_pre_text(&mut self) {
        self.pre_text.clear();
    }

    // Param is passed by value, moved
    pub fn set_pre_text(&mut self, v: ::std::string::String) {
        self.pre_text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pre_text(&mut self) -> &mut ::std::string::String {
        &mut self.pre_text
    }

    // Take field
    pub fn take_pre_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pre_text, ::std::string::String::new())
    }

    // repeated .kythe.proto.common.MarkedSource child = 3;


    pub fn get_child(&self) -> &[MarkedSource] {
        &self.child
    }
    pub fn clear_child(&mut self) {
        self.child.clear();
    }

    // Param is passed by value, moved
    pub fn set_child(&mut self, v: ::protobuf::RepeatedField<MarkedSource>) {
        self.child = v;
    }

    // Mutable pointer to the field.
    pub fn mut_child(&mut self) -> &mut ::protobuf::RepeatedField<MarkedSource> {
        &mut self.child
    }

    // Take field
    pub fn take_child(&mut self) -> ::protobuf::RepeatedField<MarkedSource> {
        ::std::mem::replace(&mut self.child, ::protobuf::RepeatedField::new())
    }

    // string post_child_text = 4;


    pub fn get_post_child_text(&self) -> &str {
        &self.post_child_text
    }
    pub fn clear_post_child_text(&mut self) {
        self.post_child_text.clear();
    }

    // Param is passed by value, moved
    pub fn set_post_child_text(&mut self, v: ::std::string::String) {
        self.post_child_text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_post_child_text(&mut self) -> &mut ::std::string::String {
        &mut self.post_child_text
    }

    // Take field
    pub fn take_post_child_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.post_child_text, ::std::string::String::new())
    }

    // string post_text = 5;


    pub fn get_post_text(&self) -> &str {
        &self.post_text
    }
    pub fn clear_post_text(&mut self) {
        self.post_text.clear();
    }

    // Param is passed by value, moved
    pub fn set_post_text(&mut self, v: ::std::string::String) {
        self.post_text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_post_text(&mut self) -> &mut ::std::string::String {
        &mut self.post_text
    }

    // Take field
    pub fn take_post_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.post_text, ::std::string::String::new())
    }

    // uint32 lookup_index = 6;


    pub fn get_lookup_index(&self) -> u32 {
        self.lookup_index
    }
    pub fn clear_lookup_index(&mut self) {
        self.lookup_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_lookup_index(&mut self, v: u32) {
        self.lookup_index = v;
    }

    // uint32 default_children_count = 7;


    pub fn get_default_children_count(&self) -> u32 {
        self.default_children_count
    }
    pub fn clear_default_children_count(&mut self) {
        self.default_children_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_default_children_count(&mut self, v: u32) {
        self.default_children_count = v;
    }

    // bool add_final_list_token = 10;


    pub fn get_add_final_list_token(&self) -> bool {
        self.add_final_list_token
    }
    pub fn clear_add_final_list_token(&mut self) {
        self.add_final_list_token = false;
    }

    // Param is passed by value, moved
    pub fn set_add_final_list_token(&mut self, v: bool) {
        self.add_final_list_token = v;
    }

    // repeated .kythe.proto.common.Link link = 11;


    pub fn get_link(&self) -> &[Link] {
        &self.link
    }
    pub fn clear_link(&mut self) {
        self.link.clear();
    }

    // Param is passed by value, moved
    pub fn set_link(&mut self, v: ::protobuf::RepeatedField<Link>) {
        self.link = v;
    }

    // Mutable pointer to the field.
    pub fn mut_link(&mut self) -> &mut ::protobuf::RepeatedField<Link> {
        &mut self.link
    }

    // Take field
    pub fn take_link(&mut self) -> ::protobuf::RepeatedField<Link> {
        ::std::mem::replace(&mut self.link, ::protobuf::RepeatedField::new())
    }

    // repeated .kythe.proto.common.MarkedSource.Kind exclude_on_include = 12;


    pub fn get_exclude_on_include(&self) -> &[MarkedSource_Kind] {
        &self.exclude_on_include
    }
    pub fn clear_exclude_on_include(&mut self) {
        self.exclude_on_include.clear();
    }

    // Param is passed by value, moved
    pub fn set_exclude_on_include(&mut self, v: ::std::vec::Vec<MarkedSource_Kind>) {
        self.exclude_on_include = v;
    }

    // Mutable pointer to the field.
    pub fn mut_exclude_on_include(&mut self) -> &mut ::std::vec::Vec<MarkedSource_Kind> {
        &mut self.exclude_on_include
    }

    // Take field
    pub fn take_exclude_on_include(&mut self) -> ::std::vec::Vec<MarkedSource_Kind> {
        ::std::mem::replace(&mut self.exclude_on_include, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MarkedSource {
    fn is_initialized(&self) -> bool {
        for v in &self.child {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.link {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.kind, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pre_text)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.child)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.post_child_text)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.post_text)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.lookup_index = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.default_children_count = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.add_final_list_token = tmp;
                },
                11 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.link)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.exclude_on_include, 12, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.kind != MarkedSource_Kind::BOX {
            my_size += ::protobuf::rt::enum_size(1, self.kind);
        }
        if !self.pre_text.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pre_text);
        }
        for value in &self.child {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.post_child_text.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.post_child_text);
        }
        if !self.post_text.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.post_text);
        }
        if self.lookup_index != 0 {
            my_size += ::protobuf::rt::value_size(6, self.lookup_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.default_children_count != 0 {
            my_size += ::protobuf::rt::value_size(7, self.default_children_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.add_final_list_token != false {
            my_size += 2;
        }
        for value in &self.link {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.exclude_on_include {
            my_size += ::protobuf::rt::enum_size(12, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.kind != MarkedSource_Kind::BOX {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.kind))?;
        }
        if !self.pre_text.is_empty() {
            os.write_string(2, &self.pre_text)?;
        }
        for v in &self.child {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.post_child_text.is_empty() {
            os.write_string(4, &self.post_child_text)?;
        }
        if !self.post_text.is_empty() {
            os.write_string(5, &self.post_text)?;
        }
        if self.lookup_index != 0 {
            os.write_uint32(6, self.lookup_index)?;
        }
        if self.default_children_count != 0 {
            os.write_uint32(7, self.default_children_count)?;
        }
        if self.add_final_list_token != false {
            os.write_bool(10, self.add_final_list_token)?;
        }
        for v in &self.link {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.exclude_on_include {
            os.write_enum(12, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MarkedSource {
        MarkedSource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MarkedSource_Kind>>(
                "kind",
                |m: &MarkedSource| { &m.kind },
                |m: &mut MarkedSource| { &mut m.kind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pre_text",
                |m: &MarkedSource| { &m.pre_text },
                |m: &mut MarkedSource| { &mut m.pre_text },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MarkedSource>>(
                "child",
                |m: &MarkedSource| { &m.child },
                |m: &mut MarkedSource| { &mut m.child },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "post_child_text",
                |m: &MarkedSource| { &m.post_child_text },
                |m: &mut MarkedSource| { &mut m.post_child_text },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "post_text",
                |m: &MarkedSource| { &m.post_text },
                |m: &mut MarkedSource| { &mut m.post_text },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "lookup_index",
                |m: &MarkedSource| { &m.lookup_index },
                |m: &mut MarkedSource| { &mut m.lookup_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "default_children_count",
                |m: &MarkedSource| { &m.default_children_count },
                |m: &mut MarkedSource| { &mut m.default_children_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "add_final_list_token",
                |m: &MarkedSource| { &m.add_final_list_token },
                |m: &mut MarkedSource| { &mut m.add_final_list_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Link>>(
                "link",
                |m: &MarkedSource| { &m.link },
                |m: &mut MarkedSource| { &mut m.link },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MarkedSource_Kind>>(
                "exclude_on_include",
                |m: &MarkedSource| { &m.exclude_on_include },
                |m: &mut MarkedSource| { &mut m.exclude_on_include },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MarkedSource>(
                "MarkedSource",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MarkedSource {
        static instance: ::protobuf::rt::LazyV2<MarkedSource> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MarkedSource::new)
    }
}

impl ::protobuf::Clear for MarkedSource {
    fn clear(&mut self) {
        self.kind = MarkedSource_Kind::BOX;
        self.pre_text.clear();
        self.child.clear();
        self.post_child_text.clear();
        self.post_text.clear();
        self.lookup_index = 0;
        self.default_children_count = 0;
        self.add_final_list_token = false;
        self.link.clear();
        self.exclude_on_include.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MarkedSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MarkedSource {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MarkedSource_Kind {
    BOX = 0,
    TYPE = 1,
    PARAMETER = 2,
    IDENTIFIER = 3,
    CONTEXT = 4,
    INITIALIZER = 5,
    MODIFIER = 12,
    PARAMETER_LOOKUP_BY_PARAM = 6,
    LOOKUP_BY_PARAM = 7,
    PARAMETER_LOOKUP_BY_PARAM_WITH_DEFAULTS = 8,
    LOOKUP_BY_TYPED = 9,
    PARAMETER_LOOKUP_BY_TPARAM = 10,
    LOOKUP_BY_TPARAM = 11,
}

impl ::protobuf::ProtobufEnum for MarkedSource_Kind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MarkedSource_Kind> {
        match value {
            0 => ::std::option::Option::Some(MarkedSource_Kind::BOX),
            1 => ::std::option::Option::Some(MarkedSource_Kind::TYPE),
            2 => ::std::option::Option::Some(MarkedSource_Kind::PARAMETER),
            3 => ::std::option::Option::Some(MarkedSource_Kind::IDENTIFIER),
            4 => ::std::option::Option::Some(MarkedSource_Kind::CONTEXT),
            5 => ::std::option::Option::Some(MarkedSource_Kind::INITIALIZER),
            12 => ::std::option::Option::Some(MarkedSource_Kind::MODIFIER),
            6 => ::std::option::Option::Some(MarkedSource_Kind::PARAMETER_LOOKUP_BY_PARAM),
            7 => ::std::option::Option::Some(MarkedSource_Kind::LOOKUP_BY_PARAM),
            8 => ::std::option::Option::Some(MarkedSource_Kind::PARAMETER_LOOKUP_BY_PARAM_WITH_DEFAULTS),
            9 => ::std::option::Option::Some(MarkedSource_Kind::LOOKUP_BY_TYPED),
            10 => ::std::option::Option::Some(MarkedSource_Kind::PARAMETER_LOOKUP_BY_TPARAM),
            11 => ::std::option::Option::Some(MarkedSource_Kind::LOOKUP_BY_TPARAM),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MarkedSource_Kind] = &[
            MarkedSource_Kind::BOX,
            MarkedSource_Kind::TYPE,
            MarkedSource_Kind::PARAMETER,
            MarkedSource_Kind::IDENTIFIER,
            MarkedSource_Kind::CONTEXT,
            MarkedSource_Kind::INITIALIZER,
            MarkedSource_Kind::MODIFIER,
            MarkedSource_Kind::PARAMETER_LOOKUP_BY_PARAM,
            MarkedSource_Kind::LOOKUP_BY_PARAM,
            MarkedSource_Kind::PARAMETER_LOOKUP_BY_PARAM_WITH_DEFAULTS,
            MarkedSource_Kind::LOOKUP_BY_TYPED,
            MarkedSource_Kind::PARAMETER_LOOKUP_BY_TPARAM,
            MarkedSource_Kind::LOOKUP_BY_TPARAM,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MarkedSource_Kind>("MarkedSource.Kind", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MarkedSource_Kind {
}

impl ::std::default::Default for MarkedSource_Kind {
    fn default() -> Self {
        MarkedSource_Kind::BOX
    }
}

impl ::protobuf::reflect::ProtobufValue for MarkedSource_Kind {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SymbolInfo {
    // message fields
    pub base_name: ::std::string::String,
    pub qualified_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SymbolInfo {
    fn default() -> &'a SymbolInfo {
        <SymbolInfo as ::protobuf::Message>::default_instance()
    }
}

impl SymbolInfo {
    pub fn new() -> SymbolInfo {
        ::std::default::Default::default()
    }

    // string base_name = 1;


    pub fn get_base_name(&self) -> &str {
        &self.base_name
    }
    pub fn clear_base_name(&mut self) {
        self.base_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_name(&mut self, v: ::std::string::String) {
        self.base_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_name(&mut self) -> &mut ::std::string::String {
        &mut self.base_name
    }

    // Take field
    pub fn take_base_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_name, ::std::string::String::new())
    }

    // string qualified_name = 2;


    pub fn get_qualified_name(&self) -> &str {
        &self.qualified_name
    }
    pub fn clear_qualified_name(&mut self) {
        self.qualified_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_qualified_name(&mut self, v: ::std::string::String) {
        self.qualified_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_qualified_name(&mut self) -> &mut ::std::string::String {
        &mut self.qualified_name
    }

    // Take field
    pub fn take_qualified_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.qualified_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SymbolInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.qualified_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.base_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.base_name);
        }
        if !self.qualified_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.qualified_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.base_name.is_empty() {
            os.write_string(1, &self.base_name)?;
        }
        if !self.qualified_name.is_empty() {
            os.write_string(2, &self.qualified_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SymbolInfo {
        SymbolInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "base_name",
                |m: &SymbolInfo| { &m.base_name },
                |m: &mut SymbolInfo| { &mut m.base_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "qualified_name",
                |m: &SymbolInfo| { &m.qualified_name },
                |m: &mut SymbolInfo| { &mut m.qualified_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SymbolInfo>(
                "SymbolInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SymbolInfo {
        static instance: ::protobuf::rt::LazyV2<SymbolInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SymbolInfo::new)
    }
}

impl ::protobuf::Clear for SymbolInfo {
    fn clear(&mut self) {
        self.base_name.clear();
        self.qualified_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SymbolInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SymbolInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Origin {
    // message fields
    pub corpus: ::std::string::String,
    pub revision: ::std::string::String,
    pub commit_timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub language: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Origin {
    fn default() -> &'a Origin {
        <Origin as ::protobuf::Message>::default_instance()
    }
}

impl Origin {
    pub fn new() -> Origin {
        ::std::default::Default::default()
    }

    // string corpus = 1;


    pub fn get_corpus(&self) -> &str {
        &self.corpus
    }
    pub fn clear_corpus(&mut self) {
        self.corpus.clear();
    }

    // Param is passed by value, moved
    pub fn set_corpus(&mut self, v: ::std::string::String) {
        self.corpus = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_corpus(&mut self) -> &mut ::std::string::String {
        &mut self.corpus
    }

    // Take field
    pub fn take_corpus(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.corpus, ::std::string::String::new())
    }

    // string revision = 2;


    pub fn get_revision(&self) -> &str {
        &self.revision
    }
    pub fn clear_revision(&mut self) {
        self.revision.clear();
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: ::std::string::String) {
        self.revision = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_revision(&mut self) -> &mut ::std::string::String {
        &mut self.revision
    }

    // Take field
    pub fn take_revision(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.revision, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp commit_timestamp = 3;


    pub fn get_commit_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.commit_timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_commit_timestamp(&mut self) {
        self.commit_timestamp.clear();
    }

    pub fn has_commit_timestamp(&self) -> bool {
        self.commit_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commit_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.commit_timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commit_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.commit_timestamp.is_none() {
            self.commit_timestamp.set_default();
        }
        self.commit_timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_commit_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.commit_timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // repeated string language = 4;


    pub fn get_language(&self) -> &[::std::string::String] {
        &self.language
    }
    pub fn clear_language(&mut self) {
        self.language.clear();
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.language = v;
    }

    // Mutable pointer to the field.
    pub fn mut_language(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.language
    }

    // Take field
    pub fn take_language(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.language, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Origin {
    fn is_initialized(&self) -> bool {
        for v in &self.commit_timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.corpus)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.revision)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.commit_timestamp)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.language)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.corpus.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.corpus);
        }
        if !self.revision.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.revision);
        }
        if let Some(ref v) = self.commit_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.language {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.corpus.is_empty() {
            os.write_string(1, &self.corpus)?;
        }
        if !self.revision.is_empty() {
            os.write_string(2, &self.revision)?;
        }
        if let Some(ref v) = self.commit_timestamp.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.language {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Origin {
        Origin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "corpus",
                |m: &Origin| { &m.corpus },
                |m: &mut Origin| { &mut m.corpus },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "revision",
                |m: &Origin| { &m.revision },
                |m: &mut Origin| { &mut m.revision },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "commit_timestamp",
                |m: &Origin| { &m.commit_timestamp },
                |m: &mut Origin| { &mut m.commit_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "language",
                |m: &Origin| { &m.language },
                |m: &mut Origin| { &mut m.language },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Origin>(
                "Origin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Origin {
        static instance: ::protobuf::rt::LazyV2<Origin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Origin::new)
    }
}

impl ::protobuf::Clear for Origin {
    fn clear(&mut self) {
        self.corpus.clear();
        self.revision.clear();
        self.commit_timestamp.clear();
        self.language.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Origin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Origin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Language {
    // message fields
    pub name: ::std::string::String,
    pub support: Language_Support,
    pub analyzer_version: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Language {
    fn default() -> &'a Language {
        <Language as ::protobuf::Message>::default_instance()
    }
}

impl Language {
    pub fn new() -> Language {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .kythe.proto.common.Language.Support support = 2;


    pub fn get_support(&self) -> Language_Support {
        self.support
    }
    pub fn clear_support(&mut self) {
        self.support = Language_Support::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_support(&mut self, v: Language_Support) {
        self.support = v;
    }

    // repeated string analyzer_version = 3;


    pub fn get_analyzer_version(&self) -> &[::std::string::String] {
        &self.analyzer_version
    }
    pub fn clear_analyzer_version(&mut self) {
        self.analyzer_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_analyzer_version(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.analyzer_version = v;
    }

    // Mutable pointer to the field.
    pub fn mut_analyzer_version(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.analyzer_version
    }

    // Take field
    pub fn take_analyzer_version(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.analyzer_version, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Language {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.support, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.analyzer_version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.support != Language_Support::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.support);
        }
        for value in &self.analyzer_version {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.support != Language_Support::UNKNOWN {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.support))?;
        }
        for v in &self.analyzer_version {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Language {
        Language::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Language| { &m.name },
                |m: &mut Language| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Language_Support>>(
                "support",
                |m: &Language| { &m.support },
                |m: &mut Language| { &mut m.support },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "analyzer_version",
                |m: &Language| { &m.analyzer_version },
                |m: &mut Language| { &mut m.analyzer_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Language>(
                "Language",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Language {
        static instance: ::protobuf::rt::LazyV2<Language> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Language::new)
    }
}

impl ::protobuf::Clear for Language {
    fn clear(&mut self) {
        self.name.clear();
        self.support = Language_Support::UNKNOWN;
        self.analyzer_version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Language {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Language {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Language_Support {
    UNKNOWN = 0,
    EXPERIMENTAL = 1,
    SUPPORTED = 2,
}

impl ::protobuf::ProtobufEnum for Language_Support {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Language_Support> {
        match value {
            0 => ::std::option::Option::Some(Language_Support::UNKNOWN),
            1 => ::std::option::Option::Some(Language_Support::EXPERIMENTAL),
            2 => ::std::option::Option::Some(Language_Support::SUPPORTED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Language_Support] = &[
            Language_Support::UNKNOWN,
            Language_Support::EXPERIMENTAL,
            Language_Support::SUPPORTED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Language_Support>("Language.Support", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Language_Support {
}

impl ::std::default::Default for Language_Support {
    fn default() -> Self {
        Language_Support::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Language_Support {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Hash {
    // message fields
    pub field_type: Hash_HashType,
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Hash {
    fn default() -> &'a Hash {
        <Hash as ::protobuf::Message>::default_instance()
    }
}

impl Hash {
    pub fn new() -> Hash {
        ::std::default::Default::default()
    }

    // .kythe.proto.common.Hash.HashType type = 1;


    pub fn get_field_type(&self) -> Hash_HashType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Hash_HashType::NONE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Hash_HashType) {
        self.field_type = v;
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Hash {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != Hash_HashType::NONE {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != Hash_HashType::NONE {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Hash {
        Hash::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Hash_HashType>>(
                "type",
                |m: &Hash| { &m.field_type },
                |m: &mut Hash| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &Hash| { &m.value },
                |m: &mut Hash| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Hash>(
                "Hash",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Hash {
        static instance: ::protobuf::rt::LazyV2<Hash> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Hash::new)
    }
}

impl ::protobuf::Clear for Hash {
    fn clear(&mut self) {
        self.field_type = Hash_HashType::NONE;
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Hash {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Hash {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Hash_HashType {
    NONE = 0,
    SHA256 = 1,
    SHA1 = 2,
}

impl ::protobuf::ProtobufEnum for Hash_HashType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Hash_HashType> {
        match value {
            0 => ::std::option::Option::Some(Hash_HashType::NONE),
            1 => ::std::option::Option::Some(Hash_HashType::SHA256),
            2 => ::std::option::Option::Some(Hash_HashType::SHA1),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Hash_HashType] = &[
            Hash_HashType::NONE,
            Hash_HashType::SHA256,
            Hash_HashType::SHA1,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Hash_HashType>("Hash.HashType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Hash_HashType {
}

impl ::std::default::Default for Hash_HashType {
    fn default() -> Self {
        Hash_HashType::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for Hash_HashType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18kythe/proto/common.proto\x12\x12kythe.proto.common\x1a\x1fgoogle/p\
    rotobuf/timestamp.proto\"0\n\x04Fact\x12\x12\n\x04name\x18\x01\x20\x01(\
    \tR\x04name\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05value\"n\n\x05Po\
    int\x12\x1f\n\x0bbyte_offset\x18\x01\x20\x01(\x05R\nbyteOffset\x12\x1f\n\
    \x0bline_number\x18\x02\x20\x01(\x05R\nlineNumber\x12#\n\rcolumn_offset\
    \x18\x03\x20\x01(\x05R\x0ccolumnOffset\"d\n\x04Span\x12/\n\x05start\x18\
    \x01\x20\x01(\x0b2\x19.kythe.proto.common.PointR\x05start\x12+\n\x03end\
    \x18\x02\x20\x01(\x0b2\x19.kythe.proto.common.PointR\x03end\"\xb1\x01\n\
    \x08NodeInfo\x12=\n\x05facts\x18\x02\x20\x03(\x0b2'.kythe.proto.common.N\
    odeInfo.FactsEntryR\x05facts\x12\x1e\n\ndefinition\x18\x05\x20\x01(\tR\n\
    definition\x1a8\n\nFactsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03ke\
    y\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05value:\x028\x01J\x04\x08\
    \x01\x10\x02R\x06ticket\"\x8f\x01\n\nDiagnostic\x12,\n\x04span\x18\x01\
    \x20\x01(\x0b2\x18.kythe.proto.common.SpanR\x04span\x12\x18\n\x07message\
    \x18\x02\x20\x01(\tR\x07message\x12\x18\n\x07details\x18\x03\x20\x01(\tR\
    \x07details\x12\x1f\n\x0bcontext_url\x18\x04\x20\x01(\tR\ncontextUrl\"\
    \x95\x01\n\x12ResolvedDiagnostic\x12?\n\x0bcorpus_path\x18\x01\x20\x01(\
    \x0b2\x1e.kythe.proto.common.CorpusPathR\ncorpusPath\x12>\n\ndiagnostic\
    \x18\x02\x20\x01(\x0b2\x1e.kythe.proto.common.DiagnosticR\ndiagnostic\"L\
    \n\nCorpusPath\x12\x16\n\x06corpus\x18\x01\x20\x01(\tR\x06corpus\x12\x12\
    \n\x04root\x18\x02\x20\x01(\tR\x04root\x12\x12\n\x04path\x18\x03\x20\x01\
    (\tR\x04path\"2\n\x04Link\x12\x1e\n\ndefinition\x18\x03\x20\x03(\tR\ndef\
    initionJ\x04\x08\x01\x10\x02J\x04\x08\x02\x10\x03\"\x81\x06\n\x0cMarkedS\
    ource\x129\n\x04kind\x18\x01\x20\x01(\x0e2%.kythe.proto.common.MarkedSou\
    rce.KindR\x04kind\x12\x19\n\x08pre_text\x18\x02\x20\x01(\tR\x07preText\
    \x126\n\x05child\x18\x03\x20\x03(\x0b2\x20.kythe.proto.common.MarkedSour\
    ceR\x05child\x12&\n\x0fpost_child_text\x18\x04\x20\x01(\tR\rpostChildTex\
    t\x12\x1b\n\tpost_text\x18\x05\x20\x01(\tR\x08postText\x12!\n\x0clookup_\
    index\x18\x06\x20\x01(\rR\x0blookupIndex\x124\n\x16default_children_coun\
    t\x18\x07\x20\x01(\rR\x14defaultChildrenCount\x12/\n\x14add_final_list_t\
    oken\x18\n\x20\x01(\x08R\x11addFinalListToken\x12,\n\x04link\x18\x0b\x20\
    \x03(\x0b2\x18.kythe.proto.common.LinkR\x04link\x12S\n\x12exclude_on_inc\
    lude\x18\x0c\x20\x03(\x0e2%.kythe.proto.common.MarkedSource.KindR\x10exc\
    ludeOnInclude\"\x90\x02\n\x04Kind\x12\x07\n\x03BOX\x10\0\x12\x08\n\x04TY\
    PE\x10\x01\x12\r\n\tPARAMETER\x10\x02\x12\x0e\n\nIDENTIFIER\x10\x03\x12\
    \x0b\n\x07CONTEXT\x10\x04\x12\x0f\n\x0bINITIALIZER\x10\x05\x12\x0c\n\x08\
    MODIFIER\x10\x0c\x12\x1d\n\x19PARAMETER_LOOKUP_BY_PARAM\x10\x06\x12\x13\
    \n\x0fLOOKUP_BY_PARAM\x10\x07\x12+\n'PARAMETER_LOOKUP_BY_PARAM_WITH_DEFA\
    ULTS\x10\x08\x12\x13\n\x0fLOOKUP_BY_TYPED\x10\t\x12\x1e\n\x1aPARAMETER_L\
    OOKUP_BY_TPARAM\x10\n\x12\x14\n\x10LOOKUP_BY_TPARAM\x10\x0b\"P\n\nSymbol\
    Info\x12\x1b\n\tbase_name\x18\x01\x20\x01(\tR\x08baseName\x12%\n\x0equal\
    ified_name\x18\x02\x20\x01(\tR\rqualifiedName\"\x9f\x01\n\x06Origin\x12\
    \x16\n\x06corpus\x18\x01\x20\x01(\tR\x06corpus\x12\x1a\n\x08revision\x18\
    \x02\x20\x01(\tR\x08revision\x12E\n\x10commit_timestamp\x18\x03\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\x0fcommitTimestamp\x12\x1a\n\x08lan\
    guage\x18\x04\x20\x03(\tR\x08language\"\xc2\x01\n\x08Language\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12>\n\x07support\x18\x02\x20\x01(\
    \x0e2$.kythe.proto.common.Language.SupportR\x07support\x12)\n\x10analyze\
    r_version\x18\x03\x20\x03(\tR\x0fanalyzerVersion\"7\n\x07Support\x12\x0b\
    \n\x07UNKNOWN\x10\0\x12\x10\n\x0cEXPERIMENTAL\x10\x01\x12\r\n\tSUPPORTED\
    \x10\x02\"\x7f\n\x04Hash\x125\n\x04type\x18\x01\x20\x01(\x0e2!.kythe.pro\
    to.common.Hash.HashTypeR\x04type\x12\x14\n\x05value\x18\x02\x20\x01(\x0c\
    R\x05value\"*\n\x08HashType\x12\x08\n\x04NONE\x10\0\x12\n\n\x06SHA256\
    \x10\x01\x12\x08\n\x04SHA1\x10\x02BI\n\x1fcom.google.devtools.kythe.prot\
    oP\x01Z$kythe.io/kythe/proto/common_go_protob\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
