// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: kythe/proto/graph.proto

package graph_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common_go_proto "kythe.io/kythe/proto/common_go_proto"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket []string `protobuf:"bytes,1,rep,name=ticket,proto3" json:"ticket,omitempty"`
	Filter []string `protobuf:"bytes,2,rep,name=filter,proto3" json:"filter,omitempty"`
}

func (x *NodesRequest) Reset() {
	*x = NodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_graph_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodesRequest) ProtoMessage() {}

func (x *NodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_graph_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodesRequest.ProtoReflect.Descriptor instead.
func (*NodesRequest) Descriptor() ([]byte, []int) {
	return file_kythe_proto_graph_proto_rawDescGZIP(), []int{0}
}

func (x *NodesRequest) GetTicket() []string {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *NodesRequest) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

type NodesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes map[string]*common_go_proto.NodeInfo `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NodesReply) Reset() {
	*x = NodesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_graph_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodesReply) ProtoMessage() {}

func (x *NodesReply) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_graph_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodesReply.ProtoReflect.Descriptor instead.
func (*NodesReply) Descriptor() ([]byte, []int) {
	return file_kythe_proto_graph_proto_rawDescGZIP(), []int{1}
}

func (x *NodesReply) GetNodes() map[string]*common_go_proto.NodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type EdgesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket    []string `protobuf:"bytes,1,rep,name=ticket,proto3" json:"ticket,omitempty"`
	Kind      []string `protobuf:"bytes,2,rep,name=kind,proto3" json:"kind,omitempty"`
	Filter    []string `protobuf:"bytes,3,rep,name=filter,proto3" json:"filter,omitempty"`
	PageSize  int32    `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string   `protobuf:"bytes,9,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *EdgesRequest) Reset() {
	*x = EdgesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_graph_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgesRequest) ProtoMessage() {}

func (x *EdgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_graph_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgesRequest.ProtoReflect.Descriptor instead.
func (*EdgesRequest) Descriptor() ([]byte, []int) {
	return file_kythe_proto_graph_proto_rawDescGZIP(), []int{2}
}

func (x *EdgesRequest) GetTicket() []string {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *EdgesRequest) GetKind() []string {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *EdgesRequest) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *EdgesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *EdgesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type EdgeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups map[string]*EdgeSet_Group `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EdgeSet) Reset() {
	*x = EdgeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_graph_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeSet) ProtoMessage() {}

func (x *EdgeSet) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_graph_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeSet.ProtoReflect.Descriptor instead.
func (*EdgeSet) Descriptor() ([]byte, []int) {
	return file_kythe_proto_graph_proto_rawDescGZIP(), []int{3}
}

func (x *EdgeSet) GetGroups() map[string]*EdgeSet_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type EdgesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EdgeSets         map[string]*EdgeSet                  `protobuf:"bytes,1,rep,name=edge_sets,json=edgeSets,proto3" json:"edge_sets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Nodes            map[string]*common_go_proto.NodeInfo `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalEdgesByKind map[string]int64                     `protobuf:"bytes,5,rep,name=total_edges_by_kind,json=totalEdgesByKind,proto3" json:"total_edges_by_kind,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NextPageToken    string                               `protobuf:"bytes,9,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *EdgesReply) Reset() {
	*x = EdgesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_graph_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgesReply) ProtoMessage() {}

func (x *EdgesReply) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_graph_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgesReply.ProtoReflect.Descriptor instead.
func (*EdgesReply) Descriptor() ([]byte, []int) {
	return file_kythe_proto_graph_proto_rawDescGZIP(), []int{4}
}

func (x *EdgesReply) GetEdgeSets() map[string]*EdgeSet {
	if x != nil {
		return x.EdgeSets
	}
	return nil
}

func (x *EdgesReply) GetNodes() map[string]*common_go_proto.NodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *EdgesReply) GetTotalEdgesByKind() map[string]int64 {
	if x != nil {
		return x.TotalEdgesByKind
	}
	return nil
}

func (x *EdgesReply) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type EdgeSet_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Edge []*EdgeSet_Group_Edge `protobuf:"bytes,2,rep,name=edge,proto3" json:"edge,omitempty"`
}

func (x *EdgeSet_Group) Reset() {
	*x = EdgeSet_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_graph_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeSet_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeSet_Group) ProtoMessage() {}

func (x *EdgeSet_Group) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_graph_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeSet_Group.ProtoReflect.Descriptor instead.
func (*EdgeSet_Group) Descriptor() ([]byte, []int) {
	return file_kythe_proto_graph_proto_rawDescGZIP(), []int{3, 0}
}

func (x *EdgeSet_Group) GetEdge() []*EdgeSet_Group_Edge {
	if x != nil {
		return x.Edge
	}
	return nil
}

type EdgeSet_Group_Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetTicket string `protobuf:"bytes,1,opt,name=target_ticket,json=targetTicket,proto3" json:"target_ticket,omitempty"`
	Ordinal      int32  `protobuf:"varint,2,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
}

func (x *EdgeSet_Group_Edge) Reset() {
	*x = EdgeSet_Group_Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_graph_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeSet_Group_Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeSet_Group_Edge) ProtoMessage() {}

func (x *EdgeSet_Group_Edge) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_graph_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeSet_Group_Edge.ProtoReflect.Descriptor instead.
func (*EdgeSet_Group_Edge) Descriptor() ([]byte, []int) {
	return file_kythe_proto_graph_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *EdgeSet_Group_Edge) GetTargetTicket() string {
	if x != nil {
		return x.TargetTicket
	}
	return ""
}

func (x *EdgeSet_Group_Edge) GetOrdinal() int32 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

var File_kythe_proto_graph_proto protoreflect.FileDescriptor

var file_kythe_proto_graph_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6b, 0x79, 0x74, 0x68, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3e, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x38, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x0a, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x45, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0xc1, 0x02, 0x0a, 0x07, 0x45, 0x64, 0x67, 0x65, 0x53, 0x65, 0x74, 0x12, 0x38,
	0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x64, 0x67,
	0x65, 0x53, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x8f, 0x01, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x64, 0x67,
	0x65, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65, 0x1a, 0x45, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x55, 0x0a, 0x0b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x79, 0x74,
	0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x80, 0x04, 0x0a, 0x0a, 0x45, 0x64, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x09, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x65, 0x64, 0x67, 0x65, 0x53, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x64, 0x67, 0x65, 0x73, 0x42, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x64, 0x67, 0x65, 0x73, 0x42, 0x79, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x51, 0x0a, 0x0d, 0x45, 0x64, 0x67,
	0x65, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x79,
	0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0a,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x79,
	0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x64, 0x67,
	0x65, 0x73, 0x42, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x8c, 0x01, 0x0a, 0x0c, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x05, 0x45, 0x64, 0x67,
	0x65, 0x73, 0x12, 0x19, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x31, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x0e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_kythe_proto_graph_proto_rawDescOnce sync.Once
	file_kythe_proto_graph_proto_rawDescData = file_kythe_proto_graph_proto_rawDesc
)

func file_kythe_proto_graph_proto_rawDescGZIP() []byte {
	file_kythe_proto_graph_proto_rawDescOnce.Do(func() {
		file_kythe_proto_graph_proto_rawDescData = protoimpl.X.CompressGZIP(file_kythe_proto_graph_proto_rawDescData)
	})
	return file_kythe_proto_graph_proto_rawDescData
}

var file_kythe_proto_graph_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_kythe_proto_graph_proto_goTypes = []interface{}{
	(*NodesRequest)(nil),             // 0: kythe.proto.NodesRequest
	(*NodesReply)(nil),               // 1: kythe.proto.NodesReply
	(*EdgesRequest)(nil),             // 2: kythe.proto.EdgesRequest
	(*EdgeSet)(nil),                  // 3: kythe.proto.EdgeSet
	(*EdgesReply)(nil),               // 4: kythe.proto.EdgesReply
	nil,                              // 5: kythe.proto.NodesReply.NodesEntry
	(*EdgeSet_Group)(nil),            // 6: kythe.proto.EdgeSet.Group
	nil,                              // 7: kythe.proto.EdgeSet.GroupsEntry
	(*EdgeSet_Group_Edge)(nil),       // 8: kythe.proto.EdgeSet.Group.Edge
	nil,                              // 9: kythe.proto.EdgesReply.EdgeSetsEntry
	nil,                              // 10: kythe.proto.EdgesReply.NodesEntry
	nil,                              // 11: kythe.proto.EdgesReply.TotalEdgesByKindEntry
	(*common_go_proto.NodeInfo)(nil), // 12: kythe.proto.common.NodeInfo
}
var file_kythe_proto_graph_proto_depIdxs = []int32{
	5,  // 0: kythe.proto.NodesReply.nodes:type_name -> kythe.proto.NodesReply.NodesEntry
	7,  // 1: kythe.proto.EdgeSet.groups:type_name -> kythe.proto.EdgeSet.GroupsEntry
	9,  // 2: kythe.proto.EdgesReply.edge_sets:type_name -> kythe.proto.EdgesReply.EdgeSetsEntry
	10, // 3: kythe.proto.EdgesReply.nodes:type_name -> kythe.proto.EdgesReply.NodesEntry
	11, // 4: kythe.proto.EdgesReply.total_edges_by_kind:type_name -> kythe.proto.EdgesReply.TotalEdgesByKindEntry
	12, // 5: kythe.proto.NodesReply.NodesEntry.value:type_name -> kythe.proto.common.NodeInfo
	8,  // 6: kythe.proto.EdgeSet.Group.edge:type_name -> kythe.proto.EdgeSet.Group.Edge
	6,  // 7: kythe.proto.EdgeSet.GroupsEntry.value:type_name -> kythe.proto.EdgeSet.Group
	3,  // 8: kythe.proto.EdgesReply.EdgeSetsEntry.value:type_name -> kythe.proto.EdgeSet
	12, // 9: kythe.proto.EdgesReply.NodesEntry.value:type_name -> kythe.proto.common.NodeInfo
	0,  // 10: kythe.proto.GraphService.Nodes:input_type -> kythe.proto.NodesRequest
	2,  // 11: kythe.proto.GraphService.Edges:input_type -> kythe.proto.EdgesRequest
	1,  // 12: kythe.proto.GraphService.Nodes:output_type -> kythe.proto.NodesReply
	4,  // 13: kythe.proto.GraphService.Edges:output_type -> kythe.proto.EdgesReply
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_kythe_proto_graph_proto_init() }
func file_kythe_proto_graph_proto_init() {
	if File_kythe_proto_graph_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kythe_proto_graph_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_graph_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_graph_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_graph_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_graph_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_graph_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeSet_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_graph_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeSet_Group_Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kythe_proto_graph_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kythe_proto_graph_proto_goTypes,
		DependencyIndexes: file_kythe_proto_graph_proto_depIdxs,
		MessageInfos:      file_kythe_proto_graph_proto_msgTypes,
	}.Build()
	File_kythe_proto_graph_proto = out.File
	file_kythe_proto_graph_proto_rawDesc = nil
	file_kythe_proto_graph_proto_goTypes = nil
	file_kythe_proto_graph_proto_depIdxs = nil
}
