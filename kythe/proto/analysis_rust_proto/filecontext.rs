// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `kythe/proto/filecontext.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct ContextDependentVersion {
    // message fields
    pub row: ::protobuf::RepeatedField<ContextDependentVersion_Row>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ContextDependentVersion {
    fn default() -> &'a ContextDependentVersion {
        <ContextDependentVersion as ::protobuf::Message>::default_instance()
    }
}

impl ContextDependentVersion {
    pub fn new() -> ContextDependentVersion {
        ::std::default::Default::default()
    }

    // repeated .kythe.proto.ContextDependentVersion.Row row = 1;


    pub fn get_row(&self) -> &[ContextDependentVersion_Row] {
        &self.row
    }
    pub fn clear_row(&mut self) {
        self.row.clear();
    }

    // Param is passed by value, moved
    pub fn set_row(&mut self, v: ::protobuf::RepeatedField<ContextDependentVersion_Row>) {
        self.row = v;
    }

    // Mutable pointer to the field.
    pub fn mut_row(&mut self) -> &mut ::protobuf::RepeatedField<ContextDependentVersion_Row> {
        &mut self.row
    }

    // Take field
    pub fn take_row(&mut self) -> ::protobuf::RepeatedField<ContextDependentVersion_Row> {
        ::std::mem::replace(&mut self.row, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ContextDependentVersion {
    fn is_initialized(&self) -> bool {
        for v in &self.row {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.row)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.row {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.row {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContextDependentVersion {
        ContextDependentVersion::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ContextDependentVersion_Row>>(
                    "row",
                    |m: &ContextDependentVersion| { &m.row },
                    |m: &mut ContextDependentVersion| { &mut m.row },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ContextDependentVersion>(
                    "ContextDependentVersion",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ContextDependentVersion {
        static mut instance: ::protobuf::lazy::Lazy<ContextDependentVersion> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContextDependentVersion,
        };
        unsafe {
            instance.get(ContextDependentVersion::new)
        }
    }
}

impl ::protobuf::Clear for ContextDependentVersion {
    fn clear(&mut self) {
        self.row.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContextDependentVersion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContextDependentVersion {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContextDependentVersion_Column {
    // message fields
    pub offset: i32,
    pub linked_context: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ContextDependentVersion_Column {
    fn default() -> &'a ContextDependentVersion_Column {
        <ContextDependentVersion_Column as ::protobuf::Message>::default_instance()
    }
}

impl ContextDependentVersion_Column {
    pub fn new() -> ContextDependentVersion_Column {
        ::std::default::Default::default()
    }

    // int32 offset = 1;


    pub fn get_offset(&self) -> i32 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i32) {
        self.offset = v;
    }

    // string linked_context = 2;


    pub fn get_linked_context(&self) -> &str {
        &self.linked_context
    }
    pub fn clear_linked_context(&mut self) {
        self.linked_context.clear();
    }

    // Param is passed by value, moved
    pub fn set_linked_context(&mut self, v: ::std::string::String) {
        self.linked_context = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_linked_context(&mut self) -> &mut ::std::string::String {
        &mut self.linked_context
    }

    // Take field
    pub fn take_linked_context(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.linked_context, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ContextDependentVersion_Column {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.offset = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.linked_context)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(1, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.linked_context.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.linked_context);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.offset != 0 {
            os.write_int32(1, self.offset)?;
        }
        if !self.linked_context.is_empty() {
            os.write_string(2, &self.linked_context)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContextDependentVersion_Column {
        ContextDependentVersion_Column::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "offset",
                    |m: &ContextDependentVersion_Column| { &m.offset },
                    |m: &mut ContextDependentVersion_Column| { &mut m.offset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "linked_context",
                    |m: &ContextDependentVersion_Column| { &m.linked_context },
                    |m: &mut ContextDependentVersion_Column| { &mut m.linked_context },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ContextDependentVersion_Column>(
                    "ContextDependentVersion_Column",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ContextDependentVersion_Column {
        static mut instance: ::protobuf::lazy::Lazy<ContextDependentVersion_Column> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContextDependentVersion_Column,
        };
        unsafe {
            instance.get(ContextDependentVersion_Column::new)
        }
    }
}

impl ::protobuf::Clear for ContextDependentVersion_Column {
    fn clear(&mut self) {
        self.offset = 0;
        self.linked_context.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContextDependentVersion_Column {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContextDependentVersion_Column {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContextDependentVersion_Row {
    // message fields
    pub source_context: ::std::string::String,
    pub column: ::protobuf::RepeatedField<ContextDependentVersion_Column>,
    pub always_process: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ContextDependentVersion_Row {
    fn default() -> &'a ContextDependentVersion_Row {
        <ContextDependentVersion_Row as ::protobuf::Message>::default_instance()
    }
}

impl ContextDependentVersion_Row {
    pub fn new() -> ContextDependentVersion_Row {
        ::std::default::Default::default()
    }

    // string source_context = 1;


    pub fn get_source_context(&self) -> &str {
        &self.source_context
    }
    pub fn clear_source_context(&mut self) {
        self.source_context.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_context(&mut self, v: ::std::string::String) {
        self.source_context = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_context(&mut self) -> &mut ::std::string::String {
        &mut self.source_context
    }

    // Take field
    pub fn take_source_context(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source_context, ::std::string::String::new())
    }

    // repeated .kythe.proto.ContextDependentVersion.Column column = 2;


    pub fn get_column(&self) -> &[ContextDependentVersion_Column] {
        &self.column
    }
    pub fn clear_column(&mut self) {
        self.column.clear();
    }

    // Param is passed by value, moved
    pub fn set_column(&mut self, v: ::protobuf::RepeatedField<ContextDependentVersion_Column>) {
        self.column = v;
    }

    // Mutable pointer to the field.
    pub fn mut_column(&mut self) -> &mut ::protobuf::RepeatedField<ContextDependentVersion_Column> {
        &mut self.column
    }

    // Take field
    pub fn take_column(&mut self) -> ::protobuf::RepeatedField<ContextDependentVersion_Column> {
        ::std::mem::replace(&mut self.column, ::protobuf::RepeatedField::new())
    }

    // bool always_process = 3;


    pub fn get_always_process(&self) -> bool {
        self.always_process
    }
    pub fn clear_always_process(&mut self) {
        self.always_process = false;
    }

    // Param is passed by value, moved
    pub fn set_always_process(&mut self, v: bool) {
        self.always_process = v;
    }
}

impl ::protobuf::Message for ContextDependentVersion_Row {
    fn is_initialized(&self) -> bool {
        for v in &self.column {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source_context)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.column)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.always_process = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.source_context.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.source_context);
        }
        for value in &self.column {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.always_process != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.source_context.is_empty() {
            os.write_string(1, &self.source_context)?;
        }
        for v in &self.column {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.always_process != false {
            os.write_bool(3, self.always_process)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContextDependentVersion_Row {
        ContextDependentVersion_Row::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "source_context",
                    |m: &ContextDependentVersion_Row| { &m.source_context },
                    |m: &mut ContextDependentVersion_Row| { &mut m.source_context },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ContextDependentVersion_Column>>(
                    "column",
                    |m: &ContextDependentVersion_Row| { &m.column },
                    |m: &mut ContextDependentVersion_Row| { &mut m.column },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "always_process",
                    |m: &ContextDependentVersion_Row| { &m.always_process },
                    |m: &mut ContextDependentVersion_Row| { &mut m.always_process },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ContextDependentVersion_Row>(
                    "ContextDependentVersion_Row",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ContextDependentVersion_Row {
        static mut instance: ::protobuf::lazy::Lazy<ContextDependentVersion_Row> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContextDependentVersion_Row,
        };
        unsafe {
            instance.get(ContextDependentVersion_Row::new)
        }
    }
}

impl ::protobuf::Clear for ContextDependentVersion_Row {
    fn clear(&mut self) {
        self.source_context.clear();
        self.column.clear();
        self.always_process = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContextDependentVersion_Row {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContextDependentVersion_Row {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dkythe/proto/filecontext.proto\x12\x0bkythe.proto\"\xb9\x02\n\x17Co\
    ntextDependentVersion\x12:\n\x03row\x18\x01\x20\x03(\x0b2(.kythe.proto.C\
    ontextDependentVersion.RowR\x03row\x1aG\n\x06Column\x12\x16\n\x06offset\
    \x18\x01\x20\x01(\x05R\x06offset\x12%\n\x0elinked_context\x18\x02\x20\
    \x01(\tR\rlinkedContext\x1a\x98\x01\n\x03Row\x12%\n\x0esource_context\
    \x18\x01\x20\x01(\tR\rsourceContext\x12C\n\x06column\x18\x02\x20\x03(\
    \x0b2+.kythe.proto.ContextDependentVersion.ColumnR\x06column\x12%\n\x0ea\
    lways_process\x18\x03\x20\x01(\x08R\ralwaysProcessB7\n\x1fcom.google.dev\
    tools.kythe.protoZ\x14filecontext_go_protob\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
