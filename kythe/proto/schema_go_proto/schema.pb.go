// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: kythe/proto/schema.proto

package schema_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	storage_go_proto "kythe.io/kythe/proto/storage_go_proto"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeKind int32

const (
	NodeKind_UNKNOWN_NODE_KIND NodeKind = 0
	NodeKind_ABS               NodeKind = 1
	NodeKind_ABSVAR            NodeKind = 2
	NodeKind_ANCHOR            NodeKind = 3
	NodeKind_CONSTANT          NodeKind = 4
	NodeKind_DIAGNOSTIC        NodeKind = 5
	NodeKind_DOC               NodeKind = 6
	NodeKind_FILE              NodeKind = 7
	NodeKind_INTERFACE         NodeKind = 8
	NodeKind_FUNCTION          NodeKind = 9
	NodeKind_LOOKUP            NodeKind = 10
	NodeKind_MACRO             NodeKind = 11
	NodeKind_META              NodeKind = 12
	NodeKind_NAME              NodeKind = 13
	NodeKind_PACKAGE           NodeKind = 14
	NodeKind_PROCESS           NodeKind = 15
	NodeKind_RECORD            NodeKind = 16
	NodeKind_SUM               NodeKind = 17
	NodeKind_SYMBOL            NodeKind = 18
	NodeKind_TALIAS            NodeKind = 19
	NodeKind_TAPP              NodeKind = 20
	NodeKind_TBUILTIN          NodeKind = 21
	NodeKind_TNOMINAL          NodeKind = 22
	NodeKind_TSIGMA            NodeKind = 23
	NodeKind_VARIABLE          NodeKind = 24
	NodeKind_VCS               NodeKind = 25
)

// Enum value maps for NodeKind.
var (
	NodeKind_name = map[int32]string{
		0:  "UNKNOWN_NODE_KIND",
		1:  "ABS",
		2:  "ABSVAR",
		3:  "ANCHOR",
		4:  "CONSTANT",
		5:  "DIAGNOSTIC",
		6:  "DOC",
		7:  "FILE",
		8:  "INTERFACE",
		9:  "FUNCTION",
		10: "LOOKUP",
		11: "MACRO",
		12: "META",
		13: "NAME",
		14: "PACKAGE",
		15: "PROCESS",
		16: "RECORD",
		17: "SUM",
		18: "SYMBOL",
		19: "TALIAS",
		20: "TAPP",
		21: "TBUILTIN",
		22: "TNOMINAL",
		23: "TSIGMA",
		24: "VARIABLE",
		25: "VCS",
	}
	NodeKind_value = map[string]int32{
		"UNKNOWN_NODE_KIND": 0,
		"ABS":               1,
		"ABSVAR":            2,
		"ANCHOR":            3,
		"CONSTANT":          4,
		"DIAGNOSTIC":        5,
		"DOC":               6,
		"FILE":              7,
		"INTERFACE":         8,
		"FUNCTION":          9,
		"LOOKUP":            10,
		"MACRO":             11,
		"META":              12,
		"NAME":              13,
		"PACKAGE":           14,
		"PROCESS":           15,
		"RECORD":            16,
		"SUM":               17,
		"SYMBOL":            18,
		"TALIAS":            19,
		"TAPP":              20,
		"TBUILTIN":          21,
		"TNOMINAL":          22,
		"TSIGMA":            23,
		"VARIABLE":          24,
		"VCS":               25,
	}
)

func (x NodeKind) Enum() *NodeKind {
	p := new(NodeKind)
	*p = x
	return p
}

func (x NodeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_schema_proto_enumTypes[0].Descriptor()
}

func (NodeKind) Type() protoreflect.EnumType {
	return &file_kythe_proto_schema_proto_enumTypes[0]
}

func (x NodeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeKind.Descriptor instead.
func (NodeKind) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_schema_proto_rawDescGZIP(), []int{0}
}

type Subkind int32

const (
	Subkind_UNKNOWN_SUBKIND Subkind = 0
	Subkind_CATEGORY        Subkind = 1
	Subkind_CLASS           Subkind = 2
	Subkind_CONSTRUCTOR     Subkind = 3
	Subkind_DESTRUCTOR      Subkind = 4
	Subkind_ENUM            Subkind = 5
	Subkind_ENUM_CLASS      Subkind = 6
	Subkind_FIELD           Subkind = 7
	Subkind_IMPLICIT        Subkind = 8
	Subkind_IMPORT          Subkind = 9
	Subkind_INITIALIZER     Subkind = 10
	Subkind_LOCAL           Subkind = 11
	Subkind_LOCAL_PARAMETER Subkind = 12
	Subkind_METHOD          Subkind = 13
	Subkind_NAMESPACE       Subkind = 14
	Subkind_STRUCT          Subkind = 15
	Subkind_TYPE            Subkind = 16
	Subkind_UNION           Subkind = 17
)

// Enum value maps for Subkind.
var (
	Subkind_name = map[int32]string{
		0:  "UNKNOWN_SUBKIND",
		1:  "CATEGORY",
		2:  "CLASS",
		3:  "CONSTRUCTOR",
		4:  "DESTRUCTOR",
		5:  "ENUM",
		6:  "ENUM_CLASS",
		7:  "FIELD",
		8:  "IMPLICIT",
		9:  "IMPORT",
		10: "INITIALIZER",
		11: "LOCAL",
		12: "LOCAL_PARAMETER",
		13: "METHOD",
		14: "NAMESPACE",
		15: "STRUCT",
		16: "TYPE",
		17: "UNION",
	}
	Subkind_value = map[string]int32{
		"UNKNOWN_SUBKIND": 0,
		"CATEGORY":        1,
		"CLASS":           2,
		"CONSTRUCTOR":     3,
		"DESTRUCTOR":      4,
		"ENUM":            5,
		"ENUM_CLASS":      6,
		"FIELD":           7,
		"IMPLICIT":        8,
		"IMPORT":          9,
		"INITIALIZER":     10,
		"LOCAL":           11,
		"LOCAL_PARAMETER": 12,
		"METHOD":          13,
		"NAMESPACE":       14,
		"STRUCT":          15,
		"TYPE":            16,
		"UNION":           17,
	}
)

func (x Subkind) Enum() *Subkind {
	p := new(Subkind)
	*p = x
	return p
}

func (x Subkind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subkind) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_schema_proto_enumTypes[1].Descriptor()
}

func (Subkind) Type() protoreflect.EnumType {
	return &file_kythe_proto_schema_proto_enumTypes[1]
}

func (x Subkind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subkind.Descriptor instead.
func (Subkind) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_schema_proto_rawDescGZIP(), []int{1}
}

type FactName int32

const (
	FactName_UNKNOWN_FACT_NAME FactName = 0
	FactName_CODE              FactName = 1
	FactName_COMPLETE          FactName = 2
	FactName_CONTEXT_URL       FactName = 3
	FactName_DETAILS           FactName = 4
	FactName_DOC_URI           FactName = 5
	FactName_LABEL             FactName = 6
	FactName_LOC_END           FactName = 7
	FactName_LOC_START         FactName = 8
	FactName_MESSAGE           FactName = 9
	FactName_NODE_KIND         FactName = 10
	FactName_PARAM_DEFAULT     FactName = 11
	FactName_RULE_CLASS        FactName = 12
	FactName_SNIPPET_END       FactName = 13
	FactName_SNIPPET_START     FactName = 14
	FactName_SUBKIND           FactName = 15
	FactName_TEXT              FactName = 16
	FactName_TEXT_ENCODING     FactName = 17
	FactName_VISIBILITY        FactName = 18
	FactName_BUILD_CONFIG      FactName = 19
	FactName_TAG_DEPRECATED    FactName = 20
)

// Enum value maps for FactName.
var (
	FactName_name = map[int32]string{
		0:  "UNKNOWN_FACT_NAME",
		1:  "CODE",
		2:  "COMPLETE",
		3:  "CONTEXT_URL",
		4:  "DETAILS",
		5:  "DOC_URI",
		6:  "LABEL",
		7:  "LOC_END",
		8:  "LOC_START",
		9:  "MESSAGE",
		10: "NODE_KIND",
		11: "PARAM_DEFAULT",
		12: "RULE_CLASS",
		13: "SNIPPET_END",
		14: "SNIPPET_START",
		15: "SUBKIND",
		16: "TEXT",
		17: "TEXT_ENCODING",
		18: "VISIBILITY",
		19: "BUILD_CONFIG",
		20: "TAG_DEPRECATED",
	}
	FactName_value = map[string]int32{
		"UNKNOWN_FACT_NAME": 0,
		"CODE":              1,
		"COMPLETE":          2,
		"CONTEXT_URL":       3,
		"DETAILS":           4,
		"DOC_URI":           5,
		"LABEL":             6,
		"LOC_END":           7,
		"LOC_START":         8,
		"MESSAGE":           9,
		"NODE_KIND":         10,
		"PARAM_DEFAULT":     11,
		"RULE_CLASS":        12,
		"SNIPPET_END":       13,
		"SNIPPET_START":     14,
		"SUBKIND":           15,
		"TEXT":              16,
		"TEXT_ENCODING":     17,
		"VISIBILITY":        18,
		"BUILD_CONFIG":      19,
		"TAG_DEPRECATED":    20,
	}
)

func (x FactName) Enum() *FactName {
	p := new(FactName)
	*p = x
	return p
}

func (x FactName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FactName) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_schema_proto_enumTypes[2].Descriptor()
}

func (FactName) Type() protoreflect.EnumType {
	return &file_kythe_proto_schema_proto_enumTypes[2]
}

func (x FactName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FactName.Descriptor instead.
func (FactName) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_schema_proto_rawDescGZIP(), []int{2}
}

type EdgeKind int32

const (
	EdgeKind_UNKNOWN_EDGE_KIND        EdgeKind = 0
	EdgeKind_ALIASES                  EdgeKind = 1
	EdgeKind_ALIASES_ROOT             EdgeKind = 2
	EdgeKind_ANNOTATED_BY             EdgeKind = 3
	EdgeKind_BOUNDED_LOWER            EdgeKind = 4
	EdgeKind_BOUNDED_UPPER            EdgeKind = 5
	EdgeKind_CHILD_OF                 EdgeKind = 6
	EdgeKind_CHILD_OF_CONTEXT         EdgeKind = 7
	EdgeKind_COMPLETES                EdgeKind = 8
	EdgeKind_COMPLETES_UNIQUELY       EdgeKind = 9
	EdgeKind_DEFINES                  EdgeKind = 10
	EdgeKind_DEFINES_BINDING          EdgeKind = 11
	EdgeKind_DEPENDS                  EdgeKind = 12
	EdgeKind_DOCUMENTS                EdgeKind = 13
	EdgeKind_EXPORTS                  EdgeKind = 14
	EdgeKind_EXTENDS                  EdgeKind = 15
	EdgeKind_GENERATES                EdgeKind = 16
	EdgeKind_IMPUTES                  EdgeKind = 17
	EdgeKind_INSTANTIATES             EdgeKind = 18
	EdgeKind_INSTANTIATES_SPECULATIVE EdgeKind = 19
	EdgeKind_NAMED                    EdgeKind = 20
	EdgeKind_OVERRIDES                EdgeKind = 21
	EdgeKind_OVERRIDES_ROOT           EdgeKind = 22
	EdgeKind_OVERRIDES_TRANSITIVE     EdgeKind = 23
	EdgeKind_PARAM                    EdgeKind = 24
	EdgeKind_PROPERTY_READS           EdgeKind = 44
	EdgeKind_PROPERTY_WRITES          EdgeKind = 45
	EdgeKind_REF                      EdgeKind = 25
	EdgeKind_REF_CALL                 EdgeKind = 26
	EdgeKind_REF_CALL_IMPLICIT        EdgeKind = 27
	EdgeKind_REF_DOC                  EdgeKind = 28
	EdgeKind_REF_EXPANDS              EdgeKind = 29
	EdgeKind_REF_EXPANDS_TRANSITIVE   EdgeKind = 30
	EdgeKind_REF_FILE                 EdgeKind = 31
	EdgeKind_REF_ID                   EdgeKind = 46
	EdgeKind_REF_IMPLICIT             EdgeKind = 32
	EdgeKind_REF_IMPORTS              EdgeKind = 33
	EdgeKind_REF_INCLUDES             EdgeKind = 34
	EdgeKind_REF_INIT                 EdgeKind = 35
	EdgeKind_REF_INIT_IMPLICIT        EdgeKind = 36
	EdgeKind_REF_QUERIES              EdgeKind = 37
	EdgeKind_REF_WRITES               EdgeKind = 47
	EdgeKind_SATISFIES                EdgeKind = 38
	EdgeKind_SPECIALIZES              EdgeKind = 39
	EdgeKind_SPECIALIZES_SPECULATIVE  EdgeKind = 40
	EdgeKind_TAGGED                   EdgeKind = 41
	EdgeKind_TYPED                    EdgeKind = 42
	EdgeKind_UNDEFINES                EdgeKind = 43
)

// Enum value maps for EdgeKind.
var (
	EdgeKind_name = map[int32]string{
		0:  "UNKNOWN_EDGE_KIND",
		1:  "ALIASES",
		2:  "ALIASES_ROOT",
		3:  "ANNOTATED_BY",
		4:  "BOUNDED_LOWER",
		5:  "BOUNDED_UPPER",
		6:  "CHILD_OF",
		7:  "CHILD_OF_CONTEXT",
		8:  "COMPLETES",
		9:  "COMPLETES_UNIQUELY",
		10: "DEFINES",
		11: "DEFINES_BINDING",
		12: "DEPENDS",
		13: "DOCUMENTS",
		14: "EXPORTS",
		15: "EXTENDS",
		16: "GENERATES",
		17: "IMPUTES",
		18: "INSTANTIATES",
		19: "INSTANTIATES_SPECULATIVE",
		20: "NAMED",
		21: "OVERRIDES",
		22: "OVERRIDES_ROOT",
		23: "OVERRIDES_TRANSITIVE",
		24: "PARAM",
		44: "PROPERTY_READS",
		45: "PROPERTY_WRITES",
		25: "REF",
		26: "REF_CALL",
		27: "REF_CALL_IMPLICIT",
		28: "REF_DOC",
		29: "REF_EXPANDS",
		30: "REF_EXPANDS_TRANSITIVE",
		31: "REF_FILE",
		46: "REF_ID",
		32: "REF_IMPLICIT",
		33: "REF_IMPORTS",
		34: "REF_INCLUDES",
		35: "REF_INIT",
		36: "REF_INIT_IMPLICIT",
		37: "REF_QUERIES",
		47: "REF_WRITES",
		38: "SATISFIES",
		39: "SPECIALIZES",
		40: "SPECIALIZES_SPECULATIVE",
		41: "TAGGED",
		42: "TYPED",
		43: "UNDEFINES",
	}
	EdgeKind_value = map[string]int32{
		"UNKNOWN_EDGE_KIND":        0,
		"ALIASES":                  1,
		"ALIASES_ROOT":             2,
		"ANNOTATED_BY":             3,
		"BOUNDED_LOWER":            4,
		"BOUNDED_UPPER":            5,
		"CHILD_OF":                 6,
		"CHILD_OF_CONTEXT":         7,
		"COMPLETES":                8,
		"COMPLETES_UNIQUELY":       9,
		"DEFINES":                  10,
		"DEFINES_BINDING":          11,
		"DEPENDS":                  12,
		"DOCUMENTS":                13,
		"EXPORTS":                  14,
		"EXTENDS":                  15,
		"GENERATES":                16,
		"IMPUTES":                  17,
		"INSTANTIATES":             18,
		"INSTANTIATES_SPECULATIVE": 19,
		"NAMED":                    20,
		"OVERRIDES":                21,
		"OVERRIDES_ROOT":           22,
		"OVERRIDES_TRANSITIVE":     23,
		"PARAM":                    24,
		"PROPERTY_READS":           44,
		"PROPERTY_WRITES":          45,
		"REF":                      25,
		"REF_CALL":                 26,
		"REF_CALL_IMPLICIT":        27,
		"REF_DOC":                  28,
		"REF_EXPANDS":              29,
		"REF_EXPANDS_TRANSITIVE":   30,
		"REF_FILE":                 31,
		"REF_ID":                   46,
		"REF_IMPLICIT":             32,
		"REF_IMPORTS":              33,
		"REF_INCLUDES":             34,
		"REF_INIT":                 35,
		"REF_INIT_IMPLICIT":        36,
		"REF_QUERIES":              37,
		"REF_WRITES":               47,
		"SATISFIES":                38,
		"SPECIALIZES":              39,
		"SPECIALIZES_SPECULATIVE":  40,
		"TAGGED":                   41,
		"TYPED":                    42,
		"UNDEFINES":                43,
	}
)

func (x EdgeKind) Enum() *EdgeKind {
	p := new(EdgeKind)
	*p = x
	return p
}

func (x EdgeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_schema_proto_enumTypes[3].Descriptor()
}

func (EdgeKind) Type() protoreflect.EnumType {
	return &file_kythe_proto_schema_proto_enumTypes[3]
}

func (x EdgeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EdgeKind.Descriptor instead.
func (EdgeKind) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_schema_proto_rawDescGZIP(), []int{3}
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_kythe_proto_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Metadata) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *storage_go_proto.VName `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Fact   []*Fact                 `protobuf:"bytes,2,rep,name=fact,proto3" json:"fact,omitempty"`
	Edge   []*Edge                 `protobuf:"bytes,3,rep,name=edge,proto3" json:"edge,omitempty"`
	// Types that are assignable to Kind:
	//	*Node_KytheKind
	//	*Node_GenericKind
	Kind isNode_Kind `protobuf_oneof:"kind"`
	// Types that are assignable to Subkind:
	//	*Node_KytheSubkind
	//	*Node_GenericSubkind
	Subkind isNode_Subkind `protobuf_oneof:"subkind"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_kythe_proto_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Node) GetSource() *storage_go_proto.VName {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Node) GetFact() []*Fact {
	if x != nil {
		return x.Fact
	}
	return nil
}

func (x *Node) GetEdge() []*Edge {
	if x != nil {
		return x.Edge
	}
	return nil
}

func (m *Node) GetKind() isNode_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Node) GetKytheKind() NodeKind {
	if x, ok := x.GetKind().(*Node_KytheKind); ok {
		return x.KytheKind
	}
	return NodeKind_UNKNOWN_NODE_KIND
}

func (x *Node) GetGenericKind() string {
	if x, ok := x.GetKind().(*Node_GenericKind); ok {
		return x.GenericKind
	}
	return ""
}

func (m *Node) GetSubkind() isNode_Subkind {
	if m != nil {
		return m.Subkind
	}
	return nil
}

func (x *Node) GetKytheSubkind() Subkind {
	if x, ok := x.GetSubkind().(*Node_KytheSubkind); ok {
		return x.KytheSubkind
	}
	return Subkind_UNKNOWN_SUBKIND
}

func (x *Node) GetGenericSubkind() string {
	if x, ok := x.GetSubkind().(*Node_GenericSubkind); ok {
		return x.GenericSubkind
	}
	return ""
}

type isNode_Kind interface {
	isNode_Kind()
}

type Node_KytheKind struct {
	KytheKind NodeKind `protobuf:"varint,4,opt,name=kythe_kind,json=kytheKind,proto3,enum=kythe.proto.schema.NodeKind,oneof"`
}

type Node_GenericKind struct {
	GenericKind string `protobuf:"bytes,5,opt,name=generic_kind,json=genericKind,proto3,oneof"`
}

func (*Node_KytheKind) isNode_Kind() {}

func (*Node_GenericKind) isNode_Kind() {}

type isNode_Subkind interface {
	isNode_Subkind()
}

type Node_KytheSubkind struct {
	KytheSubkind Subkind `protobuf:"varint,6,opt,name=kythe_subkind,json=kytheSubkind,proto3,enum=kythe.proto.schema.Subkind,oneof"`
}

type Node_GenericSubkind struct {
	GenericSubkind string `protobuf:"bytes,7,opt,name=generic_subkind,json=genericSubkind,proto3,oneof"`
}

func (*Node_KytheSubkind) isNode_Subkind() {}

func (*Node_GenericSubkind) isNode_Subkind() {}

type Fact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *storage_go_proto.VName `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Types that are assignable to Name:
	//	*Fact_KytheName
	//	*Fact_GenericName
	Name  isFact_Name `protobuf_oneof:"name"`
	Value []byte      `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Fact) Reset() {
	*x = Fact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fact) ProtoMessage() {}

func (x *Fact) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fact.ProtoReflect.Descriptor instead.
func (*Fact) Descriptor() ([]byte, []int) {
	return file_kythe_proto_schema_proto_rawDescGZIP(), []int{2}
}

func (x *Fact) GetSource() *storage_go_proto.VName {
	if x != nil {
		return x.Source
	}
	return nil
}

func (m *Fact) GetName() isFact_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (x *Fact) GetKytheName() FactName {
	if x, ok := x.GetName().(*Fact_KytheName); ok {
		return x.KytheName
	}
	return FactName_UNKNOWN_FACT_NAME
}

func (x *Fact) GetGenericName() string {
	if x, ok := x.GetName().(*Fact_GenericName); ok {
		return x.GenericName
	}
	return ""
}

func (x *Fact) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type isFact_Name interface {
	isFact_Name()
}

type Fact_KytheName struct {
	KytheName FactName `protobuf:"varint,2,opt,name=kythe_name,json=kytheName,proto3,enum=kythe.proto.schema.FactName,oneof"`
}

type Fact_GenericName struct {
	GenericName string `protobuf:"bytes,3,opt,name=generic_name,json=genericName,proto3,oneof"`
}

func (*Fact_KytheName) isFact_Name() {}

func (*Fact_GenericName) isFact_Name() {}

type Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *storage_go_proto.VName `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target *storage_go_proto.VName `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Types that are assignable to Kind:
	//	*Edge_KytheKind
	//	*Edge_GenericKind
	Kind       isEdge_Kind `protobuf_oneof:"kind"`
	Ordinal    int32       `protobuf:"varint,5,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	SourceNode *Node       `protobuf:"bytes,6,opt,name=source_node,json=sourceNode,proto3" json:"source_node,omitempty"`
	TargetNode *Node       `protobuf:"bytes,7,opt,name=target_node,json=targetNode,proto3" json:"target_node,omitempty"`
}

func (x *Edge) Reset() {
	*x = Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_kythe_proto_schema_proto_rawDescGZIP(), []int{3}
}

func (x *Edge) GetSource() *storage_go_proto.VName {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Edge) GetTarget() *storage_go_proto.VName {
	if x != nil {
		return x.Target
	}
	return nil
}

func (m *Edge) GetKind() isEdge_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Edge) GetKytheKind() EdgeKind {
	if x, ok := x.GetKind().(*Edge_KytheKind); ok {
		return x.KytheKind
	}
	return EdgeKind_UNKNOWN_EDGE_KIND
}

func (x *Edge) GetGenericKind() string {
	if x, ok := x.GetKind().(*Edge_GenericKind); ok {
		return x.GenericKind
	}
	return ""
}

func (x *Edge) GetOrdinal() int32 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

func (x *Edge) GetSourceNode() *Node {
	if x != nil {
		return x.SourceNode
	}
	return nil
}

func (x *Edge) GetTargetNode() *Node {
	if x != nil {
		return x.TargetNode
	}
	return nil
}

type isEdge_Kind interface {
	isEdge_Kind()
}

type Edge_KytheKind struct {
	KytheKind EdgeKind `protobuf:"varint,3,opt,name=kythe_kind,json=kytheKind,proto3,enum=kythe.proto.schema.EdgeKind,oneof"`
}

type Edge_GenericKind struct {
	GenericKind string `protobuf:"bytes,4,opt,name=generic_kind,json=genericKind,proto3,oneof"`
}

func (*Edge_KytheKind) isEdge_Kind() {}

func (*Edge_GenericKind) isEdge_Kind() {}

type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//	*Entry_Fact
	//	*Entry_Edge
	Entry isEntry_Entry `protobuf_oneof:"entry"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_kythe_proto_schema_proto_rawDescGZIP(), []int{4}
}

func (m *Entry) GetEntry() isEntry_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *Entry) GetFact() *Fact {
	if x, ok := x.GetEntry().(*Entry_Fact); ok {
		return x.Fact
	}
	return nil
}

func (x *Entry) GetEdge() *Edge {
	if x, ok := x.GetEntry().(*Entry_Edge); ok {
		return x.Edge
	}
	return nil
}

type isEntry_Entry interface {
	isEntry_Entry()
}

type Entry_Fact struct {
	Fact *Fact `protobuf:"bytes,1,opt,name=fact,proto3,oneof"`
}

type Entry_Edge struct {
	Edge *Edge `protobuf:"bytes,2,opt,name=edge,proto3,oneof"`
}

func (*Entry_Fact) isEntry_Entry() {}

func (*Entry_Edge) isEntry_Entry() {}

var file_kythe_proto_schema_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*Metadata)(nil),
		Field:         69945,
		Name:          "kythe.proto.schema.metadata",
		Tag:           "bytes,69945,opt,name=metadata",
		Filename:      "kythe/proto/schema.proto",
	},
}

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional kythe.proto.schema.Metadata metadata = 69945;
	E_Metadata = &file_kythe_proto_schema_proto_extTypes[0]
)

var File_kythe_proto_schema_proto protoreflect.FileDescriptor

var file_kythe_proto_schema_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x20, 0x0a, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xf4, 0x02,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x52, 0x04, 0x66, 0x61, 0x63, 0x74,
	0x12, 0x2c, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65, 0x12, 0x3d,
	0x0a, 0x0a, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x09, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a,
	0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x75, 0x62, 0x6b, 0x69, 0x6e, 0x64, 0x48, 0x01, 0x52, 0x0c, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x53,
	0x75, 0x62, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x5f, 0x73, 0x75, 0x62, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x75, 0x62, 0x6b, 0x69, 0x6e,
	0x64, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6b, 0x69, 0x6e, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x04, 0x46, 0x61, 0x63, 0x74, 0x12, 0x2a, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x6b, 0x79, 0x74,
	0x68, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6b,
	0x79, 0x74, 0x68, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x04,
	0x45, 0x64, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0a,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x09, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x79, 0x74,
	0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x70, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x04, 0x66, 0x61, 0x63,
	0x74, 0x12, 0x2e, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2a, 0xa7, 0x05, 0x0a, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x03, 0x41, 0x42, 0x53, 0x10, 0x01, 0x1a, 0x09, 0xca, 0x93, 0x22, 0x05, 0x0a, 0x03, 0x61,
	0x62, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x41, 0x42, 0x53, 0x56, 0x41, 0x52, 0x10, 0x02, 0x1a, 0x0c,
	0xca, 0x93, 0x22, 0x08, 0x0a, 0x06, 0x61, 0x62, 0x73, 0x76, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x06,
	0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x0c, 0xca, 0x93, 0x22, 0x08, 0x0a, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x54, 0x10, 0x04, 0x1a, 0x0e, 0xca, 0x93, 0x22, 0x0a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54,
	0x49, 0x43, 0x10, 0x05, 0x1a, 0x10, 0xca, 0x93, 0x22, 0x0c, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x03, 0x44, 0x4f, 0x43, 0x10, 0x06, 0x1a,
	0x09, 0xca, 0x93, 0x22, 0x05, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x14, 0x0a, 0x04, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x07, 0x1a, 0x0a, 0xca, 0x93, 0x22, 0x06, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x1e, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x08, 0x1a,
	0x0f, 0xca, 0x93, 0x22, 0x0b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x08, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x1a, 0x0e,
	0xca, 0x93, 0x22, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x06, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x10, 0x0a, 0x1a, 0x0c, 0xca, 0x93, 0x22, 0x08,
	0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x05, 0x4d, 0x41, 0x43, 0x52,
	0x4f, 0x10, 0x0b, 0x1a, 0x0b, 0xca, 0x93, 0x22, 0x07, 0x0a, 0x05, 0x6d, 0x61, 0x63, 0x72, 0x6f,
	0x12, 0x14, 0x0a, 0x04, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x0c, 0x1a, 0x0a, 0xca, 0x93, 0x22, 0x06,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0d,
	0x1a, 0x0a, 0xca, 0x93, 0x22, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x07,
	0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x0e, 0x1a, 0x0d, 0xca, 0x93, 0x22, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x0f, 0x1a, 0x0d, 0xca, 0x93, 0x22, 0x09, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x10,
	0x1a, 0x0c, 0xca, 0x93, 0x22, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12,
	0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x11, 0x1a, 0x09, 0xca, 0x93, 0x22, 0x05, 0x0a, 0x03, 0x73,
	0x75, 0x6d, 0x12, 0x18, 0x0a, 0x06, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x12, 0x1a, 0x0c,
	0xca, 0x93, 0x22, 0x08, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x06,
	0x54, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x13, 0x1a, 0x0c, 0xca, 0x93, 0x22, 0x08, 0x0a, 0x06,
	0x74, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x54, 0x41, 0x50, 0x50, 0x10, 0x14,
	0x1a, 0x0a, 0xca, 0x93, 0x22, 0x06, 0x0a, 0x04, 0x74, 0x61, 0x70, 0x70, 0x12, 0x1c, 0x0a, 0x08,
	0x54, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x10, 0x15, 0x1a, 0x0e, 0xca, 0x93, 0x22, 0x0a,
	0x0a, 0x08, 0x74, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x54, 0x4e,
	0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x16, 0x1a, 0x0e, 0xca, 0x93, 0x22, 0x0a, 0x0a, 0x08,
	0x74, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x54, 0x53, 0x49, 0x47,
	0x4d, 0x41, 0x10, 0x17, 0x1a, 0x0c, 0xca, 0x93, 0x22, 0x08, 0x0a, 0x06, 0x74, 0x73, 0x69, 0x67,
	0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x08, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x18,
	0x1a, 0x0e, 0xca, 0x93, 0x22, 0x0a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x03, 0x56, 0x43, 0x53, 0x10, 0x19, 0x1a, 0x09, 0xca, 0x93, 0x22, 0x05, 0x0a,
	0x03, 0x76, 0x63, 0x73, 0x2a, 0x8b, 0x04, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x4b,
	0x49, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x10, 0x01, 0x1a, 0x0e, 0xca, 0x93, 0x22, 0x0a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x02, 0x1a, 0x0b,
	0xca, 0x93, 0x22, 0x07, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0b, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x11, 0xca, 0x93,
	0x22, 0x0d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x20, 0x0a, 0x0a, 0x44, 0x45, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x1a,
	0x10, 0xca, 0x93, 0x22, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x04, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x05, 0x1a, 0x0a, 0xca, 0x93, 0x22,
	0x06, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0a, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x06, 0x1a, 0x0f, 0xca, 0x93, 0x22, 0x0b, 0x0a, 0x09, 0x65,
	0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x10, 0x07, 0x1a, 0x0b, 0xca, 0x93, 0x22, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1c, 0x0a, 0x08, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x08, 0x1a, 0x0e,
	0xca, 0x93, 0x22, 0x0a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x18,
	0x0a, 0x06, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x09, 0x1a, 0x0c, 0xca, 0x93, 0x22, 0x08,
	0x0a, 0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x52, 0x10, 0x0a, 0x1a, 0x11, 0xca, 0x93, 0x22, 0x0d, 0x0a,
	0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x05,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x0b, 0x1a, 0x0b, 0xca, 0x93, 0x22, 0x07, 0x0a, 0x05, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x0f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x0c, 0x1a, 0x15, 0xca, 0x93, 0x22, 0x11, 0x0a,
	0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x0d, 0x1a, 0x0c, 0xca, 0x93,
	0x22, 0x08, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x4e, 0x41,
	0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x0e, 0x1a, 0x0f, 0xca, 0x93, 0x22, 0x0b, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x53, 0x54,
	0x52, 0x55, 0x43, 0x54, 0x10, 0x0f, 0x1a, 0x0c, 0xca, 0x93, 0x22, 0x08, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x10, 0x1a, 0x0a,
	0xca, 0x93, 0x22, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x55, 0x4e,
	0x49, 0x4f, 0x4e, 0x10, 0x11, 0x1a, 0x0b, 0xca, 0x93, 0x22, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x2a, 0xae, 0x06, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01,
	0x1a, 0x11, 0xca, 0x93, 0x22, 0x0d, 0x0a, 0x0b, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x02, 0x1a, 0x15, 0xca, 0x93, 0x22, 0x11, 0x0a, 0x0f, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x03, 0x1a, 0x18, 0xca, 0x93, 0x22, 0x14, 0x0a,
	0x12, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2f,
	0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x07, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x04,
	0x1a, 0x14, 0xca, 0x93, 0x22, 0x10, 0x0a, 0x0e, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x44, 0x4f, 0x43, 0x5f, 0x55, 0x52,
	0x49, 0x10, 0x05, 0x1a, 0x14, 0xca, 0x93, 0x22, 0x10, 0x0a, 0x0e, 0x2f, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2f, 0x64, 0x6f, 0x63, 0x2f, 0x75, 0x72, 0x69, 0x12, 0x1d, 0x0a, 0x05, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x10, 0x06, 0x1a, 0x12, 0xca, 0x93, 0x22, 0x0e, 0x0a, 0x0c, 0x2f, 0x6b, 0x79, 0x74,
	0x68, 0x65, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x07, 0x4c, 0x4f, 0x43, 0x5f,
	0x45, 0x4e, 0x44, 0x10, 0x07, 0x1a, 0x14, 0xca, 0x93, 0x22, 0x10, 0x0a, 0x0e, 0x2f, 0x6b, 0x79,
	0x74, 0x68, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x2f, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x4c,
	0x4f, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x08, 0x1a, 0x16, 0xca, 0x93, 0x22, 0x12,
	0x0a, 0x10, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x2f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x09, 0x1a,
	0x14, 0xca, 0x93, 0x22, 0x10, 0x0a, 0x0e, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x10, 0x0a, 0x1a, 0x16, 0xca, 0x93, 0x22, 0x12, 0x0a, 0x10, 0x2f, 0x6b, 0x79, 0x74,
	0x68, 0x65, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x0d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0b, 0x1a,
	0x1a, 0xca, 0x93, 0x22, 0x16, 0x0a, 0x14, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x52,
	0x55, 0x4c, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x0c, 0x1a, 0x16, 0xca, 0x93, 0x22,
	0x12, 0x0a, 0x10, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x0b, 0x53, 0x4e, 0x49, 0x50, 0x50, 0x45, 0x54, 0x5f, 0x45,
	0x4e, 0x44, 0x10, 0x0d, 0x1a, 0x18, 0xca, 0x93, 0x22, 0x14, 0x0a, 0x12, 0x2f, 0x6b, 0x79, 0x74,
	0x68, 0x65, 0x2f, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x2f, 0x65, 0x6e, 0x64, 0x12, 0x2d,
	0x0a, 0x0d, 0x53, 0x4e, 0x49, 0x50, 0x50, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x0e, 0x1a, 0x1a, 0xca, 0x93, 0x22, 0x16, 0x0a, 0x14, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f,
	0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x07, 0x53, 0x55, 0x42, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x0f, 0x1a, 0x14, 0xca, 0x93, 0x22, 0x10,
	0x0a, 0x0e, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1b, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x10, 0x1a, 0x11, 0xca, 0x93, 0x22, 0x0d,
	0x0a, 0x0b, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a,
	0x0d, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x11,
	0x1a, 0x1a, 0xca, 0x93, 0x22, 0x16, 0x0a, 0x14, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x74,
	0x65, 0x78, 0x74, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0a,
	0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x12, 0x1a, 0x17, 0xca, 0x93,
	0x22, 0x13, 0x0a, 0x11, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x0c, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x13, 0x1a, 0x19, 0xca, 0x93, 0x22, 0x15, 0x0a, 0x13, 0x2f,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2f, 0x0a, 0x0e, 0x54, 0x41, 0x47, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x14, 0x1a, 0x1b, 0xca, 0x93, 0x22, 0x17, 0x0a, 0x15, 0x2f, 0x6b,
	0x79, 0x74, 0x68, 0x65, 0x2f, 0x74, 0x61, 0x67, 0x2f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x2a, 0xf4, 0x11, 0x0a, 0x08, 0x45, 0x64, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x44, 0x47, 0x45,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x07, 0x41, 0x4c, 0x49, 0x41, 0x53,
	0x45, 0x53, 0x10, 0x01, 0x1a, 0x19, 0xca, 0x93, 0x22, 0x15, 0x0a, 0x13, 0x2f, 0x6b, 0x79, 0x74,
	0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x0c, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x45, 0x53, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10,
	0x02, 0x1a, 0x1e, 0xca, 0x93, 0x22, 0x1a, 0x0a, 0x18, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f,
	0x65, 0x64, 0x67, 0x65, 0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x6f,
	0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x10, 0x03, 0x1a, 0x1d, 0xca, 0x93, 0x22, 0x19, 0x0a, 0x17, 0x2f, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64,
	0x62, 0x79, 0x12, 0x32, 0x0a, 0x0d, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4c, 0x4f,
	0x57, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x1f, 0xca, 0x93, 0x22, 0x1b, 0x0a, 0x19, 0x2f, 0x6b, 0x79,
	0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x2f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0d, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x45,
	0x44, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x10, 0x05, 0x1a, 0x1f, 0xca, 0x93, 0x22, 0x1b, 0x0a,
	0x19, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x65, 0x64, 0x2f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x48,
	0x49, 0x4c, 0x44, 0x5f, 0x4f, 0x46, 0x10, 0x06, 0x1a, 0x19, 0xca, 0x93, 0x22, 0x15, 0x0a, 0x13,
	0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x6f, 0x66, 0x12, 0x37, 0x0a, 0x10, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x4f, 0x46, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x07, 0x1a, 0x21, 0xca, 0x93, 0x22, 0x1d, 0x0a,
	0x1b, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x6f, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x53, 0x10, 0x08, 0x1a, 0x1b, 0xca, 0x93, 0x22,
	0x17, 0x0a, 0x15, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x4c, 0x59, 0x10, 0x09,
	0x1a, 0x24, 0xca, 0x93, 0x22, 0x20, 0x0a, 0x1e, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65,
	0x64, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x53, 0x10, 0x0a, 0x1a, 0x19, 0xca, 0x93, 0x22, 0x15, 0x0a, 0x13, 0x2f, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x0f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x53, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x0b, 0x1a, 0x21, 0xca, 0x93, 0x22, 0x1d, 0x0a, 0x1b, 0x2f, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x07, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44,
	0x53, 0x10, 0x0c, 0x1a, 0x19, 0xca, 0x93, 0x22, 0x15, 0x0a, 0x13, 0x2f, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x2a,
	0x0a, 0x09, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x0d, 0x1a, 0x1b, 0xca,
	0x93, 0x22, 0x17, 0x0a, 0x15, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x45, 0x58,
	0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x0e, 0x1a, 0x19, 0xca, 0x93, 0x22, 0x15, 0x0a, 0x13, 0x2f,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x0f, 0x1a,
	0x19, 0xca, 0x93, 0x22, 0x15, 0x0a, 0x13, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x53, 0x10, 0x10, 0x1a, 0x1b, 0xca, 0x93, 0x22, 0x17, 0x0a,
	0x15, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x49, 0x4d, 0x50, 0x55, 0x54, 0x45,
	0x53, 0x10, 0x11, 0x1a, 0x19, 0xca, 0x93, 0x22, 0x15, 0x0a, 0x13, 0x2f, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x69, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x0c, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x49, 0x41, 0x54, 0x45, 0x53, 0x10, 0x12,
	0x1a, 0x1e, 0xca, 0x93, 0x22, 0x1a, 0x0a, 0x18, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65,
	0x64, 0x67, 0x65, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x48, 0x0a, 0x18, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x49, 0x41, 0x54, 0x45, 0x53,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x13, 0x1a, 0x2a,
	0xca, 0x93, 0x22, 0x26, 0x0a, 0x24, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x73,
	0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x4e, 0x41,
	0x4d, 0x45, 0x44, 0x10, 0x14, 0x1a, 0x17, 0xca, 0x93, 0x22, 0x13, 0x0a, 0x11, 0x2f, 0x6b, 0x79,
	0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x09, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x53, 0x10, 0x15, 0x1a, 0x1b, 0xca,
	0x93, 0x22, 0x17, 0x0a, 0x15, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0e, 0x4f, 0x56,
	0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x53, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x16, 0x1a, 0x20,
	0xca, 0x93, 0x22, 0x1c, 0x0a, 0x1a, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x6f, 0x74,
	0x12, 0x40, 0x0a, 0x14, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x17, 0x1a, 0x26, 0xca, 0x93, 0x22, 0x22,
	0x0a, 0x20, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x18, 0x1a, 0x17, 0xca,
	0x93, 0x22, 0x13, 0x0a, 0x11, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52,
	0x54, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x53, 0x10, 0x2c, 0x1a, 0x20, 0xca, 0x93, 0x22, 0x1c,
	0x0a, 0x1a, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0f,
	0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x53, 0x10,
	0x2d, 0x1a, 0x21, 0xca, 0x93, 0x22, 0x1d, 0x0a, 0x1b, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f,
	0x65, 0x64, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x03, 0x52, 0x45, 0x46, 0x10, 0x19, 0x1a, 0x15, 0xca,
	0x93, 0x22, 0x11, 0x0a, 0x0f, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x2f, 0x72, 0x65, 0x66, 0x12, 0x28, 0x0a, 0x08, 0x52, 0x45, 0x46, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x10, 0x1a, 0x1a, 0x1a, 0xca, 0x93, 0x22, 0x16, 0x0a, 0x14, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65,
	0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x3a,
	0x0a, 0x11, 0x52, 0x45, 0x46, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x10, 0x1b, 0x1a, 0x23, 0xca, 0x93, 0x22, 0x1f, 0x0a, 0x1d, 0x2f, 0x6b, 0x79,
	0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x63, 0x61, 0x6c,
	0x6c, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x52, 0x45,
	0x46, 0x5f, 0x44, 0x4f, 0x43, 0x10, 0x1c, 0x1a, 0x19, 0xca, 0x93, 0x22, 0x15, 0x0a, 0x13, 0x2f,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x64,
	0x6f, 0x63, 0x12, 0x2e, 0x0a, 0x0b, 0x52, 0x45, 0x46, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44,
	0x53, 0x10, 0x1d, 0x1a, 0x1d, 0xca, 0x93, 0x22, 0x19, 0x0a, 0x17, 0x2f, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x65, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x73, 0x12, 0x44, 0x0a, 0x16, 0x52, 0x45, 0x46, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44,
	0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x1e, 0x1a, 0x28,
	0xca, 0x93, 0x22, 0x24, 0x0a, 0x22, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x52, 0x45, 0x46, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x1f, 0x1a, 0x1a, 0xca, 0x93, 0x22, 0x16, 0x0a, 0x14, 0x2f, 0x6b,
	0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x52, 0x45, 0x46, 0x5f, 0x49, 0x44, 0x10, 0x2e, 0x1a, 0x18,
	0xca, 0x93, 0x22, 0x14, 0x0a, 0x12, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x0c, 0x52, 0x45, 0x46, 0x5f,
	0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x20, 0x1a, 0x1e, 0xca, 0x93, 0x22, 0x1a,
	0x0a, 0x18, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x72, 0x65,
	0x66, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x52, 0x45,
	0x46, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x21, 0x1a, 0x1d, 0xca, 0x93, 0x22,
	0x19, 0x0a, 0x17, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x72,
	0x65, 0x66, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0c, 0x52, 0x45,
	0x46, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x53, 0x10, 0x22, 0x1a, 0x1e, 0xca, 0x93,
	0x22, 0x1a, 0x0a, 0x18, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f,
	0x72, 0x65, 0x66, 0x2f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x08,
	0x52, 0x45, 0x46, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x23, 0x1a, 0x1a, 0xca, 0x93, 0x22, 0x16,
	0x0a, 0x14, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x72, 0x65,
	0x66, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x11, 0x52, 0x45, 0x46, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x24, 0x1a, 0x23, 0xca,
	0x93, 0x22, 0x1f, 0x0a, 0x1d, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x2f, 0x72, 0x65, 0x66, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x52, 0x45, 0x46, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45,
	0x53, 0x10, 0x25, 0x1a, 0x1d, 0xca, 0x93, 0x22, 0x19, 0x0a, 0x17, 0x2f, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x52, 0x45, 0x46, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x53,
	0x10, 0x2f, 0x1a, 0x1c, 0xca, 0x93, 0x22, 0x18, 0x0a, 0x16, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65,
	0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x72, 0x65, 0x66, 0x2f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x09, 0x53, 0x41, 0x54, 0x49, 0x53, 0x46, 0x49, 0x45, 0x53, 0x10, 0x26, 0x1a,
	0x1b, 0xca, 0x93, 0x22, 0x17, 0x0a, 0x15, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x2f, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0b,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x53, 0x10, 0x27, 0x1a, 0x1d, 0xca,
	0x93, 0x22, 0x19, 0x0a, 0x17, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x17,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x43,
	0x55, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x28, 0x1a, 0x29, 0xca, 0x93, 0x22, 0x25, 0x0a,
	0x23, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x73, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x29,
	0x1a, 0x18, 0xca, 0x93, 0x22, 0x14, 0x0a, 0x12, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65,
	0x64, 0x67, 0x65, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x59,
	0x50, 0x45, 0x44, 0x10, 0x2a, 0x1a, 0x17, 0xca, 0x93, 0x22, 0x13, 0x0a, 0x11, 0x2f, 0x6b, 0x79,
	0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x53, 0x10, 0x2b, 0x1a, 0x1b, 0xca,
	0x93, 0x22, 0x17, 0x0a, 0x15, 0x2f, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x2f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x3a, 0x5d, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb9, 0xa2, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x32, 0x0a, 0x1f, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x0f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kythe_proto_schema_proto_rawDescOnce sync.Once
	file_kythe_proto_schema_proto_rawDescData = file_kythe_proto_schema_proto_rawDesc
)

func file_kythe_proto_schema_proto_rawDescGZIP() []byte {
	file_kythe_proto_schema_proto_rawDescOnce.Do(func() {
		file_kythe_proto_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_kythe_proto_schema_proto_rawDescData)
	})
	return file_kythe_proto_schema_proto_rawDescData
}

var file_kythe_proto_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_kythe_proto_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_kythe_proto_schema_proto_goTypes = []interface{}{
	(NodeKind)(0),                         // 0: kythe.proto.schema.NodeKind
	(Subkind)(0),                          // 1: kythe.proto.schema.Subkind
	(FactName)(0),                         // 2: kythe.proto.schema.FactName
	(EdgeKind)(0),                         // 3: kythe.proto.schema.EdgeKind
	(*Metadata)(nil),                      // 4: kythe.proto.schema.Metadata
	(*Node)(nil),                          // 5: kythe.proto.schema.Node
	(*Fact)(nil),                          // 6: kythe.proto.schema.Fact
	(*Edge)(nil),                          // 7: kythe.proto.schema.Edge
	(*Entry)(nil),                         // 8: kythe.proto.schema.Entry
	(*storage_go_proto.VName)(nil),        // 9: kythe.proto.VName
	(*descriptorpb.EnumValueOptions)(nil), // 10: google.protobuf.EnumValueOptions
}
var file_kythe_proto_schema_proto_depIdxs = []int32{
	9,  // 0: kythe.proto.schema.Node.source:type_name -> kythe.proto.VName
	6,  // 1: kythe.proto.schema.Node.fact:type_name -> kythe.proto.schema.Fact
	7,  // 2: kythe.proto.schema.Node.edge:type_name -> kythe.proto.schema.Edge
	0,  // 3: kythe.proto.schema.Node.kythe_kind:type_name -> kythe.proto.schema.NodeKind
	1,  // 4: kythe.proto.schema.Node.kythe_subkind:type_name -> kythe.proto.schema.Subkind
	9,  // 5: kythe.proto.schema.Fact.source:type_name -> kythe.proto.VName
	2,  // 6: kythe.proto.schema.Fact.kythe_name:type_name -> kythe.proto.schema.FactName
	9,  // 7: kythe.proto.schema.Edge.source:type_name -> kythe.proto.VName
	9,  // 8: kythe.proto.schema.Edge.target:type_name -> kythe.proto.VName
	3,  // 9: kythe.proto.schema.Edge.kythe_kind:type_name -> kythe.proto.schema.EdgeKind
	5,  // 10: kythe.proto.schema.Edge.source_node:type_name -> kythe.proto.schema.Node
	5,  // 11: kythe.proto.schema.Edge.target_node:type_name -> kythe.proto.schema.Node
	6,  // 12: kythe.proto.schema.Entry.fact:type_name -> kythe.proto.schema.Fact
	7,  // 13: kythe.proto.schema.Entry.edge:type_name -> kythe.proto.schema.Edge
	10, // 14: kythe.proto.schema.metadata:extendee -> google.protobuf.EnumValueOptions
	4,  // 15: kythe.proto.schema.metadata:type_name -> kythe.proto.schema.Metadata
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	15, // [15:16] is the sub-list for extension type_name
	14, // [14:15] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_kythe_proto_schema_proto_init() }
func file_kythe_proto_schema_proto_init() {
	if File_kythe_proto_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kythe_proto_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kythe_proto_schema_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Node_KytheKind)(nil),
		(*Node_GenericKind)(nil),
		(*Node_KytheSubkind)(nil),
		(*Node_GenericSubkind)(nil),
	}
	file_kythe_proto_schema_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Fact_KytheName)(nil),
		(*Fact_GenericName)(nil),
	}
	file_kythe_proto_schema_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Edge_KytheKind)(nil),
		(*Edge_GenericKind)(nil),
	}
	file_kythe_proto_schema_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Entry_Fact)(nil),
		(*Entry_Edge)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kythe_proto_schema_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   5,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_kythe_proto_schema_proto_goTypes,
		DependencyIndexes: file_kythe_proto_schema_proto_depIdxs,
		EnumInfos:         file_kythe_proto_schema_proto_enumTypes,
		MessageInfos:      file_kythe_proto_schema_proto_msgTypes,
		ExtensionInfos:    file_kythe_proto_schema_proto_extTypes,
	}.Build()
	File_kythe_proto_schema_proto = out.File
	file_kythe_proto_schema_proto_rawDesc = nil
	file_kythe_proto_schema_proto_goTypes = nil
	file_kythe_proto_schema_proto_depIdxs = nil
}
