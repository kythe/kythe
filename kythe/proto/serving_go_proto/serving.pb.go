// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: kythe/proto/serving.proto

package serving_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common_go_proto "kythe.io/kythe/proto/common_go_proto"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileDirectory_Kind int32

const (
	FileDirectory_UNKNOWN   FileDirectory_Kind = 0
	FileDirectory_FILE      FileDirectory_Kind = 1
	FileDirectory_DIRECTORY FileDirectory_Kind = 2
)

// Enum value maps for FileDirectory_Kind.
var (
	FileDirectory_Kind_name = map[int32]string{
		0: "UNKNOWN",
		1: "FILE",
		2: "DIRECTORY",
	}
	FileDirectory_Kind_value = map[string]int32{
		"UNKNOWN":   0,
		"FILE":      1,
		"DIRECTORY": 2,
	}
)

func (x FileDirectory_Kind) Enum() *FileDirectory_Kind {
	p := new(FileDirectory_Kind)
	*p = x
	return p
}

func (x FileDirectory_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileDirectory_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_serving_proto_enumTypes[0].Descriptor()
}

func (FileDirectory_Kind) Type() protoreflect.EnumType {
	return &file_kythe_proto_serving_proto_enumTypes[0]
}

func (x FileDirectory_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileDirectory_Kind.Descriptor instead.
func (FileDirectory_Kind) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{6, 0}
}

type FileDecorations_Override_Kind int32

const (
	FileDecorations_Override_OVERRIDES FileDecorations_Override_Kind = 0
	FileDecorations_Override_EXTENDS   FileDecorations_Override_Kind = 1
)

// Enum value maps for FileDecorations_Override_Kind.
var (
	FileDecorations_Override_Kind_name = map[int32]string{
		0: "OVERRIDES",
		1: "EXTENDS",
	}
	FileDecorations_Override_Kind_value = map[string]int32{
		"OVERRIDES": 0,
		"EXTENDS":   1,
	}
)

func (x FileDecorations_Override_Kind) Enum() *FileDecorations_Override_Kind {
	p := new(FileDecorations_Override_Kind)
	*p = x
	return p
}

func (x FileDecorations_Override_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileDecorations_Override_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_serving_proto_enumTypes[1].Descriptor()
}

func (FileDecorations_Override_Kind) Type() protoreflect.EnumType {
	return &file_kythe_proto_serving_proto_enumTypes[1]
}

func (x FileDecorations_Override_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileDecorations_Override_Kind.Descriptor instead.
func (FileDecorations_Override_Kind) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{12, 1, 0}
}

type Relatives_Type int32

const (
	Relatives_UNKNOWN  Relatives_Type = 0
	Relatives_PARENTS  Relatives_Type = 1
	Relatives_CHILDREN Relatives_Type = 2
)

// Enum value maps for Relatives_Type.
var (
	Relatives_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "PARENTS",
		2: "CHILDREN",
	}
	Relatives_Type_value = map[string]int32{
		"UNKNOWN":  0,
		"PARENTS":  1,
		"CHILDREN": 2,
	}
)

func (x Relatives_Type) Enum() *Relatives_Type {
	p := new(Relatives_Type)
	*p = x
	return p
}

func (x Relatives_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Relatives_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_serving_proto_enumTypes[2].Descriptor()
}

func (Relatives_Type) Type() protoreflect.EnumType {
	return &file_kythe_proto_serving_proto_enumTypes[2]
}

func (x Relatives_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Relatives_Type.Descriptor instead.
func (Relatives_Type) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{16, 0}
}

type Callgraph_Type int32

const (
	Callgraph_UNKNOWN Callgraph_Type = 0
	Callgraph_CALLER  Callgraph_Type = 1
	Callgraph_CALLEE  Callgraph_Type = 2
)

// Enum value maps for Callgraph_Type.
var (
	Callgraph_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "CALLER",
		2: "CALLEE",
	}
	Callgraph_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"CALLER":  1,
		"CALLEE":  2,
	}
)

func (x Callgraph_Type) Enum() *Callgraph_Type {
	p := new(Callgraph_Type)
	*p = x
	return p
}

func (x Callgraph_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Callgraph_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_serving_proto_enumTypes[3].Descriptor()
}

func (Callgraph_Type) Type() protoreflect.EnumType {
	return &file_kythe_proto_serving_proto_enumTypes[3]
}

func (x Callgraph_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Callgraph_Type.Descriptor instead.
func (Callgraph_Type) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{17, 0}
}

type Diff_Type int32

const (
	Diff_EQUAL  Diff_Type = 0
	Diff_INSERT Diff_Type = 1
	Diff_DELETE Diff_Type = 2
)

// Enum value maps for Diff_Type.
var (
	Diff_Type_name = map[int32]string{
		0: "EQUAL",
		1: "INSERT",
		2: "DELETE",
	}
	Diff_Type_value = map[string]int32{
		"EQUAL":  0,
		"INSERT": 1,
		"DELETE": 2,
	}
)

func (x Diff_Type) Enum() *Diff_Type {
	p := new(Diff_Type)
	*p = x
	return p
}

func (x Diff_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Diff_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_kythe_proto_serving_proto_enumTypes[4].Descriptor()
}

func (Diff_Type) Type() protoreflect.EnumType {
	return &file_kythe_proto_serving_proto_enumTypes[4]
}

func (x Diff_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Diff_Type.Descriptor instead.
func (Diff_Type) EnumDescriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{18, 0}
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket             string                  `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Fact               []*common_go_proto.Fact `protobuf:"bytes,2,rep,name=fact,proto3" json:"fact,omitempty"`
	DefinitionLocation *ExpandedAnchor         `protobuf:"bytes,3,opt,name=definition_location,json=definitionLocation,proto3" json:"definition_location,omitempty"`
	Rank               float64                 `protobuf:"fixed64,4,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *Node) GetFact() []*common_go_proto.Fact {
	if x != nil {
		return x.Fact
	}
	return nil
}

func (x *Node) GetDefinitionLocation() *ExpandedAnchor {
	if x != nil {
		return x.DefinitionLocation
	}
	return nil
}

func (x *Node) GetRank() float64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source  *Node                   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Kind    string                  `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Ordinal int32                   `protobuf:"varint,5,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	Target  *Node                   `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Fact    []*common_go_proto.Fact `protobuf:"bytes,4,rep,name=fact,proto3" json:"fact,omitempty"`
}

func (x *Edge) Reset() {
	*x = Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{1}
}

func (x *Edge) GetSource() *Node {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Edge) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Edge) GetOrdinal() int32 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

func (x *Edge) GetTarget() *Node {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Edge) GetFact() []*common_go_proto.Fact {
	if x != nil {
		return x.Fact
	}
	return nil
}

type EdgeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind string            `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Edge []*EdgeGroup_Edge `protobuf:"bytes,2,rep,name=edge,proto3" json:"edge,omitempty"`
}

func (x *EdgeGroup) Reset() {
	*x = EdgeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeGroup) ProtoMessage() {}

func (x *EdgeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeGroup.ProtoReflect.Descriptor instead.
func (*EdgeGroup) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{2}
}

func (x *EdgeGroup) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *EdgeGroup) GetEdge() []*EdgeGroup_Edge {
	if x != nil {
		return x.Edge
	}
	return nil
}

type PagedEdgeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *Node        `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Group  []*EdgeGroup `protobuf:"bytes,2,rep,name=group,proto3" json:"group,omitempty"`
	// Deprecated: Marked as deprecated in kythe/proto/serving.proto.
	TotalEdges int32        `protobuf:"varint,3,opt,name=total_edges,json=totalEdges,proto3" json:"total_edges,omitempty"`
	PageIndex  []*PageIndex `protobuf:"bytes,4,rep,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
}

func (x *PagedEdgeSet) Reset() {
	*x = PagedEdgeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedEdgeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedEdgeSet) ProtoMessage() {}

func (x *PagedEdgeSet) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedEdgeSet.ProtoReflect.Descriptor instead.
func (*PagedEdgeSet) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{3}
}

func (x *PagedEdgeSet) GetSource() *Node {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PagedEdgeSet) GetGroup() []*EdgeGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

// Deprecated: Marked as deprecated in kythe/proto/serving.proto.
func (x *PagedEdgeSet) GetTotalEdges() int32 {
	if x != nil {
		return x.TotalEdges
	}
	return 0
}

func (x *PagedEdgeSet) GetPageIndex() []*PageIndex {
	if x != nil {
		return x.PageIndex
	}
	return nil
}

type PageIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EdgeKind  string `protobuf:"bytes,1,opt,name=edge_kind,json=edgeKind,proto3" json:"edge_kind,omitempty"`
	EdgeCount int32  `protobuf:"varint,2,opt,name=edge_count,json=edgeCount,proto3" json:"edge_count,omitempty"`
	PageKey   string `protobuf:"bytes,3,opt,name=page_key,json=pageKey,proto3" json:"page_key,omitempty"`
}

func (x *PageIndex) Reset() {
	*x = PageIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageIndex) ProtoMessage() {}

func (x *PageIndex) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageIndex.ProtoReflect.Descriptor instead.
func (*PageIndex) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{4}
}

func (x *PageIndex) GetEdgeKind() string {
	if x != nil {
		return x.EdgeKind
	}
	return ""
}

func (x *PageIndex) GetEdgeCount() int32 {
	if x != nil {
		return x.EdgeCount
	}
	return 0
}

func (x *PageIndex) GetPageKey() string {
	if x != nil {
		return x.PageKey
	}
	return ""
}

type EdgePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageKey      string     `protobuf:"bytes,1,opt,name=page_key,json=pageKey,proto3" json:"page_key,omitempty"`
	SourceTicket string     `protobuf:"bytes,2,opt,name=source_ticket,json=sourceTicket,proto3" json:"source_ticket,omitempty"`
	EdgesGroup   *EdgeGroup `protobuf:"bytes,3,opt,name=edges_group,json=edgesGroup,proto3" json:"edges_group,omitempty"`
}

func (x *EdgePage) Reset() {
	*x = EdgePage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgePage) ProtoMessage() {}

func (x *EdgePage) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgePage.ProtoReflect.Descriptor instead.
func (*EdgePage) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{5}
}

func (x *EdgePage) GetPageKey() string {
	if x != nil {
		return x.PageKey
	}
	return ""
}

func (x *EdgePage) GetSourceTicket() string {
	if x != nil {
		return x.SourceTicket
	}
	return ""
}

func (x *EdgePage) GetEdgesGroup() *EdgeGroup {
	if x != nil {
		return x.EdgesGroup
	}
	return nil
}

type FileDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry []*FileDirectory_Entry `protobuf:"bytes,3,rep,name=entry,proto3" json:"entry,omitempty"`
	// Deprecated: Marked as deprecated in kythe/proto/serving.proto.
	Subdirectory []string `protobuf:"bytes,1,rep,name=subdirectory,proto3" json:"subdirectory,omitempty"`
	// Deprecated: Marked as deprecated in kythe/proto/serving.proto.
	FileTicket []string `protobuf:"bytes,2,rep,name=file_ticket,json=fileTicket,proto3" json:"file_ticket,omitempty"`
}

func (x *FileDirectory) Reset() {
	*x = FileDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDirectory) ProtoMessage() {}

func (x *FileDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDirectory.ProtoReflect.Descriptor instead.
func (*FileDirectory) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{6}
}

func (x *FileDirectory) GetEntry() []*FileDirectory_Entry {
	if x != nil {
		return x.Entry
	}
	return nil
}

// Deprecated: Marked as deprecated in kythe/proto/serving.proto.
func (x *FileDirectory) GetSubdirectory() []string {
	if x != nil {
		return x.Subdirectory
	}
	return nil
}

// Deprecated: Marked as deprecated in kythe/proto/serving.proto.
func (x *FileDirectory) GetFileTicket() []string {
	if x != nil {
		return x.FileTicket
	}
	return nil
}

type CorpusRoots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Corpus []*CorpusRoots_Corpus `protobuf:"bytes,1,rep,name=corpus,proto3" json:"corpus,omitempty"`
}

func (x *CorpusRoots) Reset() {
	*x = CorpusRoots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorpusRoots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorpusRoots) ProtoMessage() {}

func (x *CorpusRoots) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorpusRoots.ProtoReflect.Descriptor instead.
func (*CorpusRoots) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{7}
}

func (x *CorpusRoots) GetCorpus() []*CorpusRoots_Corpus {
	if x != nil {
		return x.Corpus
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket   string    `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Text     []byte    `protobuf:"bytes,2,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Encoding string    `protobuf:"bytes,3,opt,name=encoding,proto3" json:"encoding,omitempty"`
	Info     *FileInfo `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{8}
}

func (x *File) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *File) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *File) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *File) GetInfo() *FileInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type RawAnchor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket             string `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	StartOffset        int32  `protobuf:"varint,2,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset          int32  `protobuf:"varint,3,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	SnippetStart       int32  `protobuf:"varint,4,opt,name=snippet_start,json=snippetStart,proto3" json:"snippet_start,omitempty"`
	SnippetEnd         int32  `protobuf:"varint,5,opt,name=snippet_end,json=snippetEnd,proto3" json:"snippet_end,omitempty"`
	BuildConfiguration string `protobuf:"bytes,6,opt,name=build_configuration,json=buildConfiguration,proto3" json:"build_configuration,omitempty"`
}

func (x *RawAnchor) Reset() {
	*x = RawAnchor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawAnchor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawAnchor) ProtoMessage() {}

func (x *RawAnchor) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawAnchor.ProtoReflect.Descriptor instead.
func (*RawAnchor) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{9}
}

func (x *RawAnchor) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *RawAnchor) GetStartOffset() int32 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *RawAnchor) GetEndOffset() int32 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

func (x *RawAnchor) GetSnippetStart() int32 {
	if x != nil {
		return x.SnippetStart
	}
	return 0
}

func (x *RawAnchor) GetSnippetEnd() int32 {
	if x != nil {
		return x.SnippetEnd
	}
	return 0
}

func (x *RawAnchor) GetBuildConfiguration() string {
	if x != nil {
		return x.BuildConfiguration
	}
	return ""
}

type ExpandedAnchor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket             string                `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Kind               string                `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Text               string                `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Span               *common_go_proto.Span `protobuf:"bytes,5,opt,name=span,proto3" json:"span,omitempty"`
	Snippet            string                `protobuf:"bytes,6,opt,name=snippet,proto3" json:"snippet,omitempty"`
	SnippetSpan        *common_go_proto.Span `protobuf:"bytes,7,opt,name=snippet_span,json=snippetSpan,proto3" json:"snippet_span,omitempty"`
	BuildConfiguration string                `protobuf:"bytes,8,opt,name=build_configuration,json=buildConfiguration,proto3" json:"build_configuration,omitempty"`
	Rank               float64               `protobuf:"fixed64,9,opt,name=rank,proto3" json:"rank,omitempty"`
	FileInfo           *FileInfo             `protobuf:"bytes,10,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
}

func (x *ExpandedAnchor) Reset() {
	*x = ExpandedAnchor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandedAnchor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandedAnchor) ProtoMessage() {}

func (x *ExpandedAnchor) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandedAnchor.ProtoReflect.Descriptor instead.
func (*ExpandedAnchor) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{10}
}

func (x *ExpandedAnchor) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *ExpandedAnchor) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ExpandedAnchor) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ExpandedAnchor) GetSpan() *common_go_proto.Span {
	if x != nil {
		return x.Span
	}
	return nil
}

func (x *ExpandedAnchor) GetSnippet() string {
	if x != nil {
		return x.Snippet
	}
	return ""
}

func (x *ExpandedAnchor) GetSnippetSpan() *common_go_proto.Span {
	if x != nil {
		return x.SnippetSpan
	}
	return nil
}

func (x *ExpandedAnchor) GetBuildConfiguration() string {
	if x != nil {
		return x.BuildConfiguration
	}
	return ""
}

func (x *ExpandedAnchor) GetRank() float64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ExpandedAnchor) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorpusPath     *common_go_proto.CorpusPath `protobuf:"bytes,1,opt,name=corpus_path,json=corpusPath,proto3" json:"corpus_path,omitempty"`
	Revision       string                      `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Hash           *common_go_proto.Hash       `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	ViewRestricted bool                        `protobuf:"varint,4,opt,name=view_restricted,json=viewRestricted,proto3" json:"view_restricted,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{11}
}

func (x *FileInfo) GetCorpusPath() *common_go_proto.CorpusPath {
	if x != nil {
		return x.CorpusPath
	}
	return nil
}

func (x *FileInfo) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *FileInfo) GetHash() *common_go_proto.Hash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *FileInfo) GetViewRestricted() bool {
	if x != nil {
		return x.ViewRestricted
	}
	return false
}

type FileDecorations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File              *File                         `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Decoration        []*FileDecorations_Decoration `protobuf:"bytes,2,rep,name=decoration,proto3" json:"decoration,omitempty"`
	Target            []*Node                       `protobuf:"bytes,4,rep,name=target,proto3" json:"target,omitempty"`
	TargetDefinitions []*ExpandedAnchor             `protobuf:"bytes,3,rep,name=target_definitions,json=targetDefinitions,proto3" json:"target_definitions,omitempty"`
	TargetOverride    []*FileDecorations_Override   `protobuf:"bytes,5,rep,name=target_override,json=targetOverride,proto3" json:"target_override,omitempty"`
	Diagnostic        []*common_go_proto.Diagnostic `protobuf:"bytes,6,rep,name=diagnostic,proto3" json:"diagnostic,omitempty"`
	GeneratedBy       []string                      `protobuf:"bytes,7,rep,name=generated_by,json=generatedBy,proto3" json:"generated_by,omitempty"`
	FileInfo          []*FileInfo                   `protobuf:"bytes,8,rep,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
}

func (x *FileDecorations) Reset() {
	*x = FileDecorations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDecorations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDecorations) ProtoMessage() {}

func (x *FileDecorations) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDecorations.ProtoReflect.Descriptor instead.
func (*FileDecorations) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{12}
}

func (x *FileDecorations) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FileDecorations) GetDecoration() []*FileDecorations_Decoration {
	if x != nil {
		return x.Decoration
	}
	return nil
}

func (x *FileDecorations) GetTarget() []*Node {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *FileDecorations) GetTargetDefinitions() []*ExpandedAnchor {
	if x != nil {
		return x.TargetDefinitions
	}
	return nil
}

func (x *FileDecorations) GetTargetOverride() []*FileDecorations_Override {
	if x != nil {
		return x.TargetOverride
	}
	return nil
}

func (x *FileDecorations) GetDiagnostic() []*common_go_proto.Diagnostic {
	if x != nil {
		return x.Diagnostic
	}
	return nil
}

func (x *FileDecorations) GetGeneratedBy() []string {
	if x != nil {
		return x.GeneratedBy
	}
	return nil
}

func (x *FileDecorations) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

type PagedCrossReferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MergeWith    []string                          `protobuf:"bytes,7,rep,name=merge_with,json=mergeWith,proto3" json:"merge_with,omitempty"`
	SourceTicket string                            `protobuf:"bytes,1,opt,name=source_ticket,json=sourceTicket,proto3" json:"source_ticket,omitempty"`
	SourceNode   *Node                             `protobuf:"bytes,8,opt,name=source_node,json=sourceNode,proto3" json:"source_node,omitempty"`
	Group        []*PagedCrossReferences_Group     `protobuf:"bytes,2,rep,name=group,proto3" json:"group,omitempty"`
	PageIndex    []*PagedCrossReferences_PageIndex `protobuf:"bytes,3,rep,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	// Deprecated: Marked as deprecated in kythe/proto/serving.proto.
	TotalReferences int32                                 `protobuf:"varint,4,opt,name=total_references,json=totalReferences,proto3" json:"total_references,omitempty"`
	Incomplete      bool                                  `protobuf:"varint,5,opt,name=incomplete,proto3" json:"incomplete,omitempty"`
	MarkedSource    *common_go_proto.MarkedSource         `protobuf:"bytes,6,opt,name=marked_source,json=markedSource,proto3" json:"marked_source,omitempty"`
	PageSearchIndex *PagedCrossReferences_PageSearchIndex `protobuf:"bytes,11,opt,name=page_search_index,json=pageSearchIndex,proto3" json:"page_search_index,omitempty"`
}

func (x *PagedCrossReferences) Reset() {
	*x = PagedCrossReferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedCrossReferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedCrossReferences) ProtoMessage() {}

func (x *PagedCrossReferences) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedCrossReferences.ProtoReflect.Descriptor instead.
func (*PagedCrossReferences) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{13}
}

func (x *PagedCrossReferences) GetMergeWith() []string {
	if x != nil {
		return x.MergeWith
	}
	return nil
}

func (x *PagedCrossReferences) GetSourceTicket() string {
	if x != nil {
		return x.SourceTicket
	}
	return ""
}

func (x *PagedCrossReferences) GetSourceNode() *Node {
	if x != nil {
		return x.SourceNode
	}
	return nil
}

func (x *PagedCrossReferences) GetGroup() []*PagedCrossReferences_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *PagedCrossReferences) GetPageIndex() []*PagedCrossReferences_PageIndex {
	if x != nil {
		return x.PageIndex
	}
	return nil
}

// Deprecated: Marked as deprecated in kythe/proto/serving.proto.
func (x *PagedCrossReferences) GetTotalReferences() int32 {
	if x != nil {
		return x.TotalReferences
	}
	return 0
}

func (x *PagedCrossReferences) GetIncomplete() bool {
	if x != nil {
		return x.Incomplete
	}
	return false
}

func (x *PagedCrossReferences) GetMarkedSource() *common_go_proto.MarkedSource {
	if x != nil {
		return x.MarkedSource
	}
	return nil
}

func (x *PagedCrossReferences) GetPageSearchIndex() *PagedCrossReferences_PageSearchIndex {
	if x != nil {
		return x.PageSearchIndex
	}
	return nil
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket       string                        `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	MarkedSource *common_go_proto.MarkedSource `protobuf:"bytes,2,opt,name=marked_source,json=markedSource,proto3" json:"marked_source,omitempty"`
	RawText      string                        `protobuf:"bytes,3,opt,name=raw_text,json=rawText,proto3" json:"raw_text,omitempty"`
	Link         []*common_go_proto.Link       `protobuf:"bytes,4,rep,name=link,proto3" json:"link,omitempty"`
	ChildTicket  []string                      `protobuf:"bytes,5,rep,name=child_ticket,json=childTicket,proto3" json:"child_ticket,omitempty"`
	Node         []*Node                       `protobuf:"bytes,6,rep,name=node,proto3" json:"node,omitempty"`
	DocumentedBy string                        `protobuf:"bytes,7,opt,name=documented_by,json=documentedBy,proto3" json:"documented_by,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{14}
}

func (x *Document) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *Document) GetMarkedSource() *common_go_proto.MarkedSource {
	if x != nil {
		return x.MarkedSource
	}
	return nil
}

func (x *Document) GetRawText() string {
	if x != nil {
		return x.RawText
	}
	return ""
}

func (x *Document) GetLink() []*common_go_proto.Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *Document) GetChildTicket() []string {
	if x != nil {
		return x.ChildTicket
	}
	return nil
}

func (x *Document) GetNode() []*Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *Document) GetDocumentedBy() string {
	if x != nil {
		return x.DocumentedBy
	}
	return ""
}

type IdentifierMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualifiedName string                  `protobuf:"bytes,1,opt,name=qualified_name,json=qualifiedName,proto3" json:"qualified_name,omitempty"`
	BaseName      string                  `protobuf:"bytes,2,opt,name=base_name,json=baseName,proto3" json:"base_name,omitempty"`
	Node          []*IdentifierMatch_Node `protobuf:"bytes,3,rep,name=node,proto3" json:"node,omitempty"`
}

func (x *IdentifierMatch) Reset() {
	*x = IdentifierMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierMatch) ProtoMessage() {}

func (x *IdentifierMatch) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierMatch.ProtoReflect.Descriptor instead.
func (*IdentifierMatch) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{15}
}

func (x *IdentifierMatch) GetQualifiedName() string {
	if x != nil {
		return x.QualifiedName
	}
	return ""
}

func (x *IdentifierMatch) GetBaseName() string {
	if x != nil {
		return x.BaseName
	}
	return ""
}

func (x *IdentifierMatch) GetNode() []*IdentifierMatch_Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type Relatives struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickets []string       `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	Type    Relatives_Type `protobuf:"varint,2,opt,name=type,proto3,enum=kythe.proto.serving.Relatives_Type" json:"type,omitempty"`
}

func (x *Relatives) Reset() {
	*x = Relatives{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relatives) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relatives) ProtoMessage() {}

func (x *Relatives) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relatives.ProtoReflect.Descriptor instead.
func (*Relatives) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{16}
}

func (x *Relatives) GetTickets() []string {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *Relatives) GetType() Relatives_Type {
	if x != nil {
		return x.Type
	}
	return Relatives_UNKNOWN
}

type Callgraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickets []string       `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	Type    Callgraph_Type `protobuf:"varint,2,opt,name=type,proto3,enum=kythe.proto.serving.Callgraph_Type" json:"type,omitempty"`
}

func (x *Callgraph) Reset() {
	*x = Callgraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Callgraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Callgraph) ProtoMessage() {}

func (x *Callgraph) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Callgraph.ProtoReflect.Descriptor instead.
func (*Callgraph) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{17}
}

func (x *Callgraph) GetTickets() []string {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *Callgraph) GetType() Callgraph_Type {
	if x != nil {
		return x.Type
	}
	return Callgraph_UNKNOWN
}

type Diff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanLength       []int32     `protobuf:"varint,1,rep,packed,name=span_length,json=spanLength,proto3" json:"span_length,omitempty"`
	SpanType         []Diff_Type `protobuf:"varint,2,rep,packed,name=span_type,json=spanType,proto3,enum=kythe.proto.serving.Diff_Type" json:"span_type,omitempty"`
	SpanNewlines     []int32     `protobuf:"varint,3,rep,packed,name=span_newlines,json=spanNewlines,proto3" json:"span_newlines,omitempty"`
	SpanFirstNewline []int32     `protobuf:"varint,4,rep,packed,name=span_first_newline,json=spanFirstNewline,proto3" json:"span_first_newline,omitempty"`
	SpanLastNewline  []int32     `protobuf:"varint,5,rep,packed,name=span_last_newline,json=spanLastNewline,proto3" json:"span_last_newline,omitempty"`
}

func (x *Diff) Reset() {
	*x = Diff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diff) ProtoMessage() {}

func (x *Diff) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diff.ProtoReflect.Descriptor instead.
func (*Diff) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{18}
}

func (x *Diff) GetSpanLength() []int32 {
	if x != nil {
		return x.SpanLength
	}
	return nil
}

func (x *Diff) GetSpanType() []Diff_Type {
	if x != nil {
		return x.SpanType
	}
	return nil
}

func (x *Diff) GetSpanNewlines() []int32 {
	if x != nil {
		return x.SpanNewlines
	}
	return nil
}

func (x *Diff) GetSpanFirstNewline() []int32 {
	if x != nil {
		return x.SpanFirstNewline
	}
	return nil
}

func (x *Diff) GetSpanLastNewline() []int32 {
	if x != nil {
		return x.SpanLastNewline
	}
	return nil
}

type EdgeGroup_Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target  *Node `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Ordinal int32 `protobuf:"varint,2,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
}

func (x *EdgeGroup_Edge) Reset() {
	*x = EdgeGroup_Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeGroup_Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeGroup_Edge) ProtoMessage() {}

func (x *EdgeGroup_Edge) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeGroup_Edge.ProtoReflect.Descriptor instead.
func (*EdgeGroup_Edge) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{2, 0}
}

func (x *EdgeGroup_Edge) GetTarget() *Node {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *EdgeGroup_Edge) GetOrdinal() int32 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

type FileDirectory_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind        FileDirectory_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=kythe.proto.serving.FileDirectory_Kind" json:"kind,omitempty"`
	Name        string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BuildConfig []string           `protobuf:"bytes,3,rep,name=build_config,json=buildConfig,proto3" json:"build_config,omitempty"`
	Generated   bool               `protobuf:"varint,4,opt,name=generated,proto3" json:"generated,omitempty"`
	MissingText bool               `protobuf:"varint,5,opt,name=missing_text,json=missingText,proto3" json:"missing_text,omitempty"`
}

func (x *FileDirectory_Entry) Reset() {
	*x = FileDirectory_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDirectory_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDirectory_Entry) ProtoMessage() {}

func (x *FileDirectory_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDirectory_Entry.ProtoReflect.Descriptor instead.
func (*FileDirectory_Entry) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{6, 0}
}

func (x *FileDirectory_Entry) GetKind() FileDirectory_Kind {
	if x != nil {
		return x.Kind
	}
	return FileDirectory_UNKNOWN
}

func (x *FileDirectory_Entry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileDirectory_Entry) GetBuildConfig() []string {
	if x != nil {
		return x.BuildConfig
	}
	return nil
}

func (x *FileDirectory_Entry) GetGenerated() bool {
	if x != nil {
		return x.Generated
	}
	return false
}

func (x *FileDirectory_Entry) GetMissingText() bool {
	if x != nil {
		return x.MissingText
	}
	return false
}

type CorpusRoots_Corpus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Corpus      string   `protobuf:"bytes,1,opt,name=corpus,proto3" json:"corpus,omitempty"`
	Root        []string `protobuf:"bytes,2,rep,name=root,proto3" json:"root,omitempty"`
	BuildConfig []string `protobuf:"bytes,3,rep,name=build_config,json=buildConfig,proto3" json:"build_config,omitempty"`
}

func (x *CorpusRoots_Corpus) Reset() {
	*x = CorpusRoots_Corpus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorpusRoots_Corpus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorpusRoots_Corpus) ProtoMessage() {}

func (x *CorpusRoots_Corpus) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorpusRoots_Corpus.ProtoReflect.Descriptor instead.
func (*CorpusRoots_Corpus) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CorpusRoots_Corpus) GetCorpus() string {
	if x != nil {
		return x.Corpus
	}
	return ""
}

func (x *CorpusRoots_Corpus) GetRoot() []string {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *CorpusRoots_Corpus) GetBuildConfig() []string {
	if x != nil {
		return x.BuildConfig
	}
	return nil
}

type FileDecorations_Decoration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anchor           *RawAnchor `protobuf:"bytes,1,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Kind             string     `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Target           string     `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	TargetDefinition string     `protobuf:"bytes,4,opt,name=target_definition,json=targetDefinition,proto3" json:"target_definition,omitempty"`
	SemanticScope    string     `protobuf:"bytes,6,opt,name=semantic_scope,json=semanticScope,proto3" json:"semantic_scope,omitempty"`
}

func (x *FileDecorations_Decoration) Reset() {
	*x = FileDecorations_Decoration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDecorations_Decoration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDecorations_Decoration) ProtoMessage() {}

func (x *FileDecorations_Decoration) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDecorations_Decoration.ProtoReflect.Descriptor instead.
func (*FileDecorations_Decoration) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{12, 0}
}

func (x *FileDecorations_Decoration) GetAnchor() *RawAnchor {
	if x != nil {
		return x.Anchor
	}
	return nil
}

func (x *FileDecorations_Decoration) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *FileDecorations_Decoration) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *FileDecorations_Decoration) GetTargetDefinition() string {
	if x != nil {
		return x.TargetDefinition
	}
	return ""
}

func (x *FileDecorations_Decoration) GetSemanticScope() string {
	if x != nil {
		return x.SemanticScope
	}
	return ""
}

type FileDecorations_Override struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overriding           string                        `protobuf:"bytes,1,opt,name=overriding,proto3" json:"overriding,omitempty"`
	Overridden           string                        `protobuf:"bytes,2,opt,name=overridden,proto3" json:"overridden,omitempty"`
	OverriddenDefinition string                        `protobuf:"bytes,5,opt,name=overridden_definition,json=overriddenDefinition,proto3" json:"overridden_definition,omitempty"`
	Kind                 FileDecorations_Override_Kind `protobuf:"varint,3,opt,name=kind,proto3,enum=kythe.proto.serving.FileDecorations_Override_Kind" json:"kind,omitempty"`
	MarkedSource         *common_go_proto.MarkedSource `protobuf:"bytes,4,opt,name=marked_source,json=markedSource,proto3" json:"marked_source,omitempty"`
}

func (x *FileDecorations_Override) Reset() {
	*x = FileDecorations_Override{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDecorations_Override) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDecorations_Override) ProtoMessage() {}

func (x *FileDecorations_Override) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDecorations_Override.ProtoReflect.Descriptor instead.
func (*FileDecorations_Override) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{12, 1}
}

func (x *FileDecorations_Override) GetOverriding() string {
	if x != nil {
		return x.Overriding
	}
	return ""
}

func (x *FileDecorations_Override) GetOverridden() string {
	if x != nil {
		return x.Overridden
	}
	return ""
}

func (x *FileDecorations_Override) GetOverriddenDefinition() string {
	if x != nil {
		return x.OverriddenDefinition
	}
	return ""
}

func (x *FileDecorations_Override) GetKind() FileDecorations_Override_Kind {
	if x != nil {
		return x.Kind
	}
	return FileDecorations_Override_OVERRIDES
}

func (x *FileDecorations_Override) GetMarkedSource() *common_go_proto.MarkedSource {
	if x != nil {
		return x.MarkedSource
	}
	return nil
}

type PagedCrossReferences_RelatedNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node    *Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Ordinal int32 `protobuf:"varint,2,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
}

func (x *PagedCrossReferences_RelatedNode) Reset() {
	*x = PagedCrossReferences_RelatedNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedCrossReferences_RelatedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedCrossReferences_RelatedNode) ProtoMessage() {}

func (x *PagedCrossReferences_RelatedNode) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedCrossReferences_RelatedNode.ProtoReflect.Descriptor instead.
func (*PagedCrossReferences_RelatedNode) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{13, 0}
}

func (x *PagedCrossReferences_RelatedNode) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *PagedCrossReferences_RelatedNode) GetOrdinal() int32 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

type PagedCrossReferences_ScopedReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope         *ExpandedAnchor               `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	SemanticScope string                        `protobuf:"bytes,2,opt,name=semantic_scope,json=semanticScope,proto3" json:"semantic_scope,omitempty"`
	MarkedSource  *common_go_proto.MarkedSource `protobuf:"bytes,3,opt,name=marked_source,json=markedSource,proto3" json:"marked_source,omitempty"`
	Reference     []*ExpandedAnchor             `protobuf:"bytes,4,rep,name=reference,proto3" json:"reference,omitempty"`
}

func (x *PagedCrossReferences_ScopedReference) Reset() {
	*x = PagedCrossReferences_ScopedReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedCrossReferences_ScopedReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedCrossReferences_ScopedReference) ProtoMessage() {}

func (x *PagedCrossReferences_ScopedReference) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedCrossReferences_ScopedReference.ProtoReflect.Descriptor instead.
func (*PagedCrossReferences_ScopedReference) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{13, 1}
}

func (x *PagedCrossReferences_ScopedReference) GetScope() *ExpandedAnchor {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *PagedCrossReferences_ScopedReference) GetSemanticScope() string {
	if x != nil {
		return x.SemanticScope
	}
	return ""
}

func (x *PagedCrossReferences_ScopedReference) GetMarkedSource() *common_go_proto.MarkedSource {
	if x != nil {
		return x.MarkedSource
	}
	return nil
}

func (x *PagedCrossReferences_ScopedReference) GetReference() []*ExpandedAnchor {
	if x != nil {
		return x.Reference
	}
	return nil
}

type PagedCrossReferences_Caller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Caller         *ExpandedAnchor               `protobuf:"bytes,1,opt,name=caller,proto3" json:"caller,omitempty"`
	SemanticCaller string                        `protobuf:"bytes,2,opt,name=semantic_caller,json=semanticCaller,proto3" json:"semantic_caller,omitempty"`
	MarkedSource   *common_go_proto.MarkedSource `protobuf:"bytes,3,opt,name=marked_source,json=markedSource,proto3" json:"marked_source,omitempty"`
	Callsite       []*ExpandedAnchor             `protobuf:"bytes,4,rep,name=callsite,proto3" json:"callsite,omitempty"`
}

func (x *PagedCrossReferences_Caller) Reset() {
	*x = PagedCrossReferences_Caller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedCrossReferences_Caller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedCrossReferences_Caller) ProtoMessage() {}

func (x *PagedCrossReferences_Caller) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedCrossReferences_Caller.ProtoReflect.Descriptor instead.
func (*PagedCrossReferences_Caller) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{13, 2}
}

func (x *PagedCrossReferences_Caller) GetCaller() *ExpandedAnchor {
	if x != nil {
		return x.Caller
	}
	return nil
}

func (x *PagedCrossReferences_Caller) GetSemanticCaller() string {
	if x != nil {
		return x.SemanticCaller
	}
	return ""
}

func (x *PagedCrossReferences_Caller) GetMarkedSource() *common_go_proto.MarkedSource {
	if x != nil {
		return x.MarkedSource
	}
	return nil
}

func (x *PagedCrossReferences_Caller) GetCallsite() []*ExpandedAnchor {
	if x != nil {
		return x.Callsite
	}
	return nil
}

type PagedCrossReferences_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind            string                                  `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	BuildConfig     string                                  `protobuf:"bytes,5,opt,name=build_config,json=buildConfig,proto3" json:"build_config,omitempty"`
	Anchor          []*ExpandedAnchor                       `protobuf:"bytes,2,rep,name=anchor,proto3" json:"anchor,omitempty"`
	RelatedNode     []*PagedCrossReferences_RelatedNode     `protobuf:"bytes,3,rep,name=related_node,json=relatedNode,proto3" json:"related_node,omitempty"`
	Caller          []*PagedCrossReferences_Caller          `protobuf:"bytes,4,rep,name=caller,proto3" json:"caller,omitempty"`
	ScopedReference []*PagedCrossReferences_ScopedReference `protobuf:"bytes,7,rep,name=scoped_reference,json=scopedReference,proto3" json:"scoped_reference,omitempty"`
	FileInfo        []*FileInfo                             `protobuf:"bytes,6,rep,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
}

func (x *PagedCrossReferences_Group) Reset() {
	*x = PagedCrossReferences_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedCrossReferences_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedCrossReferences_Group) ProtoMessage() {}

func (x *PagedCrossReferences_Group) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedCrossReferences_Group.ProtoReflect.Descriptor instead.
func (*PagedCrossReferences_Group) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{13, 3}
}

func (x *PagedCrossReferences_Group) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PagedCrossReferences_Group) GetBuildConfig() string {
	if x != nil {
		return x.BuildConfig
	}
	return ""
}

func (x *PagedCrossReferences_Group) GetAnchor() []*ExpandedAnchor {
	if x != nil {
		return x.Anchor
	}
	return nil
}

func (x *PagedCrossReferences_Group) GetRelatedNode() []*PagedCrossReferences_RelatedNode {
	if x != nil {
		return x.RelatedNode
	}
	return nil
}

func (x *PagedCrossReferences_Group) GetCaller() []*PagedCrossReferences_Caller {
	if x != nil {
		return x.Caller
	}
	return nil
}

func (x *PagedCrossReferences_Group) GetScopedReference() []*PagedCrossReferences_ScopedReference {
	if x != nil {
		return x.ScopedReference
	}
	return nil
}

func (x *PagedCrossReferences_Group) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

type PagedCrossReferences_Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageKey      string                      `protobuf:"bytes,1,opt,name=page_key,json=pageKey,proto3" json:"page_key,omitempty"`
	SourceTicket string                      `protobuf:"bytes,2,opt,name=source_ticket,json=sourceTicket,proto3" json:"source_ticket,omitempty"`
	Group        *PagedCrossReferences_Group `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *PagedCrossReferences_Page) Reset() {
	*x = PagedCrossReferences_Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedCrossReferences_Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedCrossReferences_Page) ProtoMessage() {}

func (x *PagedCrossReferences_Page) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedCrossReferences_Page.ProtoReflect.Descriptor instead.
func (*PagedCrossReferences_Page) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{13, 4}
}

func (x *PagedCrossReferences_Page) GetPageKey() string {
	if x != nil {
		return x.PageKey
	}
	return ""
}

func (x *PagedCrossReferences_Page) GetSourceTicket() string {
	if x != nil {
		return x.SourceTicket
	}
	return ""
}

func (x *PagedCrossReferences_Page) GetGroup() *PagedCrossReferences_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type PagedCrossReferences_PageIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind        string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Count       int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PageKey     string `protobuf:"bytes,3,opt,name=page_key,json=pageKey,proto3" json:"page_key,omitempty"`
	BuildConfig string `protobuf:"bytes,4,opt,name=build_config,json=buildConfig,proto3" json:"build_config,omitempty"`
}

func (x *PagedCrossReferences_PageIndex) Reset() {
	*x = PagedCrossReferences_PageIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedCrossReferences_PageIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedCrossReferences_PageIndex) ProtoMessage() {}

func (x *PagedCrossReferences_PageIndex) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedCrossReferences_PageIndex.ProtoReflect.Descriptor instead.
func (*PagedCrossReferences_PageIndex) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{13, 5}
}

func (x *PagedCrossReferences_PageIndex) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PagedCrossReferences_PageIndex) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PagedCrossReferences_PageIndex) GetPageKey() string {
	if x != nil {
		return x.PageKey
	}
	return ""
}

func (x *PagedCrossReferences_PageIndex) GetBuildConfig() string {
	if x != nil {
		return x.BuildConfig
	}
	return ""
}

type PagedCrossReferences_PageSearchIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByCorpus       *PagedCrossReferences_PageSearchIndex_Postings `protobuf:"bytes,1,opt,name=by_corpus,json=byCorpus,proto3" json:"by_corpus,omitempty"`
	ByRoot         *PagedCrossReferences_PageSearchIndex_Postings `protobuf:"bytes,2,opt,name=by_root,json=byRoot,proto3" json:"by_root,omitempty"`
	ByPath         *PagedCrossReferences_PageSearchIndex_Postings `protobuf:"bytes,3,opt,name=by_path,json=byPath,proto3" json:"by_path,omitempty"`
	ByResolvedPath *PagedCrossReferences_PageSearchIndex_Postings `protobuf:"bytes,4,opt,name=by_resolved_path,json=byResolvedPath,proto3" json:"by_resolved_path,omitempty"`
}

func (x *PagedCrossReferences_PageSearchIndex) Reset() {
	*x = PagedCrossReferences_PageSearchIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedCrossReferences_PageSearchIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedCrossReferences_PageSearchIndex) ProtoMessage() {}

func (x *PagedCrossReferences_PageSearchIndex) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedCrossReferences_PageSearchIndex.ProtoReflect.Descriptor instead.
func (*PagedCrossReferences_PageSearchIndex) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{13, 6}
}

func (x *PagedCrossReferences_PageSearchIndex) GetByCorpus() *PagedCrossReferences_PageSearchIndex_Postings {
	if x != nil {
		return x.ByCorpus
	}
	return nil
}

func (x *PagedCrossReferences_PageSearchIndex) GetByRoot() *PagedCrossReferences_PageSearchIndex_Postings {
	if x != nil {
		return x.ByRoot
	}
	return nil
}

func (x *PagedCrossReferences_PageSearchIndex) GetByPath() *PagedCrossReferences_PageSearchIndex_Postings {
	if x != nil {
		return x.ByPath
	}
	return nil
}

func (x *PagedCrossReferences_PageSearchIndex) GetByResolvedPath() *PagedCrossReferences_PageSearchIndex_Postings {
	if x != nil {
		return x.ByResolvedPath
	}
	return nil
}

type PagedCrossReferences_PageSearchIndex_Pages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex []uint32 `protobuf:"varint,1,rep,packed,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
}

func (x *PagedCrossReferences_PageSearchIndex_Pages) Reset() {
	*x = PagedCrossReferences_PageSearchIndex_Pages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedCrossReferences_PageSearchIndex_Pages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedCrossReferences_PageSearchIndex_Pages) ProtoMessage() {}

func (x *PagedCrossReferences_PageSearchIndex_Pages) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedCrossReferences_PageSearchIndex_Pages.ProtoReflect.Descriptor instead.
func (*PagedCrossReferences_PageSearchIndex_Pages) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{13, 6, 0}
}

func (x *PagedCrossReferences_PageSearchIndex_Pages) GetPageIndex() []uint32 {
	if x != nil {
		return x.PageIndex
	}
	return nil
}

type PagedCrossReferences_PageSearchIndex_Postings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index map[uint32]*PagedCrossReferences_PageSearchIndex_Pages `protobuf:"bytes,1,rep,name=index,proto3" json:"index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PagedCrossReferences_PageSearchIndex_Postings) Reset() {
	*x = PagedCrossReferences_PageSearchIndex_Postings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedCrossReferences_PageSearchIndex_Postings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedCrossReferences_PageSearchIndex_Postings) ProtoMessage() {}

func (x *PagedCrossReferences_PageSearchIndex_Postings) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedCrossReferences_PageSearchIndex_Postings.ProtoReflect.Descriptor instead.
func (*PagedCrossReferences_PageSearchIndex_Postings) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{13, 6, 1}
}

func (x *PagedCrossReferences_PageSearchIndex_Postings) GetIndex() map[uint32]*PagedCrossReferences_PageSearchIndex_Pages {
	if x != nil {
		return x.Index
	}
	return nil
}

type IdentifierMatch_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket      string `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	NodeKind    string `protobuf:"bytes,2,opt,name=node_kind,json=nodeKind,proto3" json:"node_kind,omitempty"`
	NodeSubkind string `protobuf:"bytes,3,opt,name=node_subkind,json=nodeSubkind,proto3" json:"node_subkind,omitempty"`
}

func (x *IdentifierMatch_Node) Reset() {
	*x = IdentifierMatch_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kythe_proto_serving_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierMatch_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierMatch_Node) ProtoMessage() {}

func (x *IdentifierMatch_Node) ProtoReflect() protoreflect.Message {
	mi := &file_kythe_proto_serving_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierMatch_Node.ProtoReflect.Descriptor instead.
func (*IdentifierMatch_Node) Descriptor() ([]byte, []int) {
	return file_kythe_proto_serving_proto_rawDescGZIP(), []int{15, 0}
}

func (x *IdentifierMatch_Node) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *IdentifierMatch_Node) GetNodeKind() string {
	if x != nil {
		return x.NodeKind
	}
	return ""
}

func (x *IdentifierMatch_Node) GetNodeSubkind() string {
	if x != nil {
		return x.NodeSubkind
	}
	return ""
}

var File_kythe_proto_serving_proto protoreflect.FileDescriptor

var file_kythe_proto_serving_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6b, 0x79, 0x74,
	0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x1a, 0x18, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x01, 0x0a, 0x04, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x66,
	0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x61, 0x63, 0x74, 0x52, 0x04, 0x66, 0x61, 0x63, 0x74, 0x12, 0x54, 0x0a, 0x13, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x12, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x22, 0xc8, 0x01, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b,
	0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x31, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x2c, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x52, 0x04, 0x66, 0x61, 0x63, 0x74, 0x22, 0xad,
	0x01, 0x0a, 0x09, 0x45, 0x64, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x37, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65, 0x1a, 0x53, 0x0a, 0x04, 0x45, 0x64, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0xdb,
	0x01, 0x0a, 0x0c, 0x50, 0x61, 0x67, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x53, 0x65, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x62, 0x0a, 0x09,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x67,
	0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x64,
	0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x64, 0x67, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79,
	0x22, 0x8b, 0x01, 0x0a, 0x08, 0x45, 0x64, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3f, 0x0a,
	0x0b, 0x65, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0a, 0x65, 0x64, 0x67, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x89,
	0x03, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x3e, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x26, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0xbc, 0x01,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x22, 0x2c, 0x0a, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x22, 0xa7, 0x01, 0x0a, 0x0b, 0x43,
	0x6f, 0x72, 0x70, 0x75, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x6f,
	0x72, 0x70, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x79, 0x74,
	0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x72,
	0x70, 0x75, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x1a, 0x57, 0x0a, 0x06, 0x43,
	0x6f, 0x72, 0x70, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x8f, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x77, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65,
	0x74, 0x45, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdc, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x65, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x6e,
	0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74,
	0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x61, 0x6e,
	0x52, 0x0b, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x2f, 0x0a,
	0x13, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x3a, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x22, 0xbe, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x72, 0x70,
	0x75, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b,
	0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x22, 0x8b, 0x08, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65,
	0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b,
	0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64,
	0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x12,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x56, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b,
	0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0a, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3a, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xc4, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x61, 0x77,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0xb2,
	0x02, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x22, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x56, 0x45, 0x52, 0x52,
	0x49, 0x44, 0x45, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44,
	0x53, 0x10, 0x01, 0x22, 0x84, 0x14, 0x0a, 0x14, 0x50, 0x61, 0x67, 0x65, 0x64, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x79,
	0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x65, 0x0a,
	0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x1a, 0x56, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x1a, 0xfd, 0x01, 0x0a,
	0x0f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x39, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b,
	0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0xf6, 0x01, 0x0a,
	0x06, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x69, 0x74, 0x65, 0x1a, 0xc1, 0x03, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x12, 0x58, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x79, 0x74, 0x68,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a,
	0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x64, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x8d, 0x01, 0x0a, 0x04, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x64, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x73, 0x0a, 0x09, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xb3,
	0x05, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x5f, 0x0a, 0x09, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x64, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x62, 0x79, 0x43, 0x6f, 0x72,
	0x70, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x64,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x62, 0x79, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x5b, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x64, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x62, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x6c, 0x0a,
	0x10, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x62, 0x79, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x2a, 0x0a, 0x05, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xea, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x63, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x64, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x79, 0x0a, 0x0a, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22, 0xa9, 0x02, 0x0a, 0x08, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x45, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xf4, 0x01, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b,
	0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x5e, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x62, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x8e, 0x01,
	0x0a, 0x09, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2e,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e, 0x10, 0x02, 0x22, 0x8b,
	0x01, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x45, 0x10, 0x02, 0x22, 0xa2, 0x02, 0x0a,
	0x04, 0x44, 0x69, 0x66, 0x66, 0x12, 0x23, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x73, 0x70, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x73,
	0x70, 0x61, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x6e, 0x4e, 0x65, 0x77, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x12, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x10, 0x73, 0x70, 0x61, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x73, 0x70, 0x61, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x4e,
	0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x53,
	0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x02, 0x42, 0x33, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x6b, 0x79, 0x74, 0x68, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x6f,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kythe_proto_serving_proto_rawDescOnce sync.Once
	file_kythe_proto_serving_proto_rawDescData = file_kythe_proto_serving_proto_rawDesc
)

func file_kythe_proto_serving_proto_rawDescGZIP() []byte {
	file_kythe_proto_serving_proto_rawDescOnce.Do(func() {
		file_kythe_proto_serving_proto_rawDescData = protoimpl.X.CompressGZIP(file_kythe_proto_serving_proto_rawDescData)
	})
	return file_kythe_proto_serving_proto_rawDescData
}

var file_kythe_proto_serving_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_kythe_proto_serving_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_kythe_proto_serving_proto_goTypes = []interface{}{
	(FileDirectory_Kind)(0),                               // 0: kythe.proto.serving.FileDirectory.Kind
	(FileDecorations_Override_Kind)(0),                    // 1: kythe.proto.serving.FileDecorations.Override.Kind
	(Relatives_Type)(0),                                   // 2: kythe.proto.serving.Relatives.Type
	(Callgraph_Type)(0),                                   // 3: kythe.proto.serving.Callgraph.Type
	(Diff_Type)(0),                                        // 4: kythe.proto.serving.Diff.Type
	(*Node)(nil),                                          // 5: kythe.proto.serving.Node
	(*Edge)(nil),                                          // 6: kythe.proto.serving.Edge
	(*EdgeGroup)(nil),                                     // 7: kythe.proto.serving.EdgeGroup
	(*PagedEdgeSet)(nil),                                  // 8: kythe.proto.serving.PagedEdgeSet
	(*PageIndex)(nil),                                     // 9: kythe.proto.serving.PageIndex
	(*EdgePage)(nil),                                      // 10: kythe.proto.serving.EdgePage
	(*FileDirectory)(nil),                                 // 11: kythe.proto.serving.FileDirectory
	(*CorpusRoots)(nil),                                   // 12: kythe.proto.serving.CorpusRoots
	(*File)(nil),                                          // 13: kythe.proto.serving.File
	(*RawAnchor)(nil),                                     // 14: kythe.proto.serving.RawAnchor
	(*ExpandedAnchor)(nil),                                // 15: kythe.proto.serving.ExpandedAnchor
	(*FileInfo)(nil),                                      // 16: kythe.proto.serving.FileInfo
	(*FileDecorations)(nil),                               // 17: kythe.proto.serving.FileDecorations
	(*PagedCrossReferences)(nil),                          // 18: kythe.proto.serving.PagedCrossReferences
	(*Document)(nil),                                      // 19: kythe.proto.serving.Document
	(*IdentifierMatch)(nil),                               // 20: kythe.proto.serving.IdentifierMatch
	(*Relatives)(nil),                                     // 21: kythe.proto.serving.Relatives
	(*Callgraph)(nil),                                     // 22: kythe.proto.serving.Callgraph
	(*Diff)(nil),                                          // 23: kythe.proto.serving.Diff
	(*EdgeGroup_Edge)(nil),                                // 24: kythe.proto.serving.EdgeGroup.Edge
	(*FileDirectory_Entry)(nil),                           // 25: kythe.proto.serving.FileDirectory.Entry
	(*CorpusRoots_Corpus)(nil),                            // 26: kythe.proto.serving.CorpusRoots.Corpus
	(*FileDecorations_Decoration)(nil),                    // 27: kythe.proto.serving.FileDecorations.Decoration
	(*FileDecorations_Override)(nil),                      // 28: kythe.proto.serving.FileDecorations.Override
	(*PagedCrossReferences_RelatedNode)(nil),              // 29: kythe.proto.serving.PagedCrossReferences.RelatedNode
	(*PagedCrossReferences_ScopedReference)(nil),          // 30: kythe.proto.serving.PagedCrossReferences.ScopedReference
	(*PagedCrossReferences_Caller)(nil),                   // 31: kythe.proto.serving.PagedCrossReferences.Caller
	(*PagedCrossReferences_Group)(nil),                    // 32: kythe.proto.serving.PagedCrossReferences.Group
	(*PagedCrossReferences_Page)(nil),                     // 33: kythe.proto.serving.PagedCrossReferences.Page
	(*PagedCrossReferences_PageIndex)(nil),                // 34: kythe.proto.serving.PagedCrossReferences.PageIndex
	(*PagedCrossReferences_PageSearchIndex)(nil),          // 35: kythe.proto.serving.PagedCrossReferences.PageSearchIndex
	(*PagedCrossReferences_PageSearchIndex_Pages)(nil),    // 36: kythe.proto.serving.PagedCrossReferences.PageSearchIndex.Pages
	(*PagedCrossReferences_PageSearchIndex_Postings)(nil), // 37: kythe.proto.serving.PagedCrossReferences.PageSearchIndex.Postings
	nil,                                  // 38: kythe.proto.serving.PagedCrossReferences.PageSearchIndex.Postings.IndexEntry
	(*IdentifierMatch_Node)(nil),         // 39: kythe.proto.serving.IdentifierMatch.Node
	(*common_go_proto.Fact)(nil),         // 40: kythe.proto.common.Fact
	(*common_go_proto.Span)(nil),         // 41: kythe.proto.common.Span
	(*common_go_proto.CorpusPath)(nil),   // 42: kythe.proto.common.CorpusPath
	(*common_go_proto.Hash)(nil),         // 43: kythe.proto.common.Hash
	(*common_go_proto.Diagnostic)(nil),   // 44: kythe.proto.common.Diagnostic
	(*common_go_proto.MarkedSource)(nil), // 45: kythe.proto.common.MarkedSource
	(*common_go_proto.Link)(nil),         // 46: kythe.proto.common.Link
}
var file_kythe_proto_serving_proto_depIdxs = []int32{
	40, // 0: kythe.proto.serving.Node.fact:type_name -> kythe.proto.common.Fact
	15, // 1: kythe.proto.serving.Node.definition_location:type_name -> kythe.proto.serving.ExpandedAnchor
	5,  // 2: kythe.proto.serving.Edge.source:type_name -> kythe.proto.serving.Node
	5,  // 3: kythe.proto.serving.Edge.target:type_name -> kythe.proto.serving.Node
	40, // 4: kythe.proto.serving.Edge.fact:type_name -> kythe.proto.common.Fact
	24, // 5: kythe.proto.serving.EdgeGroup.edge:type_name -> kythe.proto.serving.EdgeGroup.Edge
	5,  // 6: kythe.proto.serving.PagedEdgeSet.source:type_name -> kythe.proto.serving.Node
	7,  // 7: kythe.proto.serving.PagedEdgeSet.group:type_name -> kythe.proto.serving.EdgeGroup
	9,  // 8: kythe.proto.serving.PagedEdgeSet.page_index:type_name -> kythe.proto.serving.PageIndex
	7,  // 9: kythe.proto.serving.EdgePage.edges_group:type_name -> kythe.proto.serving.EdgeGroup
	25, // 10: kythe.proto.serving.FileDirectory.entry:type_name -> kythe.proto.serving.FileDirectory.Entry
	26, // 11: kythe.proto.serving.CorpusRoots.corpus:type_name -> kythe.proto.serving.CorpusRoots.Corpus
	16, // 12: kythe.proto.serving.File.info:type_name -> kythe.proto.serving.FileInfo
	41, // 13: kythe.proto.serving.ExpandedAnchor.span:type_name -> kythe.proto.common.Span
	41, // 14: kythe.proto.serving.ExpandedAnchor.snippet_span:type_name -> kythe.proto.common.Span
	16, // 15: kythe.proto.serving.ExpandedAnchor.file_info:type_name -> kythe.proto.serving.FileInfo
	42, // 16: kythe.proto.serving.FileInfo.corpus_path:type_name -> kythe.proto.common.CorpusPath
	43, // 17: kythe.proto.serving.FileInfo.hash:type_name -> kythe.proto.common.Hash
	13, // 18: kythe.proto.serving.FileDecorations.file:type_name -> kythe.proto.serving.File
	27, // 19: kythe.proto.serving.FileDecorations.decoration:type_name -> kythe.proto.serving.FileDecorations.Decoration
	5,  // 20: kythe.proto.serving.FileDecorations.target:type_name -> kythe.proto.serving.Node
	15, // 21: kythe.proto.serving.FileDecorations.target_definitions:type_name -> kythe.proto.serving.ExpandedAnchor
	28, // 22: kythe.proto.serving.FileDecorations.target_override:type_name -> kythe.proto.serving.FileDecorations.Override
	44, // 23: kythe.proto.serving.FileDecorations.diagnostic:type_name -> kythe.proto.common.Diagnostic
	16, // 24: kythe.proto.serving.FileDecorations.file_info:type_name -> kythe.proto.serving.FileInfo
	5,  // 25: kythe.proto.serving.PagedCrossReferences.source_node:type_name -> kythe.proto.serving.Node
	32, // 26: kythe.proto.serving.PagedCrossReferences.group:type_name -> kythe.proto.serving.PagedCrossReferences.Group
	34, // 27: kythe.proto.serving.PagedCrossReferences.page_index:type_name -> kythe.proto.serving.PagedCrossReferences.PageIndex
	45, // 28: kythe.proto.serving.PagedCrossReferences.marked_source:type_name -> kythe.proto.common.MarkedSource
	35, // 29: kythe.proto.serving.PagedCrossReferences.page_search_index:type_name -> kythe.proto.serving.PagedCrossReferences.PageSearchIndex
	45, // 30: kythe.proto.serving.Document.marked_source:type_name -> kythe.proto.common.MarkedSource
	46, // 31: kythe.proto.serving.Document.link:type_name -> kythe.proto.common.Link
	5,  // 32: kythe.proto.serving.Document.node:type_name -> kythe.proto.serving.Node
	39, // 33: kythe.proto.serving.IdentifierMatch.node:type_name -> kythe.proto.serving.IdentifierMatch.Node
	2,  // 34: kythe.proto.serving.Relatives.type:type_name -> kythe.proto.serving.Relatives.Type
	3,  // 35: kythe.proto.serving.Callgraph.type:type_name -> kythe.proto.serving.Callgraph.Type
	4,  // 36: kythe.proto.serving.Diff.span_type:type_name -> kythe.proto.serving.Diff.Type
	5,  // 37: kythe.proto.serving.EdgeGroup.Edge.target:type_name -> kythe.proto.serving.Node
	0,  // 38: kythe.proto.serving.FileDirectory.Entry.kind:type_name -> kythe.proto.serving.FileDirectory.Kind
	14, // 39: kythe.proto.serving.FileDecorations.Decoration.anchor:type_name -> kythe.proto.serving.RawAnchor
	1,  // 40: kythe.proto.serving.FileDecorations.Override.kind:type_name -> kythe.proto.serving.FileDecorations.Override.Kind
	45, // 41: kythe.proto.serving.FileDecorations.Override.marked_source:type_name -> kythe.proto.common.MarkedSource
	5,  // 42: kythe.proto.serving.PagedCrossReferences.RelatedNode.node:type_name -> kythe.proto.serving.Node
	15, // 43: kythe.proto.serving.PagedCrossReferences.ScopedReference.scope:type_name -> kythe.proto.serving.ExpandedAnchor
	45, // 44: kythe.proto.serving.PagedCrossReferences.ScopedReference.marked_source:type_name -> kythe.proto.common.MarkedSource
	15, // 45: kythe.proto.serving.PagedCrossReferences.ScopedReference.reference:type_name -> kythe.proto.serving.ExpandedAnchor
	15, // 46: kythe.proto.serving.PagedCrossReferences.Caller.caller:type_name -> kythe.proto.serving.ExpandedAnchor
	45, // 47: kythe.proto.serving.PagedCrossReferences.Caller.marked_source:type_name -> kythe.proto.common.MarkedSource
	15, // 48: kythe.proto.serving.PagedCrossReferences.Caller.callsite:type_name -> kythe.proto.serving.ExpandedAnchor
	15, // 49: kythe.proto.serving.PagedCrossReferences.Group.anchor:type_name -> kythe.proto.serving.ExpandedAnchor
	29, // 50: kythe.proto.serving.PagedCrossReferences.Group.related_node:type_name -> kythe.proto.serving.PagedCrossReferences.RelatedNode
	31, // 51: kythe.proto.serving.PagedCrossReferences.Group.caller:type_name -> kythe.proto.serving.PagedCrossReferences.Caller
	30, // 52: kythe.proto.serving.PagedCrossReferences.Group.scoped_reference:type_name -> kythe.proto.serving.PagedCrossReferences.ScopedReference
	16, // 53: kythe.proto.serving.PagedCrossReferences.Group.file_info:type_name -> kythe.proto.serving.FileInfo
	32, // 54: kythe.proto.serving.PagedCrossReferences.Page.group:type_name -> kythe.proto.serving.PagedCrossReferences.Group
	37, // 55: kythe.proto.serving.PagedCrossReferences.PageSearchIndex.by_corpus:type_name -> kythe.proto.serving.PagedCrossReferences.PageSearchIndex.Postings
	37, // 56: kythe.proto.serving.PagedCrossReferences.PageSearchIndex.by_root:type_name -> kythe.proto.serving.PagedCrossReferences.PageSearchIndex.Postings
	37, // 57: kythe.proto.serving.PagedCrossReferences.PageSearchIndex.by_path:type_name -> kythe.proto.serving.PagedCrossReferences.PageSearchIndex.Postings
	37, // 58: kythe.proto.serving.PagedCrossReferences.PageSearchIndex.by_resolved_path:type_name -> kythe.proto.serving.PagedCrossReferences.PageSearchIndex.Postings
	38, // 59: kythe.proto.serving.PagedCrossReferences.PageSearchIndex.Postings.index:type_name -> kythe.proto.serving.PagedCrossReferences.PageSearchIndex.Postings.IndexEntry
	36, // 60: kythe.proto.serving.PagedCrossReferences.PageSearchIndex.Postings.IndexEntry.value:type_name -> kythe.proto.serving.PagedCrossReferences.PageSearchIndex.Pages
	61, // [61:61] is the sub-list for method output_type
	61, // [61:61] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_kythe_proto_serving_proto_init() }
func file_kythe_proto_serving_proto_init() {
	if File_kythe_proto_serving_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kythe_proto_serving_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedEdgeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgePage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorpusRoots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawAnchor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandedAnchor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDecorations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedCrossReferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relatives); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Callgraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeGroup_Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDirectory_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorpusRoots_Corpus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDecorations_Decoration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDecorations_Override); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedCrossReferences_RelatedNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedCrossReferences_ScopedReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedCrossReferences_Caller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedCrossReferences_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedCrossReferences_Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedCrossReferences_PageIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedCrossReferences_PageSearchIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedCrossReferences_PageSearchIndex_Pages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedCrossReferences_PageSearchIndex_Postings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kythe_proto_serving_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierMatch_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kythe_proto_serving_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kythe_proto_serving_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kythe_proto_serving_proto_goTypes,
		DependencyIndexes: file_kythe_proto_serving_proto_depIdxs,
		EnumInfos:         file_kythe_proto_serving_proto_enumTypes,
		MessageInfos:      file_kythe_proto_serving_proto_msgTypes,
	}.Build()
	File_kythe_proto_serving_proto = out.File
	file_kythe_proto_serving_proto_rawDesc = nil
	file_kythe_proto_serving_proto_goTypes = nil
	file_kythe_proto_serving_proto_depIdxs = nil
}
